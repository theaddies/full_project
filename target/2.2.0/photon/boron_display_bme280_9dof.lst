
z:/Personal/Electronics/particle/boron_display_bme280_9dof/target/2.2.0/photon/boron_display_bme280_9dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006f10  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a6f30  080a6f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a6f38  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080a6f3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000062c  20000070  20000070  00040070  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a6fac  080a6fac  00036fac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a6fd4  080a6fd4  00036fd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001ab276  00000000  00000000  00036fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001ae70  00000000  00000000  001e224e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00021106  00000000  00000000  001fd0be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000024b0  00000000  00000000  0021e1c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005290  00000000  00000000  00220674  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00030891  00000000  00000000  00225904  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003e750  00000000  00000000  00256195  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b4e92  00000000  00000000  002948e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000067fc  00000000  00000000  00349778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f005 ffd9 	bl	80a5fe8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f005 ffe1 	bl	80a6004 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a6f3c 	.word	0x080a6f3c
 80a0050:	20000070 	.word	0x20000070
 80a0054:	20000070 	.word	0x20000070
 80a0058:	20000699 	.word	0x20000699
 80a005c:	20000699 	.word	0x20000699

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f003 f919 	bl	80a3298 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a6f08 	.word	0x080a6f08
 80a0084:	080a6f28 	.word	0x080a6f28

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bb6a 	b.w	80a0760 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f9f7 	bl	80a0480 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f003 b8b7 	b.w	80a3208 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f002 bdf7 	b.w	80a2c8c <malloc>

080a009e <_Znaj>:
 80a009e:	f002 bdf5 	b.w	80a2c8c <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f002 bdfb 	b.w	80a2c9c <free>
	...

080a00a8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00ae:	4a02      	ldr	r2, [pc, #8]	; (80a00b8 <__cxa_pure_virtual+0x10>)
 80a00b0:	f002 fd58 	bl	80a2b64 <panic_>
  while (1);
 80a00b4:	e7fe      	b.n	80a00b4 <__cxa_pure_virtual+0xc>
 80a00b6:	bf00      	nop
 80a00b8:	080a289d 	.word	0x080a289d

080a00bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00bc:	7800      	ldrb	r0, [r0, #0]
 80a00be:	fab0 f080 	clz	r0, r0
 80a00c2:	0940      	lsrs	r0, r0, #5
 80a00c4:	4770      	bx	lr

080a00c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c6:	2301      	movs	r3, #1
 80a00c8:	7003      	strb	r3, [r0, #0]
 80a00ca:	4770      	bx	lr

080a00cc <_Z11printValuesv>:

  delay(BNO055_SAMPLERATE_DELAY_MS);
}


void printValues() {
 80a00cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    Serial.print("Temperature = ");
 80a00ce:	f003 f9eb 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a00d2:	4936      	ldr	r1, [pc, #216]	; (80a01ac <_Z11printValuesv+0xe0>)
 80a00d4:	f002 fefa 	bl	80a2ecc <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature()*1.8F + 32.);
 80a00d8:	f003 f9e6 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a00dc:	4d34      	ldr	r5, [pc, #208]	; (80a01b0 <_Z11printValuesv+0xe4>)
 80a00de:	4606      	mov	r6, r0
 80a00e0:	4628      	mov	r0, r5
 80a00e2:	f000 fd3d 	bl	80a0b60 <_ZN15Adafruit_BME28015readTemperatureEv>
 80a00e6:	4933      	ldr	r1, [pc, #204]	; (80a01b4 <_Z11printValuesv+0xe8>)
 80a00e8:	f005 fbfe 	bl	80a58e8 <__aeabi_fmul>
 80a00ec:	f004 ff4e 	bl	80a4f8c <__aeabi_f2d>
 80a00f0:	2200      	movs	r2, #0
 80a00f2:	4b31      	ldr	r3, [pc, #196]	; (80a01b8 <_Z11printValuesv+0xec>)
 80a00f4:	f004 fdec 	bl	80a4cd0 <__adddf3>
 80a00f8:	2402      	movs	r4, #2
 80a00fa:	460b      	mov	r3, r1
 80a00fc:	4602      	mov	r2, r0
 80a00fe:	9400      	str	r4, [sp, #0]
 80a0100:	4630      	mov	r0, r6
 80a0102:	f002 fff2 	bl	80a30ea <_ZN5Print5printEdi>
    Serial.println(" F");
 80a0106:	f003 f9cf 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a010a:	492c      	ldr	r1, [pc, #176]	; (80a01bc <_Z11printValuesv+0xf0>)
 80a010c:	f002 fef5 	bl	80a2efa <_ZN5Print7printlnEPKc>

    Serial.print("Pressure = ");
 80a0110:	f003 f9ca 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0114:	492a      	ldr	r1, [pc, #168]	; (80a01c0 <_Z11printValuesv+0xf4>)
 80a0116:	f002 fed9 	bl	80a2ecc <_ZN5Print5printEPKc>

    Serial.print(bme.readPressure() / 101325.0F * 760.0F);
 80a011a:	f003 f9c5 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a011e:	4606      	mov	r6, r0
 80a0120:	4628      	mov	r0, r5
 80a0122:	f000 fd49 	bl	80a0bb8 <_ZN15Adafruit_BME28012readPressureEv>
 80a0126:	4927      	ldr	r1, [pc, #156]	; (80a01c4 <_Z11printValuesv+0xf8>)
 80a0128:	f005 fc92 	bl	80a5a50 <__aeabi_fdiv>
 80a012c:	4926      	ldr	r1, [pc, #152]	; (80a01c8 <_Z11printValuesv+0xfc>)
 80a012e:	f005 fbdb 	bl	80a58e8 <__aeabi_fmul>
 80a0132:	4622      	mov	r2, r4
 80a0134:	4601      	mov	r1, r0
 80a0136:	4630      	mov	r0, r6
 80a0138:	f002 ffc8 	bl	80a30cc <_ZN5Print5printEfi>
    Serial.println(" mmHg");
 80a013c:	f003 f9b4 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0140:	4922      	ldr	r1, [pc, #136]	; (80a01cc <_Z11printValuesv+0x100>)
 80a0142:	f002 feda 	bl	80a2efa <_ZN5Print7printlnEPKc>

    Serial.print("Approx. Altitude = ");
 80a0146:	f003 f9af 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a014a:	4921      	ldr	r1, [pc, #132]	; (80a01d0 <_Z11printValuesv+0x104>)
 80a014c:	f002 febe 	bl	80a2ecc <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
 80a0150:	f003 f9aa 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0154:	491f      	ldr	r1, [pc, #124]	; (80a01d4 <_Z11printValuesv+0x108>)
 80a0156:	4606      	mov	r6, r0
 80a0158:	4628      	mov	r0, r5
 80a015a:	f000 fe01 	bl	80a0d60 <_ZN15Adafruit_BME28012readAltitudeEf>
 80a015e:	4622      	mov	r2, r4
 80a0160:	4601      	mov	r1, r0
 80a0162:	4630      	mov	r0, r6
 80a0164:	f002 ffb2 	bl	80a30cc <_ZN5Print5printEfi>
    Serial.println(" m");
 80a0168:	f003 f99e 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a016c:	491a      	ldr	r1, [pc, #104]	; (80a01d8 <_Z11printValuesv+0x10c>)
 80a016e:	f002 fec4 	bl	80a2efa <_ZN5Print7printlnEPKc>

    Serial.print("Humidity = ");
 80a0172:	f003 f999 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0176:	4919      	ldr	r1, [pc, #100]	; (80a01dc <_Z11printValuesv+0x110>)
 80a0178:	f002 fea8 	bl	80a2ecc <_ZN5Print5printEPKc>

    Serial.print(bme.readHumidity());
 80a017c:	f003 f994 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0180:	4606      	mov	r6, r0
 80a0182:	4628      	mov	r0, r5
 80a0184:	f000 fe80 	bl	80a0e88 <_ZN15Adafruit_BME28012readHumidityEv>
 80a0188:	4622      	mov	r2, r4
 80a018a:	4601      	mov	r1, r0
 80a018c:	4630      	mov	r0, r6
 80a018e:	f002 ff9d 	bl	80a30cc <_ZN5Print5printEfi>
    Serial.println(" %");
 80a0192:	f003 f989 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0196:	4912      	ldr	r1, [pc, #72]	; (80a01e0 <_Z11printValuesv+0x114>)
 80a0198:	f002 feaf 	bl	80a2efa <_ZN5Print7printlnEPKc>

    Serial.println();
 80a019c:	f003 f984 	bl	80a34a8 <_Z16_fetch_usbserialv>
}
 80a01a0:	b002      	add	sp, #8
 80a01a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println();
 80a01a6:	f002 be9c 	b.w	80a2ee2 <_ZN5Print7printlnEv>
 80a01aa:	bf00      	nop
 80a01ac:	080a6178 	.word	0x080a6178
 80a01b0:	20000070 	.word	0x20000070
 80a01b4:	3fe66666 	.word	0x3fe66666
 80a01b8:	40400000 	.word	0x40400000
 80a01bc:	080a6187 	.word	0x080a6187
 80a01c0:	080a618a 	.word	0x080a618a
 80a01c4:	47c5e680 	.word	0x47c5e680
 80a01c8:	443e0000 	.word	0x443e0000
 80a01cc:	080a6196 	.word	0x080a6196
 80a01d0:	080a619c 	.word	0x080a619c
 80a01d4:	447d5000 	.word	0x447d5000
 80a01d8:	080a61b0 	.word	0x080a61b0
 80a01dc:	080a61b3 	.word	0x080a61b3
 80a01e0:	080a61bf 	.word	0x080a61bf

080a01e4 <_Z20displaySensorDetailsv>:
    Displays some basic information on this sensor from the unified
    sensor API sensor_t type (see Adafruit_Sensor for more information)
*/
/**************************************************************************/
void displaySensorDetails(void)
{
 80a01e4:	b530      	push	{r4, r5, lr}
 80a01e6:	b08b      	sub	sp, #44	; 0x2c
  sensor_t sensor;
  bno.getSensor(&sensor);
 80a01e8:	4669      	mov	r1, sp
 80a01ea:	4841      	ldr	r0, [pc, #260]	; (80a02f0 <_Z20displaySensorDetailsv+0x10c>)
 80a01ec:	f001 fa48 	bl	80a1680 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>
  Serial.println("------------------------------------");
 80a01f0:	f003 f95a 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a01f4:	493f      	ldr	r1, [pc, #252]	; (80a02f4 <_Z20displaySensorDetailsv+0x110>)
 80a01f6:	f002 fe80 	bl	80a2efa <_ZN5Print7printlnEPKc>
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
 80a01fa:	f003 f955 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a01fe:	493e      	ldr	r1, [pc, #248]	; (80a02f8 <_Z20displaySensorDetailsv+0x114>)
 80a0200:	f002 fe64 	bl	80a2ecc <_ZN5Print5printEPKc>
 80a0204:	f003 f950 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0208:	4669      	mov	r1, sp
 80a020a:	f002 fe76 	bl	80a2efa <_ZN5Print7printlnEPKc>
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
 80a020e:	f003 f94b 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0212:	493a      	ldr	r1, [pc, #232]	; (80a02fc <_Z20displaySensorDetailsv+0x118>)
 80a0214:	f002 fe5a 	bl	80a2ecc <_ZN5Print5printEPKc>
 80a0218:	f003 f946 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a021c:	9c03      	ldr	r4, [sp, #12]
 80a021e:	4605      	mov	r5, r0
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a0220:	2c00      	cmp	r4, #0
 80a0222:	da60      	bge.n	80a02e6 <_Z20displaySensorDetailsv+0x102>
            t = print('-');
 80a0224:	212d      	movs	r1, #45	; 0x2d
 80a0226:	f002 fe55 	bl	80a2ed4 <_ZN5Print5printEc>
            val = -n;
 80a022a:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a022c:	220a      	movs	r2, #10
 80a022e:	4628      	mov	r0, r5
 80a0230:	f002 fe6f 	bl	80a2f12 <_ZN5Print11printNumberEmh>
        n += println();
 80a0234:	4628      	mov	r0, r5
 80a0236:	f002 fe54 	bl	80a2ee2 <_ZN5Print7printlnEv>
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
 80a023a:	f003 f935 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a023e:	4930      	ldr	r1, [pc, #192]	; (80a0300 <_Z20displaySensorDetailsv+0x11c>)
 80a0240:	f002 fe44 	bl	80a2ecc <_ZN5Print5printEPKc>
 80a0244:	f003 f930 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0248:	9c04      	ldr	r4, [sp, #16]
 80a024a:	4605      	mov	r5, r0
        if (n < 0 && base == 10) {
 80a024c:	2c00      	cmp	r4, #0
 80a024e:	da4c      	bge.n	80a02ea <_Z20displaySensorDetailsv+0x106>
            t = print('-');
 80a0250:	212d      	movs	r1, #45	; 0x2d
 80a0252:	f002 fe3f 	bl	80a2ed4 <_ZN5Print5printEc>
            val = -n;
 80a0256:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 80a0258:	220a      	movs	r2, #10
 80a025a:	4628      	mov	r0, r5
 80a025c:	f002 fe59 	bl	80a2f12 <_ZN5Print11printNumberEmh>
        n += println();
 80a0260:	4628      	mov	r0, r5
 80a0262:	f002 fe3e 	bl	80a2ee2 <_ZN5Print7printlnEv>
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" xxx");
 80a0266:	f003 f91f 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a026a:	4926      	ldr	r1, [pc, #152]	; (80a0304 <_Z20displaySensorDetailsv+0x120>)
 80a026c:	f002 fe2e 	bl	80a2ecc <_ZN5Print5printEPKc>
 80a0270:	f003 f91a 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0274:	2202      	movs	r2, #2
 80a0276:	9906      	ldr	r1, [sp, #24]
 80a0278:	f002 ff28 	bl	80a30cc <_ZN5Print5printEfi>
 80a027c:	f003 f914 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0280:	4921      	ldr	r1, [pc, #132]	; (80a0308 <_Z20displaySensorDetailsv+0x124>)
 80a0282:	f002 fe3a 	bl	80a2efa <_ZN5Print7printlnEPKc>
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" xxx");
 80a0286:	f003 f90f 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a028a:	4920      	ldr	r1, [pc, #128]	; (80a030c <_Z20displaySensorDetailsv+0x128>)
 80a028c:	f002 fe1e 	bl	80a2ecc <_ZN5Print5printEPKc>
 80a0290:	f003 f90a 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0294:	2202      	movs	r2, #2
 80a0296:	9907      	ldr	r1, [sp, #28]
 80a0298:	f002 ff18 	bl	80a30cc <_ZN5Print5printEfi>
 80a029c:	f003 f904 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a02a0:	4919      	ldr	r1, [pc, #100]	; (80a0308 <_Z20displaySensorDetailsv+0x124>)
 80a02a2:	f002 fe2a 	bl	80a2efa <_ZN5Print7printlnEPKc>
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" xxx");
 80a02a6:	f003 f8ff 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a02aa:	4919      	ldr	r1, [pc, #100]	; (80a0310 <_Z20displaySensorDetailsv+0x12c>)
 80a02ac:	f002 fe0e 	bl	80a2ecc <_ZN5Print5printEPKc>
 80a02b0:	f003 f8fa 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a02b4:	2202      	movs	r2, #2
 80a02b6:	9908      	ldr	r1, [sp, #32]
 80a02b8:	f002 ff08 	bl	80a30cc <_ZN5Print5printEfi>
 80a02bc:	f003 f8f4 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a02c0:	4911      	ldr	r1, [pc, #68]	; (80a0308 <_Z20displaySensorDetailsv+0x124>)
 80a02c2:	f002 fe1a 	bl	80a2efa <_ZN5Print7printlnEPKc>
  Serial.println("------------------------------------");
 80a02c6:	f003 f8ef 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a02ca:	490a      	ldr	r1, [pc, #40]	; (80a02f4 <_Z20displaySensorDetailsv+0x110>)
 80a02cc:	f002 fe15 	bl	80a2efa <_ZN5Print7printlnEPKc>
  Serial.println("");
 80a02d0:	f003 f8ea 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a02d4:	490f      	ldr	r1, [pc, #60]	; (80a0314 <_Z20displaySensorDetailsv+0x130>)
 80a02d6:	f002 fe10 	bl	80a2efa <_ZN5Print7printlnEPKc>
  delay(500);
 80a02da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a02de:	f002 ff53 	bl	80a3188 <delay>
 80a02e2:	b00b      	add	sp, #44	; 0x2c
 80a02e4:	bd30      	pop	{r4, r5, pc}
            val = n;
 80a02e6:	4621      	mov	r1, r4
 80a02e8:	e7a0      	b.n	80a022c <_Z20displaySensorDetailsv+0x48>
 80a02ea:	4621      	mov	r1, r4
 80a02ec:	e7b4      	b.n	80a0258 <_Z20displaySensorDetailsv+0x74>
 80a02ee:	bf00      	nop
 80a02f0:	200000b4 	.word	0x200000b4
 80a02f4:	080a61c2 	.word	0x080a61c2
 80a02f8:	080a61e7 	.word	0x080a61e7
 80a02fc:	080a61f6 	.word	0x080a61f6
 80a0300:	080a6205 	.word	0x080a6205
 80a0304:	080a6214 	.word	0x080a6214
 80a0308:	080a6223 	.word	0x080a6223
 80a030c:	080a6228 	.word	0x080a6228
 80a0310:	080a6237 	.word	0x080a6237
 80a0314:	080a62a1 	.word	0x080a62a1

080a0318 <_GLOBAL__sub_I_bme>:
 80a0318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
Adafruit_BME280 bme; // I2C
 80a031a:	480e      	ldr	r0, [pc, #56]	; (80a0354 <_GLOBAL__sub_I_bme+0x3c>)
 80a031c:	f000 fb4c 	bl	80a09b8 <_ZN15Adafruit_BME280C1Ev>
Adafruit_SH1107 display = Adafruit_SH1107(64, 128, &Wire);
 80a0320:	f003 fb8e 	bl	80a3a40 <_Z19__fetch_global_Wirev>
 80a0324:	4a0c      	ldr	r2, [pc, #48]	; (80a0358 <_GLOBAL__sub_I_bme+0x40>)
 80a0326:	490d      	ldr	r1, [pc, #52]	; (80a035c <_GLOBAL__sub_I_bme+0x44>)
 80a0328:	4603      	mov	r3, r0
 80a032a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80a032e:	f04f 32ff 	mov.w	r2, #4294967295
 80a0332:	2140      	movs	r1, #64	; 0x40
 80a0334:	9200      	str	r2, [sp, #0]
 80a0336:	480a      	ldr	r0, [pc, #40]	; (80a0360 <_GLOBAL__sub_I_bme+0x48>)
 80a0338:	2280      	movs	r2, #128	; 0x80
 80a033a:	f002 fa01 	bl	80a2740 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
 80a033e:	f003 fb7f 	bl	80a3a40 <_Z19__fetch_global_Wirev>
 80a0342:	2228      	movs	r2, #40	; 0x28
 80a0344:	4603      	mov	r3, r0
 80a0346:	2137      	movs	r1, #55	; 0x37
 80a0348:	4806      	ldr	r0, [pc, #24]	; (80a0364 <_GLOBAL__sub_I_bme+0x4c>)
 80a034a:	b005      	add	sp, #20
 80a034c:	f85d eb04 	ldr.w	lr, [sp], #4
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
 80a0350:	f001 b9be 	b.w	80a16d0 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
 80a0354:	20000070 	.word	0x20000070
 80a0358:	00061a80 	.word	0x00061a80
 80a035c:	000186a0 	.word	0x000186a0
 80a0360:	200000d0 	.word	0x200000d0
 80a0364:	200000b4 	.word	0x200000b4

080a0368 <_Z13displayValuesv>:
void displayValues() {
 80a0368:	b573      	push	{r0, r1, r4, r5, r6, lr}
    display.clearDisplay();
 80a036a:	4c35      	ldr	r4, [pc, #212]	; (80a0440 <_Z13displayValuesv+0xd8>)
    display.print(bme.readTemperature()*1.8F + 32.);
 80a036c:	4e35      	ldr	r6, [pc, #212]	; (80a0444 <_Z13displayValuesv+0xdc>)
    display.clearDisplay();
 80a036e:	4620      	mov	r0, r4
 80a0370:	f001 fca6 	bl	80a1cc0 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
 80a0374:	4620      	mov	r0, r4
 80a0376:	f002 f900 	bl	80a257a <_ZN15Adafruit_SH110X7displayEv>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
 80a037a:	2300      	movs	r3, #0
    display.print("Temp. = ");
 80a037c:	4932      	ldr	r1, [pc, #200]	; (80a0448 <_Z13displayValuesv+0xe0>)
 80a037e:	4620      	mov	r0, r4
 80a0380:	6123      	str	r3, [r4, #16]
 80a0382:	f002 fda3 	bl	80a2ecc <_ZN5Print5printEPKc>
    display.print(bme.readTemperature()*1.8F + 32.);
 80a0386:	4630      	mov	r0, r6
 80a0388:	f000 fbea 	bl	80a0b60 <_ZN15Adafruit_BME28015readTemperatureEv>
 80a038c:	492f      	ldr	r1, [pc, #188]	; (80a044c <_Z13displayValuesv+0xe4>)
 80a038e:	f005 faab 	bl	80a58e8 <__aeabi_fmul>
 80a0392:	f004 fdfb 	bl	80a4f8c <__aeabi_f2d>
 80a0396:	2200      	movs	r2, #0
 80a0398:	4b2d      	ldr	r3, [pc, #180]	; (80a0450 <_Z13displayValuesv+0xe8>)
 80a039a:	f004 fc99 	bl	80a4cd0 <__adddf3>
 80a039e:	2502      	movs	r5, #2
 80a03a0:	460b      	mov	r3, r1
 80a03a2:	4602      	mov	r2, r0
 80a03a4:	9500      	str	r5, [sp, #0]
 80a03a6:	4620      	mov	r0, r4
 80a03a8:	f002 fe9f 	bl	80a30ea <_ZN5Print5printEdi>
    display.println(" °F");
 80a03ac:	4620      	mov	r0, r4
 80a03ae:	4929      	ldr	r1, [pc, #164]	; (80a0454 <_Z13displayValuesv+0xec>)
 80a03b0:	f002 fda3 	bl	80a2efa <_ZN5Print7printlnEPKc>
    display.print("Press. = ");
 80a03b4:	4928      	ldr	r1, [pc, #160]	; (80a0458 <_Z13displayValuesv+0xf0>)
 80a03b6:	4620      	mov	r0, r4
 80a03b8:	f002 fd88 	bl	80a2ecc <_ZN5Print5printEPKc>
    display.print(bme.readPressure() / 101325.0F * 760.0F);
 80a03bc:	4630      	mov	r0, r6
 80a03be:	f000 fbfb 	bl	80a0bb8 <_ZN15Adafruit_BME28012readPressureEv>
 80a03c2:	4926      	ldr	r1, [pc, #152]	; (80a045c <_Z13displayValuesv+0xf4>)
 80a03c4:	f005 fb44 	bl	80a5a50 <__aeabi_fdiv>
 80a03c8:	4925      	ldr	r1, [pc, #148]	; (80a0460 <_Z13displayValuesv+0xf8>)
 80a03ca:	f005 fa8d 	bl	80a58e8 <__aeabi_fmul>
 80a03ce:	462a      	mov	r2, r5
 80a03d0:	4601      	mov	r1, r0
 80a03d2:	4620      	mov	r0, r4
 80a03d4:	f002 fe7a 	bl	80a30cc <_ZN5Print5printEfi>
    display.println(" mmHg");
 80a03d8:	4620      	mov	r0, r4
 80a03da:	4922      	ldr	r1, [pc, #136]	; (80a0464 <_Z13displayValuesv+0xfc>)
 80a03dc:	f002 fd8d 	bl	80a2efa <_ZN5Print7printlnEPKc>
    display.print("Altitude = ");
 80a03e0:	4620      	mov	r0, r4
 80a03e2:	4921      	ldr	r1, [pc, #132]	; (80a0468 <_Z13displayValuesv+0x100>)
 80a03e4:	f002 fd72 	bl	80a2ecc <_ZN5Print5printEPKc>
    display.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
 80a03e8:	4630      	mov	r0, r6
 80a03ea:	4920      	ldr	r1, [pc, #128]	; (80a046c <_Z13displayValuesv+0x104>)
 80a03ec:	f000 fcb8 	bl	80a0d60 <_ZN15Adafruit_BME28012readAltitudeEf>
 80a03f0:	462a      	mov	r2, r5
 80a03f2:	4601      	mov	r1, r0
 80a03f4:	4620      	mov	r0, r4
 80a03f6:	f002 fe69 	bl	80a30cc <_ZN5Print5printEfi>
    display.println(" m");
 80a03fa:	4620      	mov	r0, r4
 80a03fc:	491c      	ldr	r1, [pc, #112]	; (80a0470 <_Z13displayValuesv+0x108>)
 80a03fe:	f002 fd7c 	bl	80a2efa <_ZN5Print7printlnEPKc>
    display.print("Humidity = ");
 80a0402:	491c      	ldr	r1, [pc, #112]	; (80a0474 <_Z13displayValuesv+0x10c>)
 80a0404:	4620      	mov	r0, r4
 80a0406:	f002 fd61 	bl	80a2ecc <_ZN5Print5printEPKc>
    display.print(bme.readHumidity());
 80a040a:	4630      	mov	r0, r6
 80a040c:	f000 fd3c 	bl	80a0e88 <_ZN15Adafruit_BME28012readHumidityEv>
 80a0410:	462a      	mov	r2, r5
 80a0412:	4601      	mov	r1, r0
 80a0414:	4620      	mov	r0, r4
 80a0416:	f002 fe59 	bl	80a30cc <_ZN5Print5printEfi>
    display.println(" %");
 80a041a:	4917      	ldr	r1, [pc, #92]	; (80a0478 <_Z13displayValuesv+0x110>)
 80a041c:	4620      	mov	r0, r4
 80a041e:	f002 fd6c 	bl	80a2efa <_ZN5Print7printlnEPKc>
    Serial.println();
 80a0422:	f003 f841 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0426:	f002 fd5c 	bl	80a2ee2 <_ZN5Print7printlnEv>
    display.print("Marrie is great!");
 80a042a:	4620      	mov	r0, r4
 80a042c:	4913      	ldr	r1, [pc, #76]	; (80a047c <_Z13displayValuesv+0x114>)
 80a042e:	f002 fd4d 	bl	80a2ecc <_ZN5Print5printEPKc>
  display.display(); // actually display all of the above
 80a0432:	4620      	mov	r0, r4
  }
 80a0434:	b002      	add	sp, #8
 80a0436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  display.display(); // actually display all of the above
 80a043a:	f002 b89e 	b.w	80a257a <_ZN15Adafruit_SH110X7displayEv>
 80a043e:	bf00      	nop
 80a0440:	200000d0 	.word	0x200000d0
 80a0444:	20000070 	.word	0x20000070
 80a0448:	080a6246 	.word	0x080a6246
 80a044c:	3fe66666 	.word	0x3fe66666
 80a0450:	40400000 	.word	0x40400000
 80a0454:	080a624f 	.word	0x080a624f
 80a0458:	080a6254 	.word	0x080a6254
 80a045c:	47c5e680 	.word	0x47c5e680
 80a0460:	443e0000 	.word	0x443e0000
 80a0464:	080a6196 	.word	0x080a6196
 80a0468:	080a61a4 	.word	0x080a61a4
 80a046c:	447d5000 	.word	0x447d5000
 80a0470:	080a61b0 	.word	0x080a61b0
 80a0474:	080a61b3 	.word	0x080a61b3
 80a0478:	080a61bf 	.word	0x080a61bf
 80a047c:	080a625e 	.word	0x080a625e

080a0480 <loop>:
void loop(void) {
 80a0480:	b530      	push	{r4, r5, lr}
 80a0482:	b097      	sub	sp, #92	; 0x5c
  bno.getEvent(&event);
 80a0484:	a90d      	add	r1, sp, #52	; 0x34
 80a0486:	48a4      	ldr	r0, [pc, #656]	; (80a0718 <loop+0x298>)
 80a0488:	f001 fac6 	bl	80a1a18 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
printValues();
 80a048c:	f7ff fe1e 	bl	80a00cc <_Z11printValuesv>
  displayValues();
 80a0490:	f7ff ff6a 	bl	80a0368 <_Z13displayValuesv>
  delay(delayTime);
 80a0494:	4ba1      	ldr	r3, [pc, #644]	; (80a071c <loop+0x29c>)
 80a0496:	6818      	ldr	r0, [r3, #0]
 80a0498:	f002 fe76 	bl	80a3188 <delay>
  if(!digitalRead(BUTTON_A)) display.print("A");
 80a049c:	2004      	movs	r0, #4
 80a049e:	f003 fa93 	bl	80a39c8 <digitalRead>
 80a04a2:	b918      	cbnz	r0, 80a04ac <loop+0x2c>
 80a04a4:	499e      	ldr	r1, [pc, #632]	; (80a0720 <loop+0x2a0>)
 80a04a6:	489f      	ldr	r0, [pc, #636]	; (80a0724 <loop+0x2a4>)
 80a04a8:	f002 fd10 	bl	80a2ecc <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_B)) display.print("B");
 80a04ac:	2003      	movs	r0, #3
 80a04ae:	f003 fa8b 	bl	80a39c8 <digitalRead>
 80a04b2:	b918      	cbnz	r0, 80a04bc <loop+0x3c>
 80a04b4:	499c      	ldr	r1, [pc, #624]	; (80a0728 <loop+0x2a8>)
 80a04b6:	489b      	ldr	r0, [pc, #620]	; (80a0724 <loop+0x2a4>)
 80a04b8:	f002 fd08 	bl	80a2ecc <_ZN5Print5printEPKc>
  if(!digitalRead(BUTTON_C)) display.print("C");
 80a04bc:	2002      	movs	r0, #2
 80a04be:	f003 fa83 	bl	80a39c8 <digitalRead>
 80a04c2:	b918      	cbnz	r0, 80a04cc <loop+0x4c>
 80a04c4:	4999      	ldr	r1, [pc, #612]	; (80a072c <loop+0x2ac>)
 80a04c6:	4897      	ldr	r0, [pc, #604]	; (80a0724 <loop+0x2a4>)
 80a04c8:	f002 fd00 	bl	80a2ecc <_ZN5Print5printEPKc>
  delay(10);
 80a04cc:	200a      	movs	r0, #10
 80a04ce:	f002 fe5b 	bl	80a3188 <delay>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
 80a04d2:	f002 f9f3 	bl	80a28bc <os_thread_yield>
  display.display();
 80a04d6:	4893      	ldr	r0, [pc, #588]	; (80a0724 <loop+0x2a4>)
 80a04d8:	f002 f84f 	bl	80a257a <_ZN15Adafruit_SH110X7displayEv>
  Serial.print(F("Orientation: "));
 80a04dc:	f002 ffe4 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a04e0:	4993      	ldr	r1, [pc, #588]	; (80a0730 <loop+0x2b0>)
 80a04e2:	f002 fcfa 	bl	80a2eda <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(360 - (float)event.orientation.x);
 80a04e6:	f002 ffdf 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a04ea:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a04ec:	4604      	mov	r4, r0
 80a04ee:	4891      	ldr	r0, [pc, #580]	; (80a0734 <loop+0x2b4>)
 80a04f0:	f005 f8f0 	bl	80a56d4 <__aeabi_fsub>
 80a04f4:	2202      	movs	r2, #2
 80a04f6:	4601      	mov	r1, r0
 80a04f8:	4620      	mov	r0, r4
 80a04fa:	f002 fde7 	bl	80a30cc <_ZN5Print5printEfi>
  Serial.print(F(", "));
 80a04fe:	f002 ffd3 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0502:	498d      	ldr	r1, [pc, #564]	; (80a0738 <loop+0x2b8>)
 80a0504:	f002 fce9 	bl	80a2eda <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.y);
 80a0508:	f002 ffce 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a050c:	2202      	movs	r2, #2
 80a050e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a0510:	f002 fddc 	bl	80a30cc <_ZN5Print5printEfi>
  Serial.print(F(", "));
 80a0514:	f002 ffc8 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0518:	4987      	ldr	r1, [pc, #540]	; (80a0738 <loop+0x2b8>)
 80a051a:	f002 fcde 	bl	80a2eda <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)event.orientation.z);
 80a051e:	f002 ffc3 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0522:	2202      	movs	r2, #2
 80a0524:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a0526:	f002 fdd1 	bl	80a30cc <_ZN5Print5printEfi>
  Serial.println(F(""));
 80a052a:	f002 ffbd 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a052e:	4983      	ldr	r1, [pc, #524]	; (80a073c <loop+0x2bc>)
 80a0530:	f002 fced 	bl	80a2f0e <_ZN5Print7printlnEPK19__FlashStringHelper>
  imu::Quaternion quat = bno.getQuat();
 80a0534:	4978      	ldr	r1, [pc, #480]	; (80a0718 <loop+0x298>)
 80a0536:	a804      	add	r0, sp, #16
 80a0538:	f001 f9aa 	bl	80a1890 <_ZN15Adafruit_BNO0557getQuatEv>
  Serial.print(F("Quaternion: "));
 80a053c:	f002 ffb4 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0540:	497f      	ldr	r1, [pc, #508]	; (80a0740 <loop+0x2c0>)
 80a0542:	f002 fcca 	bl	80a2eda <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.w());
 80a0546:	f002 ffaf 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a054a:	4604      	mov	r4, r0
 80a054c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a0550:	f005 f86c 	bl	80a562c <__aeabi_d2f>
 80a0554:	2202      	movs	r2, #2
 80a0556:	4601      	mov	r1, r0
 80a0558:	4620      	mov	r0, r4
 80a055a:	f002 fdb7 	bl	80a30cc <_ZN5Print5printEfi>
  Serial.print(F(", "));
 80a055e:	f002 ffa3 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0562:	4975      	ldr	r1, [pc, #468]	; (80a0738 <loop+0x2b8>)
 80a0564:	f002 fcb9 	bl	80a2eda <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.x());
 80a0568:	f002 ff9e 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a056c:	4604      	mov	r4, r0
 80a056e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a0572:	f005 f85b 	bl	80a562c <__aeabi_d2f>
 80a0576:	2202      	movs	r2, #2
 80a0578:	4601      	mov	r1, r0
 80a057a:	4620      	mov	r0, r4
 80a057c:	f002 fda6 	bl	80a30cc <_ZN5Print5printEfi>
  Serial.print(F(", "));
 80a0580:	f002 ff92 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0584:	496c      	ldr	r1, [pc, #432]	; (80a0738 <loop+0x2b8>)
 80a0586:	f002 fca8 	bl	80a2eda <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.y());
 80a058a:	f002 ff8d 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a058e:	4604      	mov	r4, r0
 80a0590:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a0594:	f005 f84a 	bl	80a562c <__aeabi_d2f>
 80a0598:	2202      	movs	r2, #2
 80a059a:	4601      	mov	r1, r0
 80a059c:	4620      	mov	r0, r4
 80a059e:	f002 fd95 	bl	80a30cc <_ZN5Print5printEfi>
  Serial.print(F(", "));
 80a05a2:	f002 ff81 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a05a6:	4964      	ldr	r1, [pc, #400]	; (80a0738 <loop+0x2b8>)
 80a05a8:	f002 fc97 	bl	80a2eda <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((float)quat.z());
 80a05ac:	f002 ff7c 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a05b0:	4604      	mov	r4, r0
 80a05b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a05b6:	f005 f839 	bl	80a562c <__aeabi_d2f>
 80a05ba:	2202      	movs	r2, #2
 80a05bc:	4601      	mov	r1, r0
 80a05be:	4620      	mov	r0, r4
 80a05c0:	f002 fd84 	bl	80a30cc <_ZN5Print5printEfi>
  Serial.println(F(""));
 80a05c4:	f002 ff70 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a05c8:	495c      	ldr	r1, [pc, #368]	; (80a073c <loop+0x2bc>)
 80a05ca:	f002 fca0 	bl	80a2f0e <_ZN5Print7printlnEPK19__FlashStringHelper>
  uint8_t sys, gyro, accel, mag = 0;
 80a05ce:	2300      	movs	r3, #0
 80a05d0:	f88d 300f 	strb.w	r3, [sp, #15]
  bno.getCalibration(&sys, &gyro, &accel, &mag);
 80a05d4:	f10d 030f 	add.w	r3, sp, #15
 80a05d8:	f10d 020d 	add.w	r2, sp, #13
 80a05dc:	a903      	add	r1, sp, #12
 80a05de:	484e      	ldr	r0, [pc, #312]	; (80a0718 <loop+0x298>)
 80a05e0:	9300      	str	r3, [sp, #0]
 80a05e2:	f10d 030e 	add.w	r3, sp, #14
 80a05e6:	f001 f92c 	bl	80a1842 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>
  Serial.print(F("Calibration: "));
 80a05ea:	f002 ff5d 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a05ee:	4955      	ldr	r1, [pc, #340]	; (80a0744 <loop+0x2c4>)
 80a05f0:	f002 fc73 	bl	80a2eda <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(sys, DEC);
 80a05f4:	f002 ff58 	bl	80a34a8 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 80a05f8:	220a      	movs	r2, #10
 80a05fa:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80a05fe:	f002 fc88 	bl	80a2f12 <_ZN5Print11printNumberEmh>
  Serial.print(F(", "));
 80a0602:	f002 ff51 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0606:	494c      	ldr	r1, [pc, #304]	; (80a0738 <loop+0x2b8>)
 80a0608:	f002 fc67 	bl	80a2eda <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(gyro, DEC);
 80a060c:	f002 ff4c 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0610:	220a      	movs	r2, #10
 80a0612:	f89d 100d 	ldrb.w	r1, [sp, #13]
 80a0616:	f002 fc7c 	bl	80a2f12 <_ZN5Print11printNumberEmh>
  Serial.print(F(", "));
 80a061a:	f002 ff45 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a061e:	4946      	ldr	r1, [pc, #280]	; (80a0738 <loop+0x2b8>)
 80a0620:	f002 fc5b 	bl	80a2eda <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(accel, DEC);
 80a0624:	f002 ff40 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0628:	220a      	movs	r2, #10
 80a062a:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80a062e:	f002 fc70 	bl	80a2f12 <_ZN5Print11printNumberEmh>
  Serial.print(F(", "));
 80a0632:	f002 ff39 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0636:	4940      	ldr	r1, [pc, #256]	; (80a0738 <loop+0x2b8>)
 80a0638:	f002 fc4f 	bl	80a2eda <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(mag, DEC);
 80a063c:	f002 ff34 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0640:	220a      	movs	r2, #10
 80a0642:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80a0646:	f002 fc64 	bl	80a2f12 <_ZN5Print11printNumberEmh>
  Serial.println(F(""));
 80a064a:	f002 ff2d 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a064e:	493b      	ldr	r1, [pc, #236]	; (80a073c <loop+0x2bc>)
 80a0650:	f002 fc5d 	bl	80a2f0e <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("\n\n");
 80a0654:	f002 ff28 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0658:	493b      	ldr	r1, [pc, #236]	; (80a0748 <loop+0x2c8>)
 80a065a:	f002 fc4e 	bl	80a2efa <_ZN5Print7printlnEPKc>
  bno.getEvent(&event);
 80a065e:	a90d      	add	r1, sp, #52	; 0x34
 80a0660:	482d      	ldr	r0, [pc, #180]	; (80a0718 <loop+0x298>)
 80a0662:	f001 f9d9 	bl	80a1a18 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
  Serial.print("X: ");
 80a0666:	f002 ff1f 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a066a:	4938      	ldr	r1, [pc, #224]	; (80a074c <loop+0x2cc>)
 80a066c:	f002 fc2e 	bl	80a2ecc <_ZN5Print5printEPKc>
  Serial.print(event.orientation.x, 4);
 80a0670:	f002 ff1a 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0674:	2204      	movs	r2, #4
 80a0676:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a0678:	f002 fd28 	bl	80a30cc <_ZN5Print5printEfi>
  Serial.print("\tY: ");
 80a067c:	f002 ff14 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0680:	4933      	ldr	r1, [pc, #204]	; (80a0750 <loop+0x2d0>)
 80a0682:	f002 fc23 	bl	80a2ecc <_ZN5Print5printEPKc>
  Serial.print(event.orientation.y, 4);
 80a0686:	f002 ff0f 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a068a:	2204      	movs	r2, #4
 80a068c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a068e:	f002 fd1d 	bl	80a30cc <_ZN5Print5printEfi>
  Serial.print("\tZ: ");
 80a0692:	f002 ff09 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0696:	492f      	ldr	r1, [pc, #188]	; (80a0754 <loop+0x2d4>)
 80a0698:	f002 fc18 	bl	80a2ecc <_ZN5Print5printEPKc>
  Serial.print(event.orientation.z, 4);
 80a069c:	f002 ff04 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a06a0:	2204      	movs	r2, #4
 80a06a2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a06a4:	f002 fd12 	bl	80a30cc <_ZN5Print5printEfi>
  Serial.println("");
 80a06a8:	f002 fefe 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a06ac:	4923      	ldr	r1, [pc, #140]	; (80a073c <loop+0x2bc>)
 80a06ae:	f002 fc24 	bl	80a2efa <_ZN5Print7printlnEPKc>
  Serial.println("\n\n");
 80a06b2:	f002 fef9 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a06b6:	4924      	ldr	r1, [pc, #144]	; (80a0748 <loop+0x2c8>)
 80a06b8:	f002 fc1f 	bl	80a2efa <_ZN5Print7printlnEPKc>
  compass_heading = event.orientation.x + 51.6;
 80a06bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80a06be:	f004 fc65 	bl	80a4f8c <__aeabi_f2d>
 80a06c2:	a313      	add	r3, pc, #76	; (adr r3, 80a0710 <loop+0x290>)
 80a06c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a06c8:	f004 fb02 	bl	80a4cd0 <__adddf3>
 80a06cc:	f004 ffae 	bl	80a562c <__aeabi_d2f>
  if(compass_heading > 360) {
 80a06d0:	4918      	ldr	r1, [pc, #96]	; (80a0734 <loop+0x2b4>)
  compass_heading = event.orientation.x + 51.6;
 80a06d2:	4604      	mov	r4, r0
  if(compass_heading > 360) {
 80a06d4:	f005 fac4 	bl	80a5c60 <__aeabi_fcmpgt>
 80a06d8:	4d1f      	ldr	r5, [pc, #124]	; (80a0758 <loop+0x2d8>)
 80a06da:	b988      	cbnz	r0, 80a0700 <loop+0x280>
  compass_heading = event.orientation.x + 51.6;
 80a06dc:	602c      	str	r4, [r5, #0]
  Serial.print("compass heading:  ");
 80a06de:	f002 fee3 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a06e2:	491e      	ldr	r1, [pc, #120]	; (80a075c <loop+0x2dc>)
 80a06e4:	f002 fbf2 	bl	80a2ecc <_ZN5Print5printEPKc>
  Serial.print(compass_heading, 4);
 80a06e8:	f002 fede 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a06ec:	2204      	movs	r2, #4
 80a06ee:	6829      	ldr	r1, [r5, #0]
 80a06f0:	f002 fcec 	bl	80a30cc <_ZN5Print5printEfi>
  delay(BNO055_SAMPLERATE_DELAY_MS);
 80a06f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a06f8:	f002 fd46 	bl	80a3188 <delay>
}
 80a06fc:	b017      	add	sp, #92	; 0x5c
 80a06fe:	bd30      	pop	{r4, r5, pc}
    compass_heading = compass_heading - 360;
 80a0700:	4620      	mov	r0, r4
 80a0702:	490c      	ldr	r1, [pc, #48]	; (80a0734 <loop+0x2b4>)
 80a0704:	f004 ffe6 	bl	80a56d4 <__aeabi_fsub>
 80a0708:	6028      	str	r0, [r5, #0]
 80a070a:	e7e8      	b.n	80a06de <loop+0x25e>
 80a070c:	f3af 8000 	nop.w
 80a0710:	cccccccd 	.word	0xcccccccd
 80a0714:	4049cccc 	.word	0x4049cccc
 80a0718:	200000b4 	.word	0x200000b4
 80a071c:	200000cc 	.word	0x200000cc
 80a0720:	080a626f 	.word	0x080a626f
 80a0724:	200000d0 	.word	0x200000d0
 80a0728:	080a64ca 	.word	0x080a64ca
 80a072c:	080a6271 	.word	0x080a6271
 80a0730:	080a6273 	.word	0x080a6273
 80a0734:	43b40000 	.word	0x43b40000
 80a0738:	080a6281 	.word	0x080a6281
 80a073c:	080a62a1 	.word	0x080a62a1
 80a0740:	080a6284 	.word	0x080a6284
 80a0744:	080a6291 	.word	0x080a6291
 80a0748:	080a629f 	.word	0x080a629f
 80a074c:	080a62a2 	.word	0x080a62a2
 80a0750:	080a62a6 	.word	0x080a62a6
 80a0754:	080a62ab 	.word	0x080a62ab
 80a0758:	200000c8 	.word	0x200000c8
 80a075c:	080a62b0 	.word	0x080a62b0

080a0760 <setup>:
void setup(void) {
 80a0760:	b510      	push	{r4, lr}
  Serial.begin(115200);
 80a0762:	f002 fea1 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0766:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a076a:	f002 fe7d 	bl	80a3468 <_ZN9USBSerial5beginEl>
    while(!Serial);    // time to get serial running
 80a076e:	f002 fe9b 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0772:	f002 fe80 	bl	80a3476 <_ZN9USBSerialcvbEv>
 80a0776:	2800      	cmp	r0, #0
 80a0778:	d0f9      	beq.n	80a076e <setup+0xe>
  display.begin(0x3C, true); // Address 0x3C default
 80a077a:	4c57      	ldr	r4, [pc, #348]	; (80a08d8 <setup+0x178>)
    Serial.println(F("BME280 test"));
 80a077c:	f002 fe94 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0780:	4956      	ldr	r1, [pc, #344]	; (80a08dc <setup+0x17c>)
 80a0782:	f002 fbc4 	bl	80a2f0e <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println("128x64 OLED FeatherWing test");
 80a0786:	f002 fe8f 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a078a:	4955      	ldr	r1, [pc, #340]	; (80a08e0 <setup+0x180>)
 80a078c:	f002 fbb5 	bl	80a2efa <_ZN5Print7printlnEPKc>
  display.begin(0x3C, true); // Address 0x3C default
 80a0790:	2201      	movs	r2, #1
 80a0792:	213c      	movs	r1, #60	; 0x3c
 80a0794:	4620      	mov	r0, r4
 80a0796:	f001 ffe7 	bl	80a2768 <_ZN15Adafruit_SH11075beginEhb>
  Serial.println("OLED begun");
 80a079a:	f002 fe85 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a079e:	4951      	ldr	r1, [pc, #324]	; (80a08e4 <setup+0x184>)
 80a07a0:	f002 fbab 	bl	80a2efa <_ZN5Print7printlnEPKc>
  display.display();
 80a07a4:	4620      	mov	r0, r4
 80a07a6:	f001 fee8 	bl	80a257a <_ZN15Adafruit_SH110X7displayEv>
  delay(1000);
 80a07aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a07ae:	f002 fceb 	bl	80a3188 <delay>
  display.clearDisplay();
 80a07b2:	4620      	mov	r0, r4
 80a07b4:	f001 fa84 	bl	80a1cc0 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  display.display();
 80a07b8:	4620      	mov	r0, r4
 80a07ba:	f001 fede 	bl	80a257a <_ZN15Adafruit_SH110X7displayEv>
  display.setRotation(1);
 80a07be:	2101      	movs	r1, #1
 80a07c0:	4620      	mov	r0, r4
 80a07c2:	f001 fc81 	bl	80a20c8 <_ZN12Adafruit_GFX11setRotationEh>
  Serial.println("Button test");
 80a07c6:	f002 fe6f 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a07ca:	4947      	ldr	r1, [pc, #284]	; (80a08e8 <setup+0x188>)
 80a07cc:	f002 fb95 	bl	80a2efa <_ZN5Print7printlnEPKc>
  pinMode(BUTTON_A, INPUT_PULLUP);
 80a07d0:	2102      	movs	r1, #2
 80a07d2:	2004      	movs	r0, #4
 80a07d4:	f003 f8ce 	bl	80a3974 <pinMode>
  pinMode(BUTTON_B, INPUT_PULLUP);
 80a07d8:	2102      	movs	r1, #2
 80a07da:	2003      	movs	r0, #3
 80a07dc:	f003 f8ca 	bl	80a3974 <pinMode>
  pinMode(BUTTON_C, INPUT_PULLUP);
 80a07e0:	2102      	movs	r1, #2
 80a07e2:	4608      	mov	r0, r1
 80a07e4:	f003 f8c6 	bl	80a3974 <pinMode>
  display.setTextSize(1);
 80a07e8:	2101      	movs	r1, #1
 80a07ea:	4620      	mov	r0, r4
 80a07ec:	f001 febf 	bl	80a256e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 80a07f0:	2200      	movs	r2, #0
 80a07f2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  display.print("Connecting to SSID\n'adafruit':");
 80a07f6:	493d      	ldr	r1, [pc, #244]	; (80a08ec <setup+0x18c>)
 80a07f8:	e9c4 2304 	strd	r2, r3, [r4, #16]
 80a07fc:	4620      	mov	r0, r4
 80a07fe:	f002 fb65 	bl	80a2ecc <_ZN5Print5printEPKc>
  display.print("connected!");
 80a0802:	493b      	ldr	r1, [pc, #236]	; (80a08f0 <setup+0x190>)
 80a0804:	4620      	mov	r0, r4
 80a0806:	f002 fb61 	bl	80a2ecc <_ZN5Print5printEPKc>
  display.println("IP: 10.0.1.23");
 80a080a:	493a      	ldr	r1, [pc, #232]	; (80a08f4 <setup+0x194>)
 80a080c:	4620      	mov	r0, r4
 80a080e:	f002 fb74 	bl	80a2efa <_ZN5Print7printlnEPKc>
  display.println("Sending val #0");
 80a0812:	4939      	ldr	r1, [pc, #228]	; (80a08f8 <setup+0x198>)
 80a0814:	4620      	mov	r0, r4
 80a0816:	f002 fb70 	bl	80a2efa <_ZN5Print7printlnEPKc>
  display.display(); // actually display all of the above
 80a081a:	4620      	mov	r0, r4
 80a081c:	f001 fead 	bl	80a257a <_ZN15Adafruit_SH110X7displayEv>
    status = bme.begin();  
 80a0820:	4836      	ldr	r0, [pc, #216]	; (80a08fc <setup+0x19c>)
 80a0822:	f000 fd36 	bl	80a1292 <_ZN15Adafruit_BME2805beginEv>
    if (!status) {
 80a0826:	bb78      	cbnz	r0, 80a0888 <setup+0x128>
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
 80a0828:	f002 fe3e 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a082c:	4934      	ldr	r1, [pc, #208]	; (80a0900 <setup+0x1a0>)
 80a082e:	f002 fb64 	bl	80a2efa <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x"); Serial.println(bme.sensorID(),16);
 80a0832:	f002 fe39 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0836:	4933      	ldr	r1, [pc, #204]	; (80a0904 <setup+0x1a4>)
 80a0838:	f002 fb48 	bl	80a2ecc <_ZN5Print5printEPKc>
 80a083c:	f002 fe34 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0840:	4604      	mov	r4, r0
 80a0842:	482e      	ldr	r0, [pc, #184]	; (80a08fc <setup+0x19c>)
 80a0844:	f000 f8bc 	bl	80a09c0 <_ZN15Adafruit_BME2808sensorIDEv>
 80a0848:	2210      	movs	r2, #16
 80a084a:	4601      	mov	r1, r0
 80a084c:	4620      	mov	r0, r4
 80a084e:	f002 fb60 	bl	80a2f12 <_ZN5Print11printNumberEmh>
        n += println();
 80a0852:	4620      	mov	r0, r4
 80a0854:	f002 fb45 	bl	80a2ee2 <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
 80a0858:	f002 fe26 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a085c:	492a      	ldr	r1, [pc, #168]	; (80a0908 <setup+0x1a8>)
 80a085e:	f002 fb35 	bl	80a2ecc <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
 80a0862:	f002 fe21 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0866:	4929      	ldr	r1, [pc, #164]	; (80a090c <setup+0x1ac>)
 80a0868:	f002 fb30 	bl	80a2ecc <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
 80a086c:	f002 fe1c 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0870:	4927      	ldr	r1, [pc, #156]	; (80a0910 <setup+0x1b0>)
 80a0872:	f002 fb2b 	bl	80a2ecc <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
 80a0876:	f002 fe17 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a087a:	4926      	ldr	r1, [pc, #152]	; (80a0914 <setup+0x1b4>)
 80a087c:	f002 fb26 	bl	80a2ecc <_ZN5Print5printEPKc>
        while (1) delay(10);
 80a0880:	200a      	movs	r0, #10
 80a0882:	f002 fc81 	bl	80a3188 <delay>
 80a0886:	e7fb      	b.n	80a0880 <setup+0x120>
  Serial.begin(9600);
 80a0888:	f002 fe0e 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a088c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0890:	f002 fdea 	bl	80a3468 <_ZN9USBSerial5beginEl>
  Serial.println("WebSerial 3D Firmware"); Serial.println("");
 80a0894:	f002 fe08 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a0898:	491f      	ldr	r1, [pc, #124]	; (80a0918 <setup+0x1b8>)
 80a089a:	f002 fb2e 	bl	80a2efa <_ZN5Print7printlnEPKc>
 80a089e:	f002 fe03 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a08a2:	491e      	ldr	r1, [pc, #120]	; (80a091c <setup+0x1bc>)
 80a08a4:	f002 fb29 	bl	80a2efa <_ZN5Print7printlnEPKc>
  if(!bno.begin())
 80a08a8:	210c      	movs	r1, #12
 80a08aa:	481d      	ldr	r0, [pc, #116]	; (80a0920 <setup+0x1c0>)
 80a08ac:	f000 ff78 	bl	80a17a0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
 80a08b0:	b928      	cbnz	r0, 80a08be <setup+0x15e>
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
 80a08b2:	f002 fdf9 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a08b6:	491b      	ldr	r1, [pc, #108]	; (80a0924 <setup+0x1c4>)
 80a08b8:	f002 fb08 	bl	80a2ecc <_ZN5Print5printEPKc>
    while(1);
 80a08bc:	e7fe      	b.n	80a08bc <setup+0x15c>
  delay(1000);
 80a08be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a08c2:	f002 fc61 	bl	80a3188 <delay>
  bno.setExtCrystalUse(true);
 80a08c6:	2101      	movs	r1, #1
 80a08c8:	4815      	ldr	r0, [pc, #84]	; (80a0920 <setup+0x1c0>)
 80a08ca:	f000 ff35 	bl	80a1738 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>
}
 80a08ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  displaySensorDetails();
 80a08d2:	f7ff bc87 	b.w	80a01e4 <_Z20displaySensorDetailsv>
 80a08d6:	bf00      	nop
 80a08d8:	200000d0 	.word	0x200000d0
 80a08dc:	080a62c3 	.word	0x080a62c3
 80a08e0:	080a62cf 	.word	0x080a62cf
 80a08e4:	080a62ec 	.word	0x080a62ec
 80a08e8:	080a62f7 	.word	0x080a62f7
 80a08ec:	080a6303 	.word	0x080a6303
 80a08f0:	080a6322 	.word	0x080a6322
 80a08f4:	080a632d 	.word	0x080a632d
 80a08f8:	080a633b 	.word	0x080a633b
 80a08fc:	20000070 	.word	0x20000070
 80a0900:	080a634a 	.word	0x080a634a
 80a0904:	080a6392 	.word	0x080a6392
 80a0908:	080a63a3 	.word	0x080a63a3
 80a090c:	080a63ea 	.word	0x080a63ea
 80a0910:	080a6414 	.word	0x080a6414
 80a0914:	080a643e 	.word	0x080a643e
 80a0918:	080a6468 	.word	0x080a6468
 80a091c:	080a62a1 	.word	0x080a62a1
 80a0920:	200000b4 	.word	0x200000b4
 80a0924:	080a647e 	.word	0x080a647e

080a0928 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 80a0928:	4770      	bx	lr

080a092a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 80a092a:	b510      	push	{r4, lr}
 80a092c:	4604      	mov	r4, r0
  }
 80a092e:	2110      	movs	r1, #16
 80a0930:	f003 f8aa 	bl	80a3a88 <_ZdlPvj>
 80a0934:	4620      	mov	r0, r4
 80a0936:	bd10      	pop	{r4, pc}

080a0938 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0938:	4b02      	ldr	r3, [pc, #8]	; (80a0944 <__tcf_0+0xc>)
 80a093a:	6898      	ldr	r0, [r3, #8]
 80a093c:	b108      	cbz	r0, 80a0942 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a093e:	f001 bfcd 	b.w	80a28dc <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0942:	4770      	bx	lr
 80a0944:	2000012c 	.word	0x2000012c

080a0948 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a0948:	b40e      	push	{r1, r2, r3}
 80a094a:	b503      	push	{r0, r1, lr}
 80a094c:	ab03      	add	r3, sp, #12
 80a094e:	f853 2b04 	ldr.w	r2, [r3], #4
        auto r = this->vprintf(false, format, args);
 80a0952:	2100      	movs	r1, #0
        va_start(args, format);
 80a0954:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a0956:	f002 fbcd 	bl	80a30f4 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
 80a095a:	b002      	add	sp, #8
 80a095c:	f85d eb04 	ldr.w	lr, [sp], #4
 80a0960:	b003      	add	sp, #12
 80a0962:	4770      	bx	lr

080a0964 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a0964:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0966:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 80a0968:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 80a096a:	4608      	mov	r0, r1
 80a096c:	68a3      	ldr	r3, [r4, #8]
    if (default_ && clock_ == 0)
 80a096e:	b132      	cbz	r2, 80a097e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 80a0970:	b9a3      	cbnz	r3, 80a099c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 80a0972:	490b      	ldr	r1, [pc, #44]	; (80a09a0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 80a0974:	b002      	add	sp, #8
 80a0976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 80a097a:	f002 baa7 	b.w	80a2ecc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a097e:	4a09      	ldr	r2, [pc, #36]	; (80a09a4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 80a0980:	7b26      	ldrb	r6, [r4, #12]
 80a0982:	4d09      	ldr	r5, [pc, #36]	; (80a09a8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 80a0984:	4909      	ldr	r1, [pc, #36]	; (80a09ac <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 80a0986:	7b64      	ldrb	r4, [r4, #13]
 80a0988:	2e01      	cmp	r6, #1
 80a098a:	bf18      	it	ne
 80a098c:	4629      	movne	r1, r5
 80a098e:	e9cd 1400 	strd	r1, r4, [sp]
 80a0992:	4907      	ldr	r1, [pc, #28]	; (80a09b0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 80a0994:	f7ff ffd8 	bl	80a0948 <_ZN5Print6printfEPKcz>
  }
 80a0998:	b002      	add	sp, #8
 80a099a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a099c:	4a05      	ldr	r2, [pc, #20]	; (80a09b4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 80a099e:	e7ef      	b.n	80a0980 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 80a09a0:	080a64cc 	.word	0x080a64cc
 80a09a4:	080a62a1 	.word	0x080a62a1
 80a09a8:	080a64c8 	.word	0x080a64c8
 80a09ac:	080a64c4 	.word	0x080a64c4
 80a09b0:	080a64e2 	.word	0x080a64e2
 80a09b4:	080a64bb 	.word	0x080a64bb

080a09b8 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
 80a09b8:	f04f 33ff 	mov.w	r3, #4294967295
 80a09bc:	6103      	str	r3, [r0, #16]
{ }
 80a09be:	4770      	bx	lr

080a09c0 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
 80a09c0:	6880      	ldr	r0, [r0, #8]
 80a09c2:	4770      	bx	lr

080a09c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
 80a09c4:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a09c6:	4d0b      	ldr	r5, [pc, #44]	; (80a09f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 80a09c8:	7829      	ldrb	r1, [r5, #0]
 80a09ca:	f3bf 8f5b 	dmb	ish
 80a09ce:	f011 0401 	ands.w	r4, r1, #1
 80a09d2:	d10d      	bne.n	80a09f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>
 80a09d4:	4628      	mov	r0, r5
 80a09d6:	f7ff fb71 	bl	80a00bc <__cxa_guard_acquire>
 80a09da:	b148      	cbz	r0, 80a09f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>
 80a09dc:	4621      	mov	r1, r4
 80a09de:	4806      	ldr	r0, [pc, #24]	; (80a09f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a09e0:	f002 f97f 	bl	80a2ce2 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a09e4:	4628      	mov	r0, r5
 80a09e6:	f7ff fb6e 	bl	80a00c6 <__cxa_guard_release>
 80a09ea:	4804      	ldr	r0, [pc, #16]	; (80a09fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a09ec:	f005 faf6 	bl	80a5fdc <atexit>
        return instance;
    }
 80a09f0:	4801      	ldr	r0, [pc, #4]	; (80a09f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a09f2:	bd38      	pop	{r3, r4, r5, pc}
 80a09f4:	20000128 	.word	0x20000128
 80a09f8:	2000012c 	.word	0x2000012c
 80a09fc:	080a0939 	.word	0x080a0939

080a0a00 <_ZN15Adafruit_BME2807spixferEh>:
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a0a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sck == -1)
 80a0a04:	f990 3013 	ldrsb.w	r3, [r0, #19]
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a0a08:	4605      	mov	r5, r0
    if (_sck == -1)
 80a0a0a:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a0a0c:	460f      	mov	r7, r1
    if (_sck == -1)
 80a0a0e:	d106      	bne.n	80a0a1e <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80a0a10:	f7ff ffd8 	bl	80a09c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a0a14:	4639      	mov	r1, r7
}
 80a0a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a0a1a:	f002 ba05 	b.w	80a2e28 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
 80a0a1e:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
 80a0a20:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
 80a0a22:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
 80a0a26:	f995 0013 	ldrsb.w	r0, [r5, #19]
 80a0a2a:	2100      	movs	r1, #0
 80a0a2c:	b280      	uxth	r0, r0
 80a0a2e:	f002 ffb2 	bl	80a3996 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
 80a0a32:	f995 0011 	ldrsb.w	r0, [r5, #17]
 80a0a36:	fa08 f106 	lsl.w	r1, r8, r6
 80a0a3a:	4039      	ands	r1, r7
 80a0a3c:	b280      	uxth	r0, r0
 80a0a3e:	f002 ffaa 	bl	80a3996 <digitalWrite>
        digitalWrite(_sck, HIGH);
 80a0a42:	f995 0013 	ldrsb.w	r0, [r5, #19]
 80a0a46:	2101      	movs	r1, #1
 80a0a48:	b280      	uxth	r0, r0
 80a0a4a:	f002 ffa4 	bl	80a3996 <digitalWrite>
        if (digitalRead(_miso))
 80a0a4e:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
 80a0a52:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
 80a0a54:	b280      	uxth	r0, r0
        reply <<= 1;
 80a0a56:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
 80a0a58:	f002 ffb6 	bl	80a39c8 <digitalRead>
 80a0a5c:	b108      	cbz	r0, 80a0a62 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
 80a0a5e:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
 80a0a62:	3e01      	subs	r6, #1
 80a0a64:	d2df      	bcs.n	80a0a26 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
 80a0a66:	4620      	mov	r0, r4
 80a0a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
 80a0a6c:	b508      	push	{r3, lr}
        instance().endTransaction();
 80a0a6e:	f7ff ffa9 	bl	80a09c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
 80a0a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
 80a0a76:	f002 b951 	b.w	80a2d1c <_ZN8SPIClass14endTransactionEv>

080a0a7a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
 80a0a7a:	b510      	push	{r4, lr}
 80a0a7c:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
 80a0a7e:	f7ff ffa1 	bl	80a09c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a0a82:	4621      	mov	r1, r4
    }
 80a0a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return instance().beginTransaction(settings);
 80a0a88:	f002 b962 	b.w	80a2d50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

080a0a8c <_ZN15Adafruit_BME2806read24Eh>:
{
 80a0a8c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
 80a0a8e:	f990 3010 	ldrsb.w	r3, [r0, #16]
{
 80a0a92:	4604      	mov	r4, r0
    if (_cs == -1) {
 80a0a94:	3301      	adds	r3, #1
{
 80a0a96:	460d      	mov	r5, r1
 80a0a98:	b085      	sub	sp, #20
    if (_cs == -1) {
 80a0a9a:	d123      	bne.n	80a0ae4 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a0a9c:	7901      	ldrb	r1, [r0, #4]
 80a0a9e:	6800      	ldr	r0, [r0, #0]
 80a0aa0:	f002 fe4a 	bl	80a3738 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a0aa4:	6820      	ldr	r0, [r4, #0]
 80a0aa6:	4629      	mov	r1, r5
 80a0aa8:	6803      	ldr	r3, [r0, #0]
 80a0aaa:	689b      	ldr	r3, [r3, #8]
 80a0aac:	4798      	blx	r3
        _wire -> endTransmission();
 80a0aae:	6820      	ldr	r0, [r4, #0]
 80a0ab0:	f002 fe4a 	bl	80a3748 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
 80a0ab4:	2203      	movs	r2, #3
 80a0ab6:	7921      	ldrb	r1, [r4, #4]
 80a0ab8:	6820      	ldr	r0, [r4, #0]
 80a0aba:	f002 fe3a 	bl	80a3732 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
 80a0abe:	6820      	ldr	r0, [r4, #0]
 80a0ac0:	6803      	ldr	r3, [r0, #0]
 80a0ac2:	695b      	ldr	r3, [r3, #20]
 80a0ac4:	4798      	blx	r3
        value <<= 8;
 80a0ac6:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
 80a0ac8:	6820      	ldr	r0, [r4, #0]
 80a0aca:	6803      	ldr	r3, [r0, #0]
 80a0acc:	695b      	ldr	r3, [r3, #20]
 80a0ace:	4798      	blx	r3
 80a0ad0:	4305      	orrs	r5, r0
        value |= _wire -> read();
 80a0ad2:	6820      	ldr	r0, [r4, #0]
        value <<= 8;
 80a0ad4:	022d      	lsls	r5, r5, #8
        value |= _wire -> read();
 80a0ad6:	6803      	ldr	r3, [r0, #0]
 80a0ad8:	695b      	ldr	r3, [r3, #20]
 80a0ada:	4798      	blx	r3
 80a0adc:	4305      	orrs	r5, r0
}
 80a0ade:	4628      	mov	r0, r5
 80a0ae0:	b005      	add	sp, #20
 80a0ae2:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
 80a0ae4:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a0ae8:	3301      	adds	r3, #1
 80a0aea:	d10c      	bne.n	80a0b06 <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
 80a0aec:	4b1a      	ldr	r3, [pc, #104]	; (80a0b58 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a0aee:	4668      	mov	r0, sp
 80a0af0:	9300      	str	r3, [sp, #0]
 80a0af2:	2300      	movs	r3, #0
 80a0af4:	f88d 3004 	strb.w	r3, [sp, #4]
 80a0af8:	4b18      	ldr	r3, [pc, #96]	; (80a0b5c <_ZN15Adafruit_BME2806read24Eh+0xd0>)
 80a0afa:	9302      	str	r3, [sp, #8]
 80a0afc:	2301      	movs	r3, #1
 80a0afe:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a0b02:	f7ff ffba 	bl	80a0a7a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
 80a0b06:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0b0a:	2100      	movs	r1, #0
 80a0b0c:	b280      	uxth	r0, r0
 80a0b0e:	f002 ff42 	bl	80a3996 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a0b12:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a0b16:	4620      	mov	r0, r4
 80a0b18:	f7ff ff72 	bl	80a0a00 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
 80a0b1c:	2100      	movs	r1, #0
 80a0b1e:	4620      	mov	r0, r4
 80a0b20:	f7ff ff6e 	bl	80a0a00 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
 80a0b24:	2100      	movs	r1, #0
        value <<= 8;
 80a0b26:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
 80a0b28:	4620      	mov	r0, r4
 80a0b2a:	f7ff ff69 	bl	80a0a00 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
 80a0b2e:	2100      	movs	r1, #0
        value |= spixfer(0);
 80a0b30:	4305      	orrs	r5, r0
        value |= spixfer(0);
 80a0b32:	4620      	mov	r0, r4
 80a0b34:	f7ff ff64 	bl	80a0a00 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
 80a0b38:	022d      	lsls	r5, r5, #8
        value |= spixfer(0);
 80a0b3a:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
 80a0b3c:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0b40:	2101      	movs	r1, #1
 80a0b42:	b280      	uxth	r0, r0
 80a0b44:	f002 ff27 	bl	80a3996 <digitalWrite>
        if (_sck == -1)
 80a0b48:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a0b4c:	3301      	adds	r3, #1
 80a0b4e:	d1c6      	bne.n	80a0ade <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
 80a0b50:	f7ff ff8c 	bl	80a0a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
 80a0b54:	e7c3      	b.n	80a0ade <_ZN15Adafruit_BME2806read24Eh+0x52>
 80a0b56:	bf00      	nop
 80a0b58:	080a6508 	.word	0x080a6508
 80a0b5c:	0007a120 	.word	0x0007a120

080a0b60 <_ZN15Adafruit_BME28015readTemperatureEv>:
{
 80a0b60:	b510      	push	{r4, lr}
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 80a0b62:	21fa      	movs	r1, #250	; 0xfa
{
 80a0b64:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 80a0b66:	f7ff ff91 	bl	80a0a8c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
 80a0b6a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a0b6e:	d01c      	beq.n	80a0baa <_ZN15Adafruit_BME28015readTemperatureEv+0x4a>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 80a0b70:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
 80a0b72:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
 80a0b76:	ebc1 2220 	rsb	r2, r1, r0, asr #8
 80a0b7a:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 80a0b7c:	0049      	lsls	r1, r1, #1
 80a0b7e:	ebc1 11e0 	rsb	r1, r1, r0, asr #7
 80a0b82:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
 80a0b84:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
 80a0b88:	1312      	asrs	r2, r2, #12
 80a0b8a:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
 80a0b8c:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
 80a0b8e:	eb03 23e1 	add.w	r3, r3, r1, asr #11
 80a0b92:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
 80a0b94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a0b98:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80a0b9c:	1200      	asrs	r0, r0, #8
 80a0b9e:	f004 fe4f 	bl	80a5840 <__aeabi_i2f>
    return T/100;
 80a0ba2:	4903      	ldr	r1, [pc, #12]	; (80a0bb0 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>)
 80a0ba4:	f004 ff54 	bl	80a5a50 <__aeabi_fdiv>
}
 80a0ba8:	bd10      	pop	{r4, pc}
        return NAN;
 80a0baa:	4802      	ldr	r0, [pc, #8]	; (80a0bb4 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>)
 80a0bac:	e7fc      	b.n	80a0ba8 <_ZN15Adafruit_BME28015readTemperatureEv+0x48>
 80a0bae:	bf00      	nop
 80a0bb0:	42c80000 	.word	0x42c80000
 80a0bb4:	7fc00000 	.word	0x7fc00000

080a0bb8 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
 80a0bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0bbc:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
 80a0bbe:	f7ff ffcf 	bl	80a0b60 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 80a0bc2:	21f7      	movs	r1, #247	; 0xf7
 80a0bc4:	4620      	mov	r0, r4
 80a0bc6:	f7ff ff61 	bl	80a0a8c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
 80a0bca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 80a0bce:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
 80a0bd0:	f000 80bd 	beq.w	80a0d4e <_ZN15Adafruit_BME28012readPressureEv+0x196>
    var1 = ((int64_t)t_fine) - 128000;
 80a0bd4:	68e0      	ldr	r0, [r4, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a0bd6:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
    var1 = ((int64_t)t_fine) - 128000;
 80a0bda:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
 80a0bde:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80a0be2:	f141 32ff 	adc.w	r2, r1, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a0be6:	fba3 8903 	umull	r8, r9, r3, r3
 80a0bea:	fb03 f102 	mul.w	r1, r3, r2
 80a0bee:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a0bf2:	fb06 f102 	mul.w	r1, r6, r2
 80a0bf6:	17f7      	asrs	r7, r6, #31
 80a0bf8:	fb03 1107 	mla	r1, r3, r7, r1
 80a0bfc:	fba6 6703 	umull	r6, r7, r6, r3
 80a0c00:	440f      	add	r7, r1
 80a0c02:	0339      	lsls	r1, r7, #12
 80a0c04:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
 80a0c08:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
 80a0c0a:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
 80a0c0e:	fb06 fc09 	mul.w	ip, r6, r9
 80a0c12:	17f7      	asrs	r7, r6, #31
 80a0c14:	fb08 cc07 	mla	ip, r8, r7, ip
 80a0c18:	fba6 6708 	umull	r6, r7, r6, r8
 80a0c1c:	4467      	add	r7, ip
 80a0c1e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80a0c22:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
 80a0c26:	8b66      	ldrh	r6, [r4, #26]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
 80a0c28:	ea4f 2e27 	mov.w	lr, r7, asr #8
 80a0c2c:	eb1c 0000 	adds.w	r0, ip, r0
 80a0c30:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
 80a0c34:	3000      	adds	r0, #0
 80a0c36:	fba0 0106 	umull	r0, r1, r0, r6
 80a0c3a:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
 80a0c3e:	fb06 110e 	mla	r1, r6, lr, r1
 80a0c42:	104e      	asrs	r6, r1, #1
 80a0c44:	17cf      	asrs	r7, r1, #31
    if (var1 == 0) {
 80a0c46:	ea56 0107 	orrs.w	r1, r6, r7
 80a0c4a:	f000 8082 	beq.w	80a0d52 <_ZN15Adafruit_BME28012readPressureEv+0x19a>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a0c4e:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
    adc_P >>= 4;
 80a0c52:	112d      	asrs	r5, r5, #4
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a0c54:	fb00 fc09 	mul.w	ip, r0, r9
 80a0c58:	17c1      	asrs	r1, r0, #31
 80a0c5a:	fb08 cc01 	mla	ip, r8, r1, ip
 80a0c5e:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80a0c62:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a0c66:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80a0c68:	fb08 f202 	mul.w	r2, r8, r2
 80a0c6c:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80a0c70:	fb03 2209 	mla	r2, r3, r9, r2
 80a0c74:	fba8 8903 	umull	r8, r9, r8, r3
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
 80a0c78:	2300      	movs	r3, #0
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80a0c7a:	4491      	add	r9, r2
 80a0c7c:	ea4f 4c49 	mov.w	ip, r9, lsl #17
 80a0c80:	ea4f 4248 	mov.w	r2, r8, lsl #17
 80a0c84:	1812      	adds	r2, r2, r0
    p = 1048576 - adc_P;
 80a0c86:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80a0c8a:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
 80a0c8e:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80a0c92:	eb4c 0c01 	adc.w	ip, ip, r1
    p = 1048576 - adc_P;
 80a0c96:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
 80a0c98:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
 80a0c9a:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
 80a0c9e:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
 80a0ca2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80a0ca6:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
 80a0caa:	1ac0      	subs	r0, r0, r3
 80a0cac:	f640 4335 	movw	r3, #3125	; 0xc35
 80a0cb0:	fba0 0103 	umull	r0, r1, r0, r3
 80a0cb4:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
 80a0cb8:	eb6e 0e0c 	sbc.w	lr, lr, ip
 80a0cbc:	4632      	mov	r2, r6
 80a0cbe:	fb03 110e 	mla	r1, r3, lr, r1
 80a0cc2:	463b      	mov	r3, r7
 80a0cc4:	f004 ffd6 	bl	80a5c74 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 80a0cc8:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80a0ccc:	134d      	asrs	r5, r1, #13
 80a0cce:	fb02 f705 	mul.w	r7, r2, r5
 80a0cd2:	0b46      	lsrs	r6, r0, #13
 80a0cd4:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
 80a0cd8:	17d3      	asrs	r3, r2, #31
 80a0cda:	fb06 7703 	mla	r7, r6, r3, r7
 80a0cde:	fba2 2306 	umull	r2, r3, r2, r6
 80a0ce2:	4355      	muls	r5, r2
 80a0ce4:	443b      	add	r3, r7
 80a0ce6:	fb06 5503 	mla	r5, r6, r3, r5
 80a0cea:	fba2 2306 	umull	r2, r3, r2, r6
 80a0cee:	442b      	add	r3, r5
 80a0cf0:	0e55      	lsrs	r5, r2, #25
 80a0cf2:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 80a0cf6:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a0cfa:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 80a0cfc:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a0d00:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 80a0d04:	4351      	muls	r1, r2
 80a0d06:	17d3      	asrs	r3, r2, #31
 80a0d08:	fb00 1103 	mla	r1, r0, r3, r1
 80a0d0c:	fba2 2300 	umull	r2, r3, r2, r0
 80a0d10:	440b      	add	r3, r1
 80a0d12:	0cd1      	lsrs	r1, r2, #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a0d14:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 80a0d18:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a0d1c:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 80a0d1e:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a0d22:	eb46 0300 	adc.w	r3, r6, r0
 80a0d26:	0a2a      	lsrs	r2, r5, #8
 80a0d28:	17e5      	asrs	r5, r4, #31
 80a0d2a:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80a0d2e:	1219      	asrs	r1, r3, #8
 80a0d30:	0120      	lsls	r0, r4, #4
 80a0d32:	012b      	lsls	r3, r5, #4
 80a0d34:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
 80a0d38:	1880      	adds	r0, r0, r2
 80a0d3a:	eb43 0101 	adc.w	r1, r3, r1
 80a0d3e:	f004 fd95 	bl	80a586c <__aeabi_l2f>
 80a0d42:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80a0d46:	f004 fdcf 	bl	80a58e8 <__aeabi_fmul>
}
 80a0d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
 80a0d4e:	4802      	ldr	r0, [pc, #8]	; (80a0d58 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>)
 80a0d50:	e7fb      	b.n	80a0d4a <_ZN15Adafruit_BME28012readPressureEv+0x192>
        return 0; // avoid exception caused by division by zero
 80a0d52:	2000      	movs	r0, #0
 80a0d54:	e7f9      	b.n	80a0d4a <_ZN15Adafruit_BME28012readPressureEv+0x192>
 80a0d56:	bf00      	nop
 80a0d58:	7fc00000 	.word	0x7fc00000
 80a0d5c:	00000000 	.word	0x00000000

080a0d60 <_ZN15Adafruit_BME28012readAltitudeEf>:
{
 80a0d60:	b510      	push	{r4, lr}
 80a0d62:	460c      	mov	r4, r1
    float atmospheric = readPressure() / 100.0F;
 80a0d64:	f7ff ff28 	bl	80a0bb8 <_ZN15Adafruit_BME28012readPressureEv>
 80a0d68:	4911      	ldr	r1, [pc, #68]	; (80a0db0 <_ZN15Adafruit_BME28012readAltitudeEf+0x50>)
 80a0d6a:	f004 fe71 	bl	80a5a50 <__aeabi_fdiv>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
 80a0d6e:	4621      	mov	r1, r4
 80a0d70:	f004 fe6e 	bl	80a5a50 <__aeabi_fdiv>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80a0d74:	f004 f90a 	bl	80a4f8c <__aeabi_f2d>
 80a0d78:	a309      	add	r3, pc, #36	; (adr r3, 80a0da0 <_ZN15Adafruit_BME28012readAltitudeEf+0x40>)
 80a0d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0d7e:	f002 fe87 	bl	80a3a90 <pow>
 80a0d82:	4602      	mov	r2, r0
 80a0d84:	460b      	mov	r3, r1
 80a0d86:	2000      	movs	r0, #0
 80a0d88:	490a      	ldr	r1, [pc, #40]	; (80a0db4 <_ZN15Adafruit_BME28012readAltitudeEf+0x54>)
 80a0d8a:	f003 ff9f 	bl	80a4ccc <__aeabi_dsub>
 80a0d8e:	a306      	add	r3, pc, #24	; (adr r3, 80a0da8 <_ZN15Adafruit_BME28012readAltitudeEf+0x48>)
 80a0d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0d94:	f004 f952 	bl	80a503c <__aeabi_dmul>
 80a0d98:	f004 fc48 	bl	80a562c <__aeabi_d2f>
}
 80a0d9c:	bd10      	pop	{r4, pc}
 80a0d9e:	bf00      	nop
 80a0da0:	1a36e2eb 	.word	0x1a36e2eb
 80a0da4:	3fc85bc0 	.word	0x3fc85bc0
 80a0da8:	00000000 	.word	0x00000000
 80a0dac:	40e5a540 	.word	0x40e5a540
 80a0db0:	42c80000 	.word	0x42c80000
 80a0db4:	3ff00000 	.word	0x3ff00000

080a0db8 <_ZN15Adafruit_BME2806read16Eh>:
{
 80a0db8:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
 80a0dba:	f990 3010 	ldrsb.w	r3, [r0, #16]
{
 80a0dbe:	4604      	mov	r4, r0
    if (_cs == -1) {
 80a0dc0:	3301      	adds	r3, #1
{
 80a0dc2:	460d      	mov	r5, r1
 80a0dc4:	b085      	sub	sp, #20
    if (_cs == -1) {
 80a0dc6:	d11f      	bne.n	80a0e08 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a0dc8:	7901      	ldrb	r1, [r0, #4]
 80a0dca:	6800      	ldr	r0, [r0, #0]
 80a0dcc:	f002 fcb4 	bl	80a3738 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a0dd0:	6820      	ldr	r0, [r4, #0]
 80a0dd2:	4629      	mov	r1, r5
 80a0dd4:	6803      	ldr	r3, [r0, #0]
 80a0dd6:	689b      	ldr	r3, [r3, #8]
 80a0dd8:	4798      	blx	r3
        _wire -> endTransmission();
 80a0dda:	6820      	ldr	r0, [r4, #0]
 80a0ddc:	f002 fcb4 	bl	80a3748 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
 80a0de0:	2202      	movs	r2, #2
 80a0de2:	7921      	ldrb	r1, [r4, #4]
 80a0de4:	6820      	ldr	r0, [r4, #0]
 80a0de6:	f002 fca4 	bl	80a3732 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
 80a0dea:	6820      	ldr	r0, [r4, #0]
 80a0dec:	6803      	ldr	r3, [r0, #0]
 80a0dee:	695b      	ldr	r3, [r3, #20]
 80a0df0:	4798      	blx	r3
 80a0df2:	4605      	mov	r5, r0
 80a0df4:	6820      	ldr	r0, [r4, #0]
 80a0df6:	6803      	ldr	r3, [r0, #0]
 80a0df8:	695b      	ldr	r3, [r3, #20]
 80a0dfa:	4798      	blx	r3
 80a0dfc:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80a0e00:	b285      	uxth	r5, r0
}
 80a0e02:	4628      	mov	r0, r5
 80a0e04:	b005      	add	sp, #20
 80a0e06:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
 80a0e08:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a0e0c:	3301      	adds	r3, #1
 80a0e0e:	d10c      	bne.n	80a0e2a <_ZN15Adafruit_BME2806read16Eh+0x72>
 80a0e10:	4b18      	ldr	r3, [pc, #96]	; (80a0e74 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a0e12:	4668      	mov	r0, sp
 80a0e14:	9300      	str	r3, [sp, #0]
 80a0e16:	2300      	movs	r3, #0
 80a0e18:	f88d 3004 	strb.w	r3, [sp, #4]
 80a0e1c:	4b16      	ldr	r3, [pc, #88]	; (80a0e78 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
 80a0e1e:	9302      	str	r3, [sp, #8]
 80a0e20:	2301      	movs	r3, #1
 80a0e22:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a0e26:	f7ff fe28 	bl	80a0a7a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
 80a0e2a:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0e2e:	2100      	movs	r1, #0
 80a0e30:	b280      	uxth	r0, r0
 80a0e32:	f002 fdb0 	bl	80a3996 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a0e36:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a0e3a:	4620      	mov	r0, r4
 80a0e3c:	f7ff fde0 	bl	80a0a00 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
 80a0e40:	2100      	movs	r1, #0
 80a0e42:	4620      	mov	r0, r4
 80a0e44:	f7ff fddc 	bl	80a0a00 <_ZN15Adafruit_BME2807spixferEh>
 80a0e48:	2100      	movs	r1, #0
 80a0e4a:	4605      	mov	r5, r0
 80a0e4c:	4620      	mov	r0, r4
 80a0e4e:	f7ff fdd7 	bl	80a0a00 <_ZN15Adafruit_BME2807spixferEh>
 80a0e52:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80a0e56:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
 80a0e58:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0e5c:	2101      	movs	r1, #1
 80a0e5e:	b280      	uxth	r0, r0
 80a0e60:	f002 fd99 	bl	80a3996 <digitalWrite>
        if (_sck == -1)
 80a0e64:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a0e68:	3301      	adds	r3, #1
 80a0e6a:	d1ca      	bne.n	80a0e02 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
 80a0e6c:	f7ff fdfe 	bl	80a0a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
 80a0e70:	e7c7      	b.n	80a0e02 <_ZN15Adafruit_BME2806read16Eh+0x4a>
 80a0e72:	bf00      	nop
 80a0e74:	080a6508 	.word	0x080a6508
 80a0e78:	0007a120 	.word	0x0007a120

080a0e7c <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
 80a0e7c:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
 80a0e7e:	f7ff ff9b 	bl	80a0db8 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
 80a0e82:	ba40      	rev16	r0, r0
}
 80a0e84:	b280      	uxth	r0, r0
 80a0e86:	bd08      	pop	{r3, pc}

080a0e88 <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
 80a0e88:	b510      	push	{r4, lr}
 80a0e8a:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
 80a0e8c:	f7ff fe68 	bl	80a0b60 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
 80a0e90:	21fd      	movs	r1, #253	; 0xfd
 80a0e92:	4620      	mov	r0, r4
 80a0e94:	f7ff ff90 	bl	80a0db8 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
 80a0e98:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80a0e9c:	d03a      	beq.n	80a0f14 <_ZN15Adafruit_BME28012readHumidityEv+0x8c>
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 80a0e9e:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
 80a0ea2:	68e2      	ldr	r2, [r4, #12]
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 80a0ea4:	051b      	lsls	r3, r3, #20
 80a0ea6:	ebc3 3080 	rsb	r0, r3, r0, lsl #14
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a0eaa:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
 80a0eae:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 80a0eb2:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a0eb6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80a0eba:	13d8      	asrs	r0, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 80a0ebc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80a0ec0:	4353      	muls	r3, r2
 80a0ec2:	12db      	asrs	r3, r3, #11
 80a0ec4:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 80a0ec8:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
 80a0ecc:	4353      	muls	r3, r2
 80a0ece:	129b      	asrs	r3, r3, #10
 80a0ed0:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 80a0ed2:	129b      	asrs	r3, r3, #10
 80a0ed4:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
 80a0ed8:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 80a0edc:	4353      	muls	r3, r2
 80a0ede:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80a0ee2:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 80a0ee4:	4343      	muls	r3, r0
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80a0ee6:	13d8      	asrs	r0, r3, #15
 80a0ee8:	4340      	muls	r0, r0
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
 80a0eea:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80a0eee:	11c0      	asrs	r0, r0, #7
 80a0ef0:	4350      	muls	r0, r2
 80a0ef2:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 80a0ef6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 80a0efa:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 80a0efe:	bfa8      	it	ge
 80a0f00:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
 80a0f04:	1300      	asrs	r0, r0, #12
 80a0f06:	f004 fc9b 	bl	80a5840 <__aeabi_i2f>
    return  h / 1024.0;
 80a0f0a:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80a0f0e:	f004 fceb 	bl	80a58e8 <__aeabi_fmul>
}
 80a0f12:	bd10      	pop	{r4, pc}
        return NAN;
 80a0f14:	4800      	ldr	r0, [pc, #0]	; (80a0f18 <_ZN15Adafruit_BME28012readHumidityEv+0x90>)
 80a0f16:	e7fc      	b.n	80a0f12 <_ZN15Adafruit_BME28012readHumidityEv+0x8a>
 80a0f18:	7fc00000 	.word	0x7fc00000

080a0f1c <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
 80a0f1c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
 80a0f1e:	f990 3010 	ldrsb.w	r3, [r0, #16]
uint8_t Adafruit_BME280::read8(byte reg) {
 80a0f22:	4604      	mov	r4, r0
    if (_cs == -1) {
 80a0f24:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
 80a0f26:	460d      	mov	r5, r1
 80a0f28:	b085      	sub	sp, #20
    if (_cs == -1) {
 80a0f2a:	d118      	bne.n	80a0f5e <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a0f2c:	7901      	ldrb	r1, [r0, #4]
 80a0f2e:	6800      	ldr	r0, [r0, #0]
 80a0f30:	f002 fc02 	bl	80a3738 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a0f34:	6820      	ldr	r0, [r4, #0]
 80a0f36:	4629      	mov	r1, r5
 80a0f38:	6803      	ldr	r3, [r0, #0]
 80a0f3a:	689b      	ldr	r3, [r3, #8]
 80a0f3c:	4798      	blx	r3
        _wire -> endTransmission();
 80a0f3e:	6820      	ldr	r0, [r4, #0]
 80a0f40:	f002 fc02 	bl	80a3748 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
 80a0f44:	2201      	movs	r2, #1
 80a0f46:	7921      	ldrb	r1, [r4, #4]
 80a0f48:	6820      	ldr	r0, [r4, #0]
 80a0f4a:	f002 fbf2 	bl	80a3732 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
 80a0f4e:	6820      	ldr	r0, [r4, #0]
 80a0f50:	6803      	ldr	r3, [r0, #0]
 80a0f52:	695b      	ldr	r3, [r3, #20]
 80a0f54:	4798      	blx	r3
 80a0f56:	b2c5      	uxtb	r5, r0
}
 80a0f58:	4628      	mov	r0, r5
 80a0f5a:	b005      	add	sp, #20
 80a0f5c:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
 80a0f5e:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a0f62:	3301      	adds	r3, #1
 80a0f64:	d10c      	bne.n	80a0f80 <_ZN15Adafruit_BME2805read8Eh+0x64>
 80a0f66:	4b15      	ldr	r3, [pc, #84]	; (80a0fbc <_ZN15Adafruit_BME2805read8Eh+0xa0>)
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a0f68:	4668      	mov	r0, sp
 80a0f6a:	9300      	str	r3, [sp, #0]
 80a0f6c:	2300      	movs	r3, #0
 80a0f6e:	f88d 3004 	strb.w	r3, [sp, #4]
 80a0f72:	4b13      	ldr	r3, [pc, #76]	; (80a0fc0 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
 80a0f74:	9302      	str	r3, [sp, #8]
 80a0f76:	2301      	movs	r3, #1
 80a0f78:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a0f7c:	f7ff fd7d 	bl	80a0a7a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
 80a0f80:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0f84:	2100      	movs	r1, #0
 80a0f86:	b280      	uxth	r0, r0
 80a0f88:	f002 fd05 	bl	80a3996 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a0f8c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a0f90:	4620      	mov	r0, r4
 80a0f92:	f7ff fd35 	bl	80a0a00 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
 80a0f96:	2100      	movs	r1, #0
 80a0f98:	4620      	mov	r0, r4
 80a0f9a:	f7ff fd31 	bl	80a0a00 <_ZN15Adafruit_BME2807spixferEh>
 80a0f9e:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
 80a0fa0:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0fa4:	2101      	movs	r1, #1
 80a0fa6:	b280      	uxth	r0, r0
 80a0fa8:	f002 fcf5 	bl	80a3996 <digitalWrite>
        if (_sck == -1)
 80a0fac:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a0fb0:	3301      	adds	r3, #1
 80a0fb2:	d1d1      	bne.n	80a0f58 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
 80a0fb4:	f7ff fd5a 	bl	80a0a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
 80a0fb8:	e7ce      	b.n	80a0f58 <_ZN15Adafruit_BME2805read8Eh+0x3c>
 80a0fba:	bf00      	nop
 80a0fbc:	080a6508 	.word	0x080a6508
 80a0fc0:	0007a120 	.word	0x0007a120

080a0fc4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 80a0fc4:	21f3      	movs	r1, #243	; 0xf3
{
 80a0fc6:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 80a0fc8:	f7ff ffa8 	bl	80a0f1c <_ZN15Adafruit_BME2805read8Eh>
}
 80a0fcc:	f000 0001 	and.w	r0, r0, #1
 80a0fd0:	bd08      	pop	{r3, pc}

080a0fd2 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
 80a0fd2:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a0fd4:	2188      	movs	r1, #136	; 0x88
{
 80a0fd6:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a0fd8:	f7ff ff50 	bl	80a0e7c <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
 80a0fdc:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a0fde:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
 80a0fe0:	4620      	mov	r0, r4
 80a0fe2:	f7ff ff4b 	bl	80a0e7c <_ZN15Adafruit_BME2809read16_LEEh>
 80a0fe6:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 80a0fe8:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
 80a0fea:	4620      	mov	r0, r4
 80a0fec:	f7ff ff46 	bl	80a0e7c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a0ff0:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 80a0ff2:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a0ff4:	4620      	mov	r0, r4
 80a0ff6:	f7ff ff41 	bl	80a0e7c <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
 80a0ffa:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a0ffc:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
 80a0ffe:	4620      	mov	r0, r4
 80a1000:	f7ff ff3c 	bl	80a0e7c <_ZN15Adafruit_BME2809read16_LEEh>
 80a1004:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 80a1006:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
 80a1008:	4620      	mov	r0, r4
 80a100a:	f7ff ff37 	bl	80a0e7c <_ZN15Adafruit_BME2809read16_LEEh>
 80a100e:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 80a1010:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
 80a1012:	4620      	mov	r0, r4
 80a1014:	f7ff ff32 	bl	80a0e7c <_ZN15Adafruit_BME2809read16_LEEh>
 80a1018:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 80a101a:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
 80a101c:	4620      	mov	r0, r4
 80a101e:	f7ff ff2d 	bl	80a0e7c <_ZN15Adafruit_BME2809read16_LEEh>
 80a1022:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 80a1024:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
 80a1026:	4620      	mov	r0, r4
 80a1028:	f7ff ff28 	bl	80a0e7c <_ZN15Adafruit_BME2809read16_LEEh>
 80a102c:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 80a102e:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
 80a1030:	4620      	mov	r0, r4
 80a1032:	f7ff ff23 	bl	80a0e7c <_ZN15Adafruit_BME2809read16_LEEh>
 80a1036:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 80a1038:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
 80a103a:	4620      	mov	r0, r4
 80a103c:	f7ff ff1e 	bl	80a0e7c <_ZN15Adafruit_BME2809read16_LEEh>
 80a1040:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 80a1042:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
 80a1044:	4620      	mov	r0, r4
 80a1046:	f7ff ff19 	bl	80a0e7c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a104a:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 80a104c:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a104e:	4620      	mov	r0, r4
 80a1050:	f7ff ff64 	bl	80a0f1c <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
 80a1054:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a1056:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
 80a105a:	4620      	mov	r0, r4
 80a105c:	f7ff ff0e 	bl	80a0e7c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a1060:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 80a1062:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a1064:	4620      	mov	r0, r4
 80a1066:	f7ff ff59 	bl	80a0f1c <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 80a106a:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a106c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 80a1070:	4620      	mov	r0, r4
 80a1072:	f7ff ff53 	bl	80a0f1c <_ZN15Adafruit_BME2805read8Eh>
 80a1076:	21e5      	movs	r1, #229	; 0xe5
 80a1078:	4605      	mov	r5, r0
 80a107a:	4620      	mov	r0, r4
 80a107c:	f7ff ff4e 	bl	80a0f1c <_ZN15Adafruit_BME2805read8Eh>
 80a1080:	f000 030f 	and.w	r3, r0, #15
 80a1084:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
 80a1088:	21e6      	movs	r1, #230	; 0xe6
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 80a108a:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
 80a108c:	4620      	mov	r0, r4
 80a108e:	f7ff ff45 	bl	80a0f1c <_ZN15Adafruit_BME2805read8Eh>
 80a1092:	21e5      	movs	r1, #229	; 0xe5
 80a1094:	4605      	mov	r5, r0
 80a1096:	4620      	mov	r0, r4
 80a1098:	f7ff ff40 	bl	80a0f1c <_ZN15Adafruit_BME2805read8Eh>
 80a109c:	1103      	asrs	r3, r0, #4
 80a109e:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
 80a10a2:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 80a10a4:	21e7      	movs	r1, #231	; 0xe7
 80a10a6:	4620      	mov	r0, r4
 80a10a8:	f7ff ff38 	bl	80a0f1c <_ZN15Adafruit_BME2805read8Eh>
 80a10ac:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
 80a10b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a10b4 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
 80a10b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
 80a10b6:	f990 3010 	ldrsb.w	r3, [r0, #16]
void Adafruit_BME280::write8(byte reg, byte value) {
 80a10ba:	4604      	mov	r4, r0
    if (_cs == -1) {
 80a10bc:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
 80a10be:	460e      	mov	r6, r1
 80a10c0:	4615      	mov	r5, r2
    if (_cs == -1) {
 80a10c2:	d112      	bne.n	80a10ea <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a10c4:	7901      	ldrb	r1, [r0, #4]
 80a10c6:	6800      	ldr	r0, [r0, #0]
 80a10c8:	f002 fb36 	bl	80a3738 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a10cc:	6820      	ldr	r0, [r4, #0]
 80a10ce:	4631      	mov	r1, r6
 80a10d0:	6803      	ldr	r3, [r0, #0]
 80a10d2:	689b      	ldr	r3, [r3, #8]
 80a10d4:	4798      	blx	r3
        _wire -> write((uint8_t)value);
 80a10d6:	6820      	ldr	r0, [r4, #0]
 80a10d8:	4629      	mov	r1, r5
 80a10da:	6803      	ldr	r3, [r0, #0]
 80a10dc:	689b      	ldr	r3, [r3, #8]
 80a10de:	4798      	blx	r3
        _wire -> endTransmission();
 80a10e0:	6820      	ldr	r0, [r4, #0]
 80a10e2:	f002 fb31 	bl	80a3748 <_ZN7TwoWire15endTransmissionEv>
}
 80a10e6:	b004      	add	sp, #16
 80a10e8:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
 80a10ea:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a10ee:	3301      	adds	r3, #1
 80a10f0:	d10c      	bne.n	80a110c <_ZN15Adafruit_BME2806write8Ehh+0x58>
 80a10f2:	4b14      	ldr	r3, [pc, #80]	; (80a1144 <_ZN15Adafruit_BME2806write8Ehh+0x90>)
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a10f4:	4668      	mov	r0, sp
 80a10f6:	9300      	str	r3, [sp, #0]
 80a10f8:	2300      	movs	r3, #0
 80a10fa:	f88d 3004 	strb.w	r3, [sp, #4]
 80a10fe:	4b12      	ldr	r3, [pc, #72]	; (80a1148 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
 80a1100:	9302      	str	r3, [sp, #8]
 80a1102:	2301      	movs	r3, #1
 80a1104:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a1108:	f7ff fcb7 	bl	80a0a7a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
 80a110c:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a1110:	2100      	movs	r1, #0
 80a1112:	b280      	uxth	r0, r0
 80a1114:	f002 fc3f 	bl	80a3996 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
 80a1118:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 80a111c:	4620      	mov	r0, r4
 80a111e:	f7ff fc6f 	bl	80a0a00 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
 80a1122:	4629      	mov	r1, r5
 80a1124:	4620      	mov	r0, r4
 80a1126:	f7ff fc6b 	bl	80a0a00 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
 80a112a:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a112e:	2101      	movs	r1, #1
 80a1130:	b280      	uxth	r0, r0
 80a1132:	f002 fc30 	bl	80a3996 <digitalWrite>
    if (_sck == -1)
 80a1136:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a113a:	3301      	adds	r3, #1
 80a113c:	d1d3      	bne.n	80a10e6 <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
 80a113e:	f7ff fc95 	bl	80a0a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
 80a1142:	e7d0      	b.n	80a10e6 <_ZN15Adafruit_BME2806write8Ehh+0x32>
 80a1144:	080a6508 	.word	0x080a6508
 80a1148:	0007a120 	.word	0x0007a120

080a114c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
 80a114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a114e:	4604      	mov	r4, r0
    _measReg.osrs_t   = tempSampling;
 80a1150:	00db      	lsls	r3, r3, #3
 80a1152:	f002 0207 	and.w	r2, r2, #7
 80a1156:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80a115a:	4313      	orrs	r3, r2
 80a115c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
 80a1160:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
 80a1164:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
 80a1168:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
 80a116c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80a1170:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
 80a1174:	f366 1347 	bfi	r3, r6, #5, #3
 80a1178:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
 80a117c:	00ed      	lsls	r5, r5, #3
 80a117e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80a1182:	f007 0707 	and.w	r7, r7, #7
 80a1186:	f005 0538 	and.w	r5, r5, #56	; 0x38
 80a118a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80a118e:	433d      	orrs	r5, r7
 80a1190:	431d      	orrs	r5, r3
 80a1192:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
 80a1196:	f006 0207 	and.w	r2, r6, #7
 80a119a:	21f2      	movs	r1, #242	; 0xf2
 80a119c:	f7ff ff8a 	bl	80a10b4 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
 80a11a0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
 80a11a4:	4620      	mov	r0, r4
 80a11a6:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 80a11aa:	f002 0107 	and.w	r1, r2, #7
 80a11ae:	009b      	lsls	r3, r3, #2
 80a11b0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80a11b4:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
 80a11b8:	21f5      	movs	r1, #245	; 0xf5
 80a11ba:	f7ff ff7b 	bl	80a10b4 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
 80a11be:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
 80a11c2:	4620      	mov	r0, r4
 80a11c4:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 80a11c8:	f002 0107 	and.w	r1, r2, #7
 80a11cc:	009b      	lsls	r3, r3, #2
 80a11ce:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80a11d2:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 80a11d6:	21f4      	movs	r1, #244	; 0xf4
}
 80a11d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
 80a11dc:	f7ff bf6a 	b.w	80a10b4 <_ZN15Adafruit_BME2806write8Ehh>

080a11e0 <_ZN15Adafruit_BME2804initEv>:
{
 80a11e0:	b530      	push	{r4, r5, lr}
 80a11e2:	4604      	mov	r4, r0
    if (_cs == -1) {
 80a11e4:	f990 0010 	ldrsb.w	r0, [r0, #16]
{
 80a11e8:	b085      	sub	sp, #20
    if (_cs == -1) {
 80a11ea:	1c42      	adds	r2, r0, #1
 80a11ec:	d119      	bne.n	80a1222 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
 80a11ee:	6820      	ldr	r0, [r4, #0]
 80a11f0:	f002 fa70 	bl	80a36d4 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
 80a11f4:	21d0      	movs	r1, #208	; 0xd0
 80a11f6:	4620      	mov	r0, r4
 80a11f8:	f7ff fe90 	bl	80a0f1c <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
 80a11fc:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
 80a11fe:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
 80a1200:	d145      	bne.n	80a128e <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
 80a1202:	4620      	mov	r0, r4
 80a1204:	22b6      	movs	r2, #182	; 0xb6
 80a1206:	21e0      	movs	r1, #224	; 0xe0
 80a1208:	f7ff ff54 	bl	80a10b4 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
 80a120c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a1210:	f001 ffba 	bl	80a3188 <delay>
    while (isReadingCalibration())
 80a1214:	4620      	mov	r0, r4
 80a1216:	f7ff fed5 	bl	80a0fc4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
 80a121a:	4605      	mov	r5, r0
 80a121c:	b328      	cbz	r0, 80a126a <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
 80a121e:	2064      	movs	r0, #100	; 0x64
 80a1220:	e7f6      	b.n	80a1210 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
 80a1222:	2101      	movs	r1, #1
 80a1224:	b280      	uxth	r0, r0
 80a1226:	f002 fbb6 	bl	80a3996 <digitalWrite>
        pinMode(_cs, OUTPUT);
 80a122a:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a122e:	2101      	movs	r1, #1
 80a1230:	b280      	uxth	r0, r0
 80a1232:	f002 fb9f 	bl	80a3974 <pinMode>
        if (_sck == -1) {
 80a1236:	f994 0013 	ldrsb.w	r0, [r4, #19]
 80a123a:	1c43      	adds	r3, r0, #1
 80a123c:	d104      	bne.n	80a1248 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
 80a123e:	f7ff fbc1 	bl	80a09c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a1242:	f001 fd5d 	bl	80a2d00 <_ZN8SPIClass5beginEv>
    }
 80a1246:	e7d5      	b.n	80a11f4 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
 80a1248:	2101      	movs	r1, #1
 80a124a:	b280      	uxth	r0, r0
 80a124c:	f002 fb92 	bl	80a3974 <pinMode>
            pinMode(_mosi, OUTPUT);
 80a1250:	f994 0011 	ldrsb.w	r0, [r4, #17]
 80a1254:	2101      	movs	r1, #1
 80a1256:	b280      	uxth	r0, r0
 80a1258:	f002 fb8c 	bl	80a3974 <pinMode>
            pinMode(_miso, INPUT);
 80a125c:	f994 0012 	ldrsb.w	r0, [r4, #18]
 80a1260:	2100      	movs	r1, #0
 80a1262:	b280      	uxth	r0, r0
 80a1264:	f002 fb86 	bl	80a3974 <pinMode>
 80a1268:	e7c4      	b.n	80a11f4 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
 80a126a:	4620      	mov	r0, r4
 80a126c:	f7ff feb1 	bl	80a0fd2 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
 80a1270:	2305      	movs	r3, #5
 80a1272:	2103      	movs	r1, #3
 80a1274:	461a      	mov	r2, r3
 80a1276:	4620      	mov	r0, r4
 80a1278:	9300      	str	r3, [sp, #0]
 80a127a:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80a127e:	f7ff ff65 	bl	80a114c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
 80a1282:	2064      	movs	r0, #100	; 0x64
 80a1284:	f001 ff80 	bl	80a3188 <delay>
 80a1288:	2001      	movs	r0, #1
}
 80a128a:	b005      	add	sp, #20
 80a128c:	bd30      	pop	{r4, r5, pc}
        return false;
 80a128e:	2000      	movs	r0, #0
 80a1290:	e7fb      	b.n	80a128a <_ZN15Adafruit_BME2804initEv+0xaa>

080a1292 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
 80a1292:	2377      	movs	r3, #119	; 0x77
{
 80a1294:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
 80a1296:	7103      	strb	r3, [r0, #4]
{
 80a1298:	4604      	mov	r4, r0
	_wire = &Wire;
 80a129a:	f002 fbd1 	bl	80a3a40 <_Z19__fetch_global_Wirev>
 80a129e:	6020      	str	r0, [r4, #0]
	status = init();
 80a12a0:	4620      	mov	r0, r4
 80a12a2:	f7ff ff9d 	bl	80a11e0 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
 80a12a6:	b930      	cbnz	r0, 80a12b6 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 80a12a8:	2376      	movs	r3, #118	; 0x76
 		status = init();
 80a12aa:	4620      	mov	r0, r4
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 80a12ac:	7123      	strb	r3, [r4, #4]
}
 80a12ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
 80a12b2:	f7ff bf95 	b.w	80a11e0 <_ZN15Adafruit_BME2804initEv>
}
 80a12b6:	bd10      	pop	{r4, pc}

080a12b8 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
 80a12b8:	b510      	push	{r4, lr}
 80a12ba:	4604      	mov	r4, r0
  if (_spiSetting) {
 80a12bc:	6840      	ldr	r0, [r0, #4]
 80a12be:	b110      	cbz	r0, 80a12c6 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
 80a12c0:	6803      	ldr	r3, [r0, #0]
 80a12c2:	689b      	ldr	r3, [r3, #8]
 80a12c4:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
 80a12c6:	4620      	mov	r0, r4
 80a12c8:	bd10      	pop	{r4, pc}

080a12ca <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
 80a12ca:	b538      	push	{r3, r4, r5, lr}
 80a12cc:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
 80a12ce:	f990 000e 	ldrsb.w	r0, [r0, #14]
 80a12d2:	2101      	movs	r1, #1
 80a12d4:	b280      	uxth	r0, r0
 80a12d6:	f002 fb4d 	bl	80a3974 <pinMode>
  digitalWrite(_cs, HIGH);
 80a12da:	f994 000e 	ldrsb.w	r0, [r4, #14]
 80a12de:	2101      	movs	r1, #1
 80a12e0:	b280      	uxth	r0, r0
 80a12e2:	f002 fb58 	bl	80a3996 <digitalWrite>

  if (_spi) { // hardware SPI
 80a12e6:	6825      	ldr	r5, [r4, #0]
 80a12e8:	b135      	cbz	r5, 80a12f8 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
 80a12ea:	4628      	mov	r0, r5
 80a12ec:	f001 fd08 	bl	80a2d00 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
 80a12f0:	2001      	movs	r0, #1
 80a12f2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
 80a12f6:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
 80a12f8:	f994 000f 	ldrsb.w	r0, [r4, #15]
 80a12fc:	2101      	movs	r1, #1
 80a12fe:	b280      	uxth	r0, r0
 80a1300:	f002 fb38 	bl	80a3974 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
 80a1304:	7b63      	ldrb	r3, [r4, #13]
 80a1306:	f994 000f 	ldrsb.w	r0, [r4, #15]
 80a130a:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
 80a130c:	bf94      	ite	ls
 80a130e:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
 80a1310:	2101      	movhi	r1, #1
 80a1312:	b280      	uxth	r0, r0
 80a1314:	f002 fb3f 	bl	80a3996 <digitalWrite>
    if (_mosi != -1) {
 80a1318:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a131c:	1c42      	adds	r2, r0, #1
 80a131e:	d009      	beq.n	80a1334 <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
 80a1320:	2101      	movs	r1, #1
 80a1322:	b280      	uxth	r0, r0
 80a1324:	f002 fb26 	bl	80a3974 <pinMode>
      digitalWrite(_mosi, HIGH);
 80a1328:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a132c:	2101      	movs	r1, #1
 80a132e:	b280      	uxth	r0, r0
 80a1330:	f002 fb31 	bl	80a3996 <digitalWrite>
    if (_miso != -1) {
 80a1334:	f994 0011 	ldrsb.w	r0, [r4, #17]
 80a1338:	1c43      	adds	r3, r0, #1
 80a133a:	d0d9      	beq.n	80a12f0 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
 80a133c:	2100      	movs	r1, #0
 80a133e:	b280      	uxth	r0, r0
 80a1340:	f002 fb18 	bl	80a3974 <pinMode>
 80a1344:	e7d4      	b.n	80a12f0 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

080a1348 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 80a1348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a134c:	4604      	mov	r4, r0
  if (_spi) {
 80a134e:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 80a1350:	460d      	mov	r5, r1
 80a1352:	4613      	mov	r3, r2
 80a1354:	b085      	sub	sp, #20
  if (_spi) {
 80a1356:	b138      	cbz	r0, 80a1368 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
 80a1358:	2200      	movs	r2, #0
 80a135a:	9200      	str	r2, [sp, #0]
 80a135c:	460a      	mov	r2, r1
 80a135e:	f001 fd69 	bl	80a2e34 <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
 80a1362:	b005      	add	sp, #20
 80a1364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
 80a1368:	7b22      	ldrb	r2, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 80a136a:	68a0      	ldr	r0, [r4, #8]
    startbit = 0x80;
 80a136c:	2a00      	cmp	r2, #0
 80a136e:	bf0c      	ite	eq
 80a1370:	f04f 0b01 	moveq.w	fp, #1
 80a1374:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
 80a1378:	780a      	ldrb	r2, [r1, #0]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 80a137a:	4f44      	ldr	r7, [pc, #272]	; (80a148c <_ZN18Adafruit_SPIDevice8transferEPhj+0x144>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
 80a137c:	ea1b 0f02 	tst.w	fp, r2
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 80a1380:	fbb7 f7f0 	udiv	r7, r7, r0
  bool towrite, lastmosi = !(buffer[0] & startbit);
 80a1384:	bf0c      	ite	eq
 80a1386:	f04f 0901 	moveq.w	r9, #1
 80a138a:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 80a138e:	18cb      	adds	r3, r1, r3
 80a1390:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
 80a1392:	9303      	str	r3, [sp, #12]
 80a1394:	9b03      	ldr	r3, [sp, #12]
 80a1396:	42ab      	cmp	r3, r5
 80a1398:	d0e3      	beq.n	80a1362 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    for (uint8_t b = startbit; b != 0;
 80a139a:	465e      	mov	r6, fp
    uint8_t reply = 0;
 80a139c:	f04f 0800 	mov.w	r8, #0
    uint8_t send = buffer[i];
 80a13a0:	f895 a000 	ldrb.w	sl, [r5]
      if (bitdelay_us) {
 80a13a4:	b117      	cbz	r7, 80a13ac <_ZN18Adafruit_SPIDevice8transferEPhj+0x64>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a13a6:	4638      	mov	r0, r7
 80a13a8:	f001 fa78 	bl	80a289c <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
 80a13ac:	7b63      	ldrb	r3, [r4, #13]
 80a13ae:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80a13b2:	d141      	bne.n	80a1438 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf0>
        if ((_mosi != -1) && (lastmosi != towrite)) {
 80a13b4:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80a13b8:	1c5a      	adds	r2, r3, #1
 80a13ba:	d00f      	beq.n	80a13dc <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        towrite = send & b;
 80a13bc:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
 80a13c0:	bf14      	ite	ne
 80a13c2:	2301      	movne	r3, #1
 80a13c4:	2300      	moveq	r3, #0
 80a13c6:	454b      	cmp	r3, r9
 80a13c8:	d008      	beq.n	80a13dc <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
          if (towrite)
 80a13ca:	6963      	ldr	r3, [r4, #20]
 80a13cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
 80a13ce:	681a      	ldr	r2, [r3, #0]
          if (towrite)
 80a13d0:	2900      	cmp	r1, #0
 80a13d2:	d02c      	beq.n	80a142e <_ZN18Adafruit_SPIDevice8transferEPhj+0xe6>
            *mosiPort |= mosiPinMask;
 80a13d4:	f04f 0901 	mov.w	r9, #1
 80a13d8:	4302      	orrs	r2, r0
 80a13da:	601a      	str	r2, [r3, #0]
        *clkPort |= clkPinMask; // Clock high
 80a13dc:	69a1      	ldr	r1, [r4, #24]
 80a13de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a13e0:	680a      	ldr	r2, [r1, #0]
 80a13e2:	4313      	orrs	r3, r2
 80a13e4:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 80a13e6:	b117      	cbz	r7, 80a13ee <_ZN18Adafruit_SPIDevice8transferEPhj+0xa6>
 80a13e8:	4638      	mov	r0, r7
 80a13ea:	f001 fa57 	bl	80a289c <HAL_Delay_Microseconds>
        if (_miso != -1) {
 80a13ee:	f994 3011 	ldrsb.w	r3, [r4, #17]
 80a13f2:	3301      	adds	r3, #1
 80a13f4:	d006      	beq.n	80a1404 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbc>
          if (*misoPort & misoPinMask) {
 80a13f6:	69e3      	ldr	r3, [r4, #28]
 80a13f8:	681a      	ldr	r2, [r3, #0]
 80a13fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a13fc:	421a      	tst	r2, r3
            reply |= b;
 80a13fe:	bf18      	it	ne
 80a1400:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
 80a1404:	69a1      	ldr	r1, [r4, #24]
 80a1406:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a1408:	680a      	ldr	r2, [r1, #0]
 80a140a:	ea22 0303 	bic.w	r3, r2, r3
 80a140e:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
 80a1410:	f994 3011 	ldrsb.w	r3, [r4, #17]
 80a1414:	3301      	adds	r3, #1
        buffer[i] = reply;
 80a1416:	bf18      	it	ne
 80a1418:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
 80a141c:	7b23      	ldrb	r3, [r4, #12]
 80a141e:	2b00      	cmp	r3, #0
 80a1420:	d132      	bne.n	80a1488 <_ZN18Adafruit_SPIDevice8transferEPhj+0x140>
 80a1422:	0076      	lsls	r6, r6, #1
 80a1424:	b2f6      	uxtb	r6, r6
 80a1426:	2e00      	cmp	r6, #0
 80a1428:	d1bc      	bne.n	80a13a4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5c>
  for (size_t i = 0; i < len; i++) {
 80a142a:	3501      	adds	r5, #1
 80a142c:	e7b2      	b.n	80a1394 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4c>
            *mosiPort &= ~mosiPinMask;
 80a142e:	ea22 0200 	bic.w	r2, r2, r0
 80a1432:	4689      	mov	r9, r1
 80a1434:	601a      	str	r2, [r3, #0]
 80a1436:	e7d1      	b.n	80a13dc <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        *clkPort |= clkPinMask; // Clock high
 80a1438:	69a1      	ldr	r1, [r4, #24]
 80a143a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a143c:	680a      	ldr	r2, [r1, #0]
 80a143e:	4313      	orrs	r3, r2
 80a1440:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 80a1442:	b117      	cbz	r7, 80a144a <_ZN18Adafruit_SPIDevice8transferEPhj+0x102>
 80a1444:	4638      	mov	r0, r7
 80a1446:	f001 fa29 	bl	80a289c <HAL_Delay_Microseconds>
        if (_mosi != -1) {
 80a144a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80a144e:	3301      	adds	r3, #1
 80a1450:	d008      	beq.n	80a1464 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11c>
          if (send & b)
 80a1452:	6963      	ldr	r3, [r4, #20]
 80a1454:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
 80a1456:	681a      	ldr	r2, [r3, #0]
          if (send & b)
 80a1458:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
 80a145c:	bf14      	ite	ne
 80a145e:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
 80a1460:	438a      	biceq	r2, r1
 80a1462:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
 80a1464:	69a1      	ldr	r1, [r4, #24]
 80a1466:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a1468:	680a      	ldr	r2, [r1, #0]
 80a146a:	ea22 0303 	bic.w	r3, r2, r3
 80a146e:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
 80a1470:	f994 3011 	ldrsb.w	r3, [r4, #17]
 80a1474:	3301      	adds	r3, #1
 80a1476:	d0cb      	beq.n	80a1410 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
          if (*misoPort & misoPinMask) {
 80a1478:	69e3      	ldr	r3, [r4, #28]
 80a147a:	681a      	ldr	r2, [r3, #0]
 80a147c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a147e:	421a      	tst	r2, r3
            reply |= b;
 80a1480:	bf18      	it	ne
 80a1482:	ea46 0808 	orrne.w	r8, r6, r8
 80a1486:	e7c3      	b.n	80a1410 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
    for (uint8_t b = startbit; b != 0;
 80a1488:	0876      	lsrs	r6, r6, #1
 80a148a:	e7cc      	b.n	80a1426 <_ZN18Adafruit_SPIDevice8transferEPhj+0xde>
 80a148c:	0007a120 	.word	0x0007a120

080a1490 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
 80a1490:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
 80a1492:	2201      	movs	r2, #1
  uint8_t data = send;
 80a1494:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
 80a1498:	f10d 0107 	add.w	r1, sp, #7
 80a149c:	f7ff ff54 	bl	80a1348 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
 80a14a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a14a4:	b003      	add	sp, #12
 80a14a6:	f85d fb04 	ldr.w	pc, [sp], #4

080a14aa <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
 80a14aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a14ae:	4604      	mov	r4, r0
  if (_spi) {
 80a14b0:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
 80a14b2:	460e      	mov	r6, r1
 80a14b4:	4617      	mov	r7, r2
 80a14b6:	461d      	mov	r5, r3
  if (_spi) {
 80a14b8:	b110      	cbz	r0, 80a14c0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
 80a14ba:	6861      	ldr	r1, [r4, #4]
 80a14bc:	f001 fc48 	bl	80a2d50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 80a14c0:	f994 000e 	ldrsb.w	r0, [r4, #14]
 80a14c4:	2100      	movs	r1, #0
 80a14c6:	b280      	uxth	r0, r0
 80a14c8:	f002 fa65 	bl	80a3996 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
 80a14cc:	9b06      	ldr	r3, [sp, #24]
 80a14ce:	eb05 0803 	add.w	r8, r5, r3
 80a14d2:	4545      	cmp	r5, r8
 80a14d4:	d108      	bne.n	80a14e8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
 80a14d6:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
 80a14d8:	42b7      	cmp	r7, r6
 80a14da:	d00b      	beq.n	80a14f4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
 80a14dc:	4620      	mov	r0, r4
 80a14de:	f816 1b01 	ldrb.w	r1, [r6], #1
 80a14e2:	f7ff ffd5 	bl	80a1490 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
 80a14e6:	e7f7      	b.n	80a14d8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
 80a14e8:	4620      	mov	r0, r4
 80a14ea:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a14ee:	f7ff ffcf 	bl	80a1490 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
 80a14f2:	e7ee      	b.n	80a14d2 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
 80a14f4:	f994 000e 	ldrsb.w	r0, [r4, #14]
 80a14f8:	2101      	movs	r1, #1
 80a14fa:	b280      	uxth	r0, r0
 80a14fc:	f002 fa4b 	bl	80a3996 <digitalWrite>

  if (_spi) {
 80a1500:	6820      	ldr	r0, [r4, #0]
 80a1502:	b108      	cbz	r0, 80a1508 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
 80a1504:	f001 fc0a 	bl	80a2d1c <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 80a1508:	2001      	movs	r0, #1
 80a150a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a150e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 80a150e:	6042      	str	r2, [r0, #4]
  _begun = false;
 80a1510:	2200      	movs	r2, #0
 80a1512:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
 80a1514:	2220      	movs	r2, #32
  _addr = addr;
 80a1516:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 80a1518:	60c2      	str	r2, [r0, #12]
#endif
}
 80a151a:	4770      	bx	lr

080a151c <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 80a151c:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 80a151e:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 80a1520:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 80a1522:	b153      	cbz	r3, 80a153a <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 80a1524:	7821      	ldrb	r1, [r4, #0]
 80a1526:	6860      	ldr	r0, [r4, #4]
 80a1528:	f002 f906 	bl	80a3738 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 80a152c:	6860      	ldr	r0, [r4, #4]
 80a152e:	f002 f90b 	bl	80a3748 <_ZN7TwoWire15endTransmissionEv>
 80a1532:	fab0 f080 	clz	r0, r0
 80a1536:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 80a1538:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 80a153a:	2101      	movs	r1, #1
 80a153c:	f000 f803 	bl	80a1546 <_ZN18Adafruit_I2CDevice5beginEb>
 80a1540:	2800      	cmp	r0, #0
 80a1542:	d1ef      	bne.n	80a1524 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 80a1544:	e7f8      	b.n	80a1538 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

080a1546 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80a1546:	b538      	push	{r3, r4, r5, lr}
 80a1548:	4604      	mov	r4, r0
  _wire->begin();
 80a154a:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80a154c:	460d      	mov	r5, r1
  _wire->begin();
 80a154e:	f002 f8c1 	bl	80a36d4 <_ZN7TwoWire5beginEv>
  _begun = true;
 80a1552:	2001      	movs	r0, #1
 80a1554:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 80a1556:	b125      	cbz	r5, 80a1562 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 80a1558:	4620      	mov	r0, r4
}
 80a155a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 80a155e:	f7ff bfdd 	b.w	80a151c <_ZN18Adafruit_I2CDevice8detectedEv>
}
 80a1562:	bd38      	pop	{r3, r4, r5, pc}

080a1564 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 80a1564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1568:	461f      	mov	r7, r3
 80a156a:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 80a156e:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 80a1570:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 80a1572:	4432      	add	r2, r6
 80a1574:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 80a1576:	4604      	mov	r4, r0
 80a1578:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 80a157a:	d902      	bls.n	80a1582 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 80a157c:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
 80a157e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 80a1582:	7801      	ldrb	r1, [r0, #0]
 80a1584:	6840      	ldr	r0, [r0, #4]
 80a1586:	f002 f8d7 	bl	80a3738 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a158a:	b97e      	cbnz	r6, 80a15ac <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 80a158c:	6860      	ldr	r0, [r4, #4]
 80a158e:	462a      	mov	r2, r5
 80a1590:	6803      	ldr	r3, [r0, #0]
 80a1592:	4641      	mov	r1, r8
 80a1594:	68db      	ldr	r3, [r3, #12]
 80a1596:	4798      	blx	r3
 80a1598:	4285      	cmp	r5, r0
 80a159a:	d1ef      	bne.n	80a157c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 80a159c:	4639      	mov	r1, r7
 80a159e:	6860      	ldr	r0, [r4, #4]
 80a15a0:	f002 f8ce 	bl	80a3740 <_ZN7TwoWire15endTransmissionEh>
 80a15a4:	fab0 f080 	clz	r0, r0
 80a15a8:	0940      	lsrs	r0, r0, #5
 80a15aa:	e7e8      	b.n	80a157e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a15ac:	f1b9 0f00 	cmp.w	r9, #0
 80a15b0:	d0ec      	beq.n	80a158c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
 80a15b2:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 80a15b4:	4632      	mov	r2, r6
 80a15b6:	6803      	ldr	r3, [r0, #0]
 80a15b8:	4649      	mov	r1, r9
 80a15ba:	68db      	ldr	r3, [r3, #12]
 80a15bc:	4798      	blx	r3
 80a15be:	42b0      	cmp	r0, r6
 80a15c0:	d1dc      	bne.n	80a157c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 80a15c2:	e7e3      	b.n	80a158c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

080a15c4 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
 80a15c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a15c8:	4615      	mov	r5, r2
 80a15ca:	4604      	mov	r4, r0
 80a15cc:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 80a15ce:	b2d2      	uxtb	r2, r2
 80a15d0:	7801      	ldrb	r1, [r0, #0]
 80a15d2:	6840      	ldr	r0, [r0, #4]
 80a15d4:	f002 f89b 	bl	80a370e <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 80a15d8:	4285      	cmp	r5, r0
 80a15da:	d10d      	bne.n	80a15f8 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
 80a15dc:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 80a15de:	fa1f f887 	uxth.w	r8, r7
 80a15e2:	45a8      	cmp	r8, r5
 80a15e4:	f107 0701 	add.w	r7, r7, #1
 80a15e8:	d209      	bcs.n	80a15fe <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
 80a15ea:	6860      	ldr	r0, [r4, #4]
 80a15ec:	6803      	ldr	r3, [r0, #0]
 80a15ee:	695b      	ldr	r3, [r3, #20]
 80a15f0:	4798      	blx	r3
 80a15f2:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 80a15f6:	e7f2      	b.n	80a15de <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
 80a15f8:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 80a15fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a15fe:	2001      	movs	r0, #1
 80a1600:	e7fb      	b.n	80a15fa <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

080a1602 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 80a1602:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1606:	4607      	mov	r7, r0
 80a1608:	4688      	mov	r8, r1
 80a160a:	4616      	mov	r6, r2
 80a160c:	4699      	mov	r9, r3
  size_t pos = 0;
 80a160e:	2500      	movs	r5, #0
  while (pos < len) {
 80a1610:	42b5      	cmp	r5, r6
 80a1612:	d212      	bcs.n	80a163a <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
 80a1614:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
 80a1616:	1b74      	subs	r4, r6, r5
 80a1618:	4294      	cmp	r4, r2
 80a161a:	bf28      	it	cs
 80a161c:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
 80a161e:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
 80a1620:	42ab      	cmp	r3, r5
 80a1622:	bf94      	ite	ls
 80a1624:	464b      	movls	r3, r9
 80a1626:	2300      	movhi	r3, #0
 80a1628:	4622      	mov	r2, r4
 80a162a:	4638      	mov	r0, r7
 80a162c:	eb08 0105 	add.w	r1, r8, r5
 80a1630:	f7ff ffc8 	bl	80a15c4 <_ZN18Adafruit_I2CDevice5_readEPhjb>
 80a1634:	b110      	cbz	r0, 80a163c <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
 80a1636:	4425      	add	r5, r4
  while (pos < len) {
 80a1638:	e7ea      	b.n	80a1610 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
 80a163a:	2001      	movs	r0, #1
}
 80a163c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a1640 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
 80a1640:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1642:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
 80a1644:	2300      	movs	r3, #0
 80a1646:	e9cd 3300 	strd	r3, r3, [sp]
 80a164a:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
 80a164e:	4604      	mov	r4, r0
 80a1650:	9e06      	ldr	r6, [sp, #24]
  if (!write(write_buffer, write_len, stop)) {
 80a1652:	f7ff ff87 	bl	80a1564 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 80a1656:	b140      	cbz	r0, 80a166a <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
 80a1658:	2301      	movs	r3, #1
 80a165a:	4632      	mov	r2, r6
 80a165c:	4629      	mov	r1, r5
 80a165e:	4620      	mov	r0, r4
}
 80a1660:	b002      	add	sp, #8
 80a1662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
 80a1666:	f7ff bfcc 	b.w	80a1602 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
 80a166a:	b002      	add	sp, #8
 80a166c:	bd70      	pop	{r4, r5, r6, pc}

080a166e <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
 80a166e:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 80a1670:	6840      	ldr	r0, [r0, #4]
 80a1672:	f002 f82b 	bl	80a36cc <_ZN7TwoWire8setSpeedEm>
  return true;
#else
  (void)desiredclk;
  return false;
#endif
}
 80a1676:	2001      	movs	r0, #1
 80a1678:	bd08      	pop	{r3, pc}

080a167a <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80a167a:	4770      	bx	lr

080a167c <_ZN15Adafruit_BNO055D1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 *          BNO055 Sensor
 */
class Adafruit_BNO055 : public Adafruit_Sensor {
 80a167c:	4770      	bx	lr
	...

080a1680 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 *          Sensor description
 */
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
 80a1680:	460b      	mov	r3, r1
 80a1682:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 80a1684:	2228      	movs	r2, #40	; 0x28
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
 80a1686:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
 80a1688:	2100      	movs	r1, #0
 80a168a:	4618      	mov	r0, r3
 80a168c:	f004 fcba 	bl	80a6004 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
 80a1690:	220b      	movs	r2, #11
 80a1692:	4909      	ldr	r1, [pc, #36]	; (80a16b8 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x38>)
 80a1694:	f004 fcea 	bl	80a606c <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
 80a1698:	2200      	movs	r2, #0
  sensor->version = 1;
 80a169a:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name) - 1] = 0;
 80a169c:	72c2      	strb	r2, [r0, #11]
  sensor->version = 1;
 80a169e:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id = _sensorID;
 80a16a0:	68e1      	ldr	r1, [r4, #12]
  sensor->type = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay = 0;
 80a16a2:	6242      	str	r2, [r0, #36]	; 0x24
  sensor->max_value = 0.0F;
 80a16a4:	2200      	movs	r2, #0
  sensor->sensor_id = _sensorID;
 80a16a6:	6101      	str	r1, [r0, #16]
  sensor->type = SENSOR_TYPE_ORIENTATION;
 80a16a8:	2103      	movs	r1, #3
  sensor->max_value = 0.0F;
 80a16aa:	6182      	str	r2, [r0, #24]
  sensor->min_value = 0.0F;
 80a16ac:	61c2      	str	r2, [r0, #28]
  sensor->resolution = 0.01F;
 80a16ae:	4a03      	ldr	r2, [pc, #12]	; (80a16bc <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x3c>)
  sensor->type = SENSOR_TYPE_ORIENTATION;
 80a16b0:	6141      	str	r1, [r0, #20]
  sensor->resolution = 0.01F;
 80a16b2:	6202      	str	r2, [r0, #32]
}
 80a16b4:	bd10      	pop	{r4, pc}
 80a16b6:	bf00      	nop
 80a16b8:	080a6514 	.word	0x080a6514
 80a16bc:	3c23d70a 	.word	0x3c23d70a

080a16c0 <_ZN15Adafruit_BNO055D0Ev>:
 80a16c0:	b510      	push	{r4, lr}
 80a16c2:	4604      	mov	r4, r0
 80a16c4:	2114      	movs	r1, #20
 80a16c6:	f002 f9df 	bl	80a3a88 <_ZdlPvj>
 80a16ca:	4620      	mov	r0, r4
 80a16cc:	bd10      	pop	{r4, pc}
	...

080a16d0 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
 80a16d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a16d2:	461f      	mov	r7, r3
                                 TwoWire *theWire) {
 80a16d4:	4b09      	ldr	r3, [pc, #36]	; (80a16fc <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x2c>)
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
 80a16d6:	4604      	mov	r4, r0
                                 TwoWire *theWire) {
 80a16d8:	6003      	str	r3, [r0, #0]
 80a16da:	2300      	movs	r3, #0
  _sensorID = sensorID;
 80a16dc:	e9c0 3102 	strd	r3, r1, [r0, #8]
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
 80a16e0:	2010      	movs	r0, #16
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
 80a16e2:	4616      	mov	r6, r2
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
 80a16e4:	f7fe fcd9 	bl	80a009a <_Znwj>
 80a16e8:	4605      	mov	r5, r0
 80a16ea:	b118      	cbz	r0, 80a16f4 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x24>
 80a16ec:	463a      	mov	r2, r7
 80a16ee:	4631      	mov	r1, r6
 80a16f0:	f7ff ff0d 	bl	80a150e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
}
 80a16f4:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
 80a16f6:	60a5      	str	r5, [r4, #8]
}
 80a16f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a16fa:	bf00      	nop
 80a16fc:	080a6524 	.word	0x080a6524

080a1700 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
}

/*!
 *  @brief  Writes an 8 bit value over I2C
 */
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value) {
 80a1700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
  return i2c_dev->write(buffer, 2);
 80a1702:	2300      	movs	r3, #0
 80a1704:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
 80a1708:	f88d 100c 	strb.w	r1, [sp, #12]
 80a170c:	f88d 200d 	strb.w	r2, [sp, #13]
  return i2c_dev->write(buffer, 2);
 80a1710:	2301      	movs	r3, #1
 80a1712:	2202      	movs	r2, #2
 80a1714:	a903      	add	r1, sp, #12
 80a1716:	6880      	ldr	r0, [r0, #8]
 80a1718:	f7ff ff24 	bl	80a1564 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 80a171c:	b005      	add	sp, #20
 80a171e:	f85d fb04 	ldr.w	pc, [sp], #4

080a1722 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode) {
 80a1722:	b508      	push	{r3, lr}
 80a1724:	460a      	mov	r2, r1
  _mode = mode;
 80a1726:	7401      	strb	r1, [r0, #16]
  write8(BNO055_OPR_MODE_ADDR, _mode);
 80a1728:	213d      	movs	r1, #61	; 0x3d
 80a172a:	f7ff ffe9 	bl	80a1700 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
}
 80a172e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(30);
 80a1732:	201e      	movs	r0, #30
 80a1734:	f001 bd28 	b.w	80a3188 <delay>

080a1738 <_ZN15Adafruit_BNO05516setExtCrystalUseEb>:
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
 80a1738:	b570      	push	{r4, r5, r6, lr}
 80a173a:	4604      	mov	r4, r0
 80a173c:	460d      	mov	r5, r1
  setMode(OPERATION_MODE_CONFIG);
 80a173e:	2100      	movs	r1, #0
  adafruit_bno055_opmode_t modeback = _mode;
 80a1740:	7c06      	ldrb	r6, [r0, #16]
  setMode(OPERATION_MODE_CONFIG);
 80a1742:	f7ff ffee 	bl	80a1722 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
 80a1746:	2019      	movs	r0, #25
 80a1748:	f001 fd1e 	bl	80a3188 <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
 80a174c:	2200      	movs	r2, #0
 80a174e:	2107      	movs	r1, #7
 80a1750:	4620      	mov	r0, r4
 80a1752:	f7ff ffd5 	bl	80a1700 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (usextal) {
 80a1756:	b185      	cbz	r5, 80a177a <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x42>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x80);
 80a1758:	2280      	movs	r2, #128	; 0x80
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
 80a175a:	213f      	movs	r1, #63	; 0x3f
 80a175c:	4620      	mov	r0, r4
 80a175e:	f7ff ffcf 	bl	80a1700 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
 80a1762:	200a      	movs	r0, #10
 80a1764:	f001 fd10 	bl	80a3188 <delay>
  setMode(modeback);
 80a1768:	4620      	mov	r0, r4
 80a176a:	4631      	mov	r1, r6
 80a176c:	f7ff ffd9 	bl	80a1722 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
}
 80a1770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(20);
 80a1774:	2014      	movs	r0, #20
 80a1776:	f001 bd07 	b.w	80a3188 <delay>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
 80a177a:	462a      	mov	r2, r5
 80a177c:	e7ed      	b.n	80a175a <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x22>

080a177e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:

/*!
 *  @brief  Reads an 8 bit value over I2C
 */
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg) {
 80a177e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[1] = {reg};
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
 80a1780:	2201      	movs	r2, #1
 80a1782:	2300      	movs	r3, #0
 80a1784:	e9cd 2300 	strd	r2, r3, [sp]
 80a1788:	ab03      	add	r3, sp, #12
  uint8_t buffer[1] = {reg};
 80a178a:	f88d 100c 	strb.w	r1, [sp, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
 80a178e:	6880      	ldr	r0, [r0, #8]
 80a1790:	4619      	mov	r1, r3
 80a1792:	f7ff ff55 	bl	80a1640 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
  return (byte)buffer[0];
}
 80a1796:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80a179a:	b005      	add	sp, #20
 80a179c:	f85d fb04 	ldr.w	pc, [sp], #4

080a17a0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
 80a17a0:	b570      	push	{r4, r5, r6, lr}
 80a17a2:	4604      	mov	r4, r0
 80a17a4:	460e      	mov	r6, r1
  if (!i2c_dev->begin()) {
 80a17a6:	6880      	ldr	r0, [r0, #8]
 80a17a8:	2101      	movs	r1, #1
 80a17aa:	f7ff fecc 	bl	80a1546 <_ZN18Adafruit_I2CDevice5beginEb>
 80a17ae:	4605      	mov	r5, r0
 80a17b0:	b910      	cbnz	r0, 80a17b8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x18>
    return false;
 80a17b2:	2500      	movs	r5, #0
}
 80a17b4:	4628      	mov	r0, r5
 80a17b6:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
 80a17b8:	2100      	movs	r1, #0
 80a17ba:	4620      	mov	r0, r4
 80a17bc:	f7ff ffdf 	bl	80a177e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (id != BNO055_ID) {
 80a17c0:	28a0      	cmp	r0, #160	; 0xa0
 80a17c2:	d113      	bne.n	80a17ec <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x4c>
  setMode(OPERATION_MODE_CONFIG);
 80a17c4:	2100      	movs	r1, #0
 80a17c6:	4620      	mov	r0, r4
 80a17c8:	f7ff ffab 	bl	80a1722 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
 80a17cc:	2220      	movs	r2, #32
 80a17ce:	213f      	movs	r1, #63	; 0x3f
 80a17d0:	4620      	mov	r0, r4
 80a17d2:	f7ff ff95 	bl	80a1700 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
 80a17d6:	201e      	movs	r0, #30
    delay(10);
 80a17d8:	f001 fcd6 	bl	80a3188 <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
 80a17dc:	2100      	movs	r1, #0
 80a17de:	4620      	mov	r0, r4
 80a17e0:	f7ff ffcd 	bl	80a177e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80a17e4:	28a0      	cmp	r0, #160	; 0xa0
 80a17e6:	d00c      	beq.n	80a1802 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x62>
    delay(10);
 80a17e8:	200a      	movs	r0, #10
 80a17ea:	e7f5      	b.n	80a17d8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x38>
    delay(1000); // hold on for boot
 80a17ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a17f0:	f001 fcca 	bl	80a3188 <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
 80a17f4:	2100      	movs	r1, #0
 80a17f6:	4620      	mov	r0, r4
 80a17f8:	f7ff ffc1 	bl	80a177e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if (id != BNO055_ID) {
 80a17fc:	28a0      	cmp	r0, #160	; 0xa0
 80a17fe:	d1d8      	bne.n	80a17b2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x12>
 80a1800:	e7e0      	b.n	80a17c4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x24>
  delay(50);
 80a1802:	2032      	movs	r0, #50	; 0x32
 80a1804:	f001 fcc0 	bl	80a3188 <delay>
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
 80a1808:	2200      	movs	r2, #0
 80a180a:	213e      	movs	r1, #62	; 0x3e
 80a180c:	4620      	mov	r0, r4
 80a180e:	f7ff ff77 	bl	80a1700 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
 80a1812:	200a      	movs	r0, #10
 80a1814:	f001 fcb8 	bl	80a3188 <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
 80a1818:	2200      	movs	r2, #0
 80a181a:	2107      	movs	r1, #7
 80a181c:	4620      	mov	r0, r4
 80a181e:	f7ff ff6f 	bl	80a1700 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
 80a1822:	2200      	movs	r2, #0
 80a1824:	213f      	movs	r1, #63	; 0x3f
 80a1826:	4620      	mov	r0, r4
 80a1828:	f7ff ff6a 	bl	80a1700 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
 80a182c:	200a      	movs	r0, #10
 80a182e:	f001 fcab 	bl	80a3188 <delay>
  setMode(mode);
 80a1832:	4620      	mov	r0, r4
 80a1834:	4631      	mov	r1, r6
 80a1836:	f7ff ff74 	bl	80a1722 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
 80a183a:	2014      	movs	r0, #20
 80a183c:	f001 fca4 	bl	80a3188 <delay>
  return true;
 80a1840:	e7b8      	b.n	80a17b4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x14>

080a1842 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_>:
                                     uint8_t *accel, uint8_t *mag) {
 80a1842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1844:	460e      	mov	r6, r1
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
 80a1846:	2135      	movs	r1, #53	; 0x35
                                     uint8_t *accel, uint8_t *mag) {
 80a1848:	4615      	mov	r5, r2
 80a184a:	461c      	mov	r4, r3
 80a184c:	9f06      	ldr	r7, [sp, #24]
  uint8_t calData = read8(BNO055_CALIB_STAT_ADDR);
 80a184e:	f7ff ff96 	bl	80a177e <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (sys != NULL) {
 80a1852:	b10e      	cbz	r6, 80a1858 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x16>
    *sys = (calData >> 6) & 0x03;
 80a1854:	0983      	lsrs	r3, r0, #6
 80a1856:	7033      	strb	r3, [r6, #0]
  if (gyro != NULL) {
 80a1858:	b115      	cbz	r5, 80a1860 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x1e>
    *gyro = (calData >> 4) & 0x03;
 80a185a:	f3c0 1301 	ubfx	r3, r0, #4, #2
 80a185e:	702b      	strb	r3, [r5, #0]
  if (accel != NULL) {
 80a1860:	b114      	cbz	r4, 80a1868 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x26>
    *accel = (calData >> 2) & 0x03;
 80a1862:	f3c0 0381 	ubfx	r3, r0, #2, #2
 80a1866:	7023      	strb	r3, [r4, #0]
  if (mag != NULL) {
 80a1868:	b117      	cbz	r7, 80a1870 <_ZN15Adafruit_BNO05514getCalibrationEPhS0_S0_S0_+0x2e>
    *mag = calData & 0x03;
 80a186a:	f000 0003 	and.w	r0, r0, #3
 80a186e:	7038      	strb	r0, [r7, #0]
}
 80a1870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1872 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:

/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte *buffer,
                              uint8_t len) {
 80a1872:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t reg_buf[1] = {(uint8_t)reg};
 80a1874:	f88d 100c 	strb.w	r1, [sp, #12]
  return i2c_dev->write_then_read(reg_buf, 1, buffer, len);
 80a1878:	2100      	movs	r1, #0
 80a187a:	e9cd 3100 	strd	r3, r1, [sp]
 80a187e:	4613      	mov	r3, r2
 80a1880:	a903      	add	r1, sp, #12
 80a1882:	2201      	movs	r2, #1
 80a1884:	6880      	ldr	r0, [r0, #8]
 80a1886:	f7ff fedb 	bl	80a1640 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
}
 80a188a:	b005      	add	sp, #20
 80a188c:	f85d fb04 	ldr.w	pc, [sp], #4

080a1890 <_ZN15Adafruit_BNO0557getQuatEv>:
  memset(buffer, 0, 8);
 80a1890:	2300      	movs	r3, #0
imu::Quaternion Adafruit_BNO055::getQuat() {
 80a1892:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a1896:	4682      	mov	sl, r0
  readLen(BNO055_QUATERNION_DATA_W_LSB_ADDR, buffer, 8);
 80a1898:	466a      	mov	r2, sp
  memset(buffer, 0, 8);
 80a189a:	e9cd 3300 	strd	r3, r3, [sp]
imu::Quaternion Adafruit_BNO055::getQuat() {
 80a189e:	4608      	mov	r0, r1
  readLen(BNO055_QUATERNION_DATA_W_LSB_ADDR, buffer, 8);
 80a18a0:	2308      	movs	r3, #8
 80a18a2:	2120      	movs	r1, #32
 80a18a4:	f7ff ffe5 	bl	80a1872 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  w = (((uint16_t)buffer[1]) << 8) | ((uint16_t)buffer[0]);
 80a18a8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a18ac:	f89d 0000 	ldrb.w	r0, [sp]
 80a18b0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
 80a18b4:	b200      	sxth	r0, r0
 80a18b6:	f003 fb57 	bl	80a4f68 <__aeabi_i2d>
 80a18ba:	2200      	movs	r2, #0
 80a18bc:	4b1d      	ldr	r3, [pc, #116]	; (80a1934 <_ZN15Adafruit_BNO0557getQuatEv+0xa4>)
 80a18be:	f003 fbbd 	bl	80a503c <__aeabi_dmul>
  x = (((uint16_t)buffer[3]) << 8) | ((uint16_t)buffer[2]);
 80a18c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
 80a18c6:	4680      	mov	r8, r0
  x = (((uint16_t)buffer[3]) << 8) | ((uint16_t)buffer[2]);
 80a18c8:	f89d 0002 	ldrb.w	r0, [sp, #2]
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
 80a18cc:	4689      	mov	r9, r1
  x = (((uint16_t)buffer[3]) << 8) | ((uint16_t)buffer[2]);
 80a18ce:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
 80a18d2:	b200      	sxth	r0, r0
 80a18d4:	f003 fb48 	bl	80a4f68 <__aeabi_i2d>
 80a18d8:	2200      	movs	r2, #0
 80a18da:	4b16      	ldr	r3, [pc, #88]	; (80a1934 <_ZN15Adafruit_BNO0557getQuatEv+0xa4>)
 80a18dc:	f003 fbae 	bl	80a503c <__aeabi_dmul>
  y = (((uint16_t)buffer[5]) << 8) | ((uint16_t)buffer[4]);
 80a18e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
 80a18e4:	4606      	mov	r6, r0
  y = (((uint16_t)buffer[5]) << 8) | ((uint16_t)buffer[4]);
 80a18e6:	f89d 0004 	ldrb.w	r0, [sp, #4]
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
 80a18ea:	460f      	mov	r7, r1
  y = (((uint16_t)buffer[5]) << 8) | ((uint16_t)buffer[4]);
 80a18ec:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
 80a18f0:	b200      	sxth	r0, r0
 80a18f2:	f003 fb39 	bl	80a4f68 <__aeabi_i2d>
 80a18f6:	2200      	movs	r2, #0
 80a18f8:	4b0e      	ldr	r3, [pc, #56]	; (80a1934 <_ZN15Adafruit_BNO0557getQuatEv+0xa4>)
 80a18fa:	f003 fb9f 	bl	80a503c <__aeabi_dmul>
  z = (((uint16_t)buffer[7]) << 8) | ((uint16_t)buffer[6]);
 80a18fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
 80a1902:	4604      	mov	r4, r0
  z = (((uint16_t)buffer[7]) << 8) | ((uint16_t)buffer[6]);
 80a1904:	f89d 0006 	ldrb.w	r0, [sp, #6]
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
 80a1908:	460d      	mov	r5, r1
  z = (((uint16_t)buffer[7]) << 8) | ((uint16_t)buffer[6]);
 80a190a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
 80a190e:	b200      	sxth	r0, r0
 80a1910:	f003 fb2a 	bl	80a4f68 <__aeabi_i2d>
 80a1914:	2200      	movs	r2, #0
 80a1916:	4b07      	ldr	r3, [pc, #28]	; (80a1934 <_ZN15Adafruit_BNO0557getQuatEv+0xa4>)
 80a1918:	f003 fb90 	bl	80a503c <__aeabi_dmul>
class Quaternion {
public:
  Quaternion() : _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}

  Quaternion(double w, double x, double y, double z)
      : _w(w), _x(x), _y(y), _z(z) {}
 80a191c:	e9ca 0106 	strd	r0, r1, [sl, #24]
}
 80a1920:	4650      	mov	r0, sl
 80a1922:	e9ca 8900 	strd	r8, r9, [sl]
 80a1926:	e9ca 6702 	strd	r6, r7, [sl, #8]
 80a192a:	e9ca 4504 	strd	r4, r5, [sl, #16]
 80a192e:	b002      	add	sp, #8
 80a1930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1934:	3f100000 	.word	0x3f100000

080a1938 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
 80a1938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a193a:	460d      	mov	r5, r1
 80a193c:	4616      	mov	r6, r2

namespace imu {

template <uint8_t N> class Vector {
public:
  Vector() { memset(p_vec, 0, sizeof(double) * N); }
 80a193e:	2100      	movs	r1, #0
 80a1940:	2218      	movs	r2, #24
 80a1942:	4604      	mov	r4, r0
 80a1944:	f004 fb5e 	bl	80a6004 <memset>
  memset(buffer, 0, 6);
 80a1948:	2300      	movs	r3, #0
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 80a194a:	4628      	mov	r0, r5
  memset(buffer, 0, 6);
 80a194c:	9300      	str	r3, [sp, #0]
 80a194e:	f8ad 3004 	strh.w	r3, [sp, #4]
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 80a1952:	466a      	mov	r2, sp
 80a1954:	2306      	movs	r3, #6
 80a1956:	4631      	mov	r1, r6
 80a1958:	f7ff ff8b 	bl	80a1872 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 80a195c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a1960:	f89d 0000 	ldrb.w	r0, [sp]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 80a1964:	f89d 7002 	ldrb.w	r7, [sp, #2]
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 80a1968:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 80a196c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 80a1970:	f89d 5004 	ldrb.w	r5, [sp, #4]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 80a1974:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 80a1978:	f89d 3005 	ldrb.w	r3, [sp, #5]
  switch (vector_type) {
 80a197c:	2e1a      	cmp	r6, #26
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 80a197e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 80a1982:	b200      	sxth	r0, r0
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 80a1984:	b23f      	sxth	r7, r7
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 80a1986:	b22d      	sxth	r5, r5
  switch (vector_type) {
 80a1988:	d00d      	beq.n	80a19a6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
 80a198a:	d808      	bhi.n	80a199e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x66>
 80a198c:	2e0e      	cmp	r6, #14
 80a198e:	d00a      	beq.n	80a19a6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
 80a1990:	2e14      	cmp	r6, #20
 80a1992:	d008      	beq.n	80a19a6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
 80a1994:	2e08      	cmp	r6, #8
 80a1996:	d021      	beq.n	80a19dc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
}
 80a1998:	4620      	mov	r0, r4
 80a199a:	b003      	add	sp, #12
 80a199c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (vector_type) {
 80a199e:	2e28      	cmp	r6, #40	; 0x28
 80a19a0:	d01c      	beq.n	80a19dc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa4>
 80a19a2:	2e2e      	cmp	r6, #46	; 0x2e
 80a19a4:	e7f7      	b.n	80a1996 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5e>
    xyz[0] = ((double)x) / 16.0;
 80a19a6:	f003 fadf 	bl	80a4f68 <__aeabi_i2d>
 80a19aa:	2200      	movs	r2, #0
 80a19ac:	4b18      	ldr	r3, [pc, #96]	; (80a1a10 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
 80a19ae:	f003 fb45 	bl	80a503c <__aeabi_dmul>
 80a19b2:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 16.0;
 80a19b6:	4638      	mov	r0, r7
 80a19b8:	f003 fad6 	bl	80a4f68 <__aeabi_i2d>
 80a19bc:	2200      	movs	r2, #0
 80a19be:	4b14      	ldr	r3, [pc, #80]	; (80a1a10 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
 80a19c0:	f003 fb3c 	bl	80a503c <__aeabi_dmul>
 80a19c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 16.0;
 80a19c8:	4628      	mov	r0, r5
 80a19ca:	f003 facd 	bl	80a4f68 <__aeabi_i2d>
 80a19ce:	2200      	movs	r2, #0
 80a19d0:	4b0f      	ldr	r3, [pc, #60]	; (80a1a10 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
 80a19d2:	f003 fb33 	bl	80a503c <__aeabi_dmul>
    xyz[2] = ((double)z) / 100.0;
 80a19d6:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return xyz;
 80a19da:	e7dd      	b.n	80a1998 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x60>
    xyz[0] = ((double)x) / 100.0;
 80a19dc:	f003 fac4 	bl	80a4f68 <__aeabi_i2d>
 80a19e0:	2200      	movs	r2, #0
 80a19e2:	4b0c      	ldr	r3, [pc, #48]	; (80a1a14 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
 80a19e4:	f003 fc54 	bl	80a5290 <__aeabi_ddiv>
 80a19e8:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 100.0;
 80a19ec:	4638      	mov	r0, r7
 80a19ee:	f003 fabb 	bl	80a4f68 <__aeabi_i2d>
 80a19f2:	2200      	movs	r2, #0
 80a19f4:	4b07      	ldr	r3, [pc, #28]	; (80a1a14 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
 80a19f6:	f003 fc4b 	bl	80a5290 <__aeabi_ddiv>
 80a19fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 100.0;
 80a19fe:	4628      	mov	r0, r5
 80a1a00:	f003 fab2 	bl	80a4f68 <__aeabi_i2d>
 80a1a04:	2200      	movs	r2, #0
 80a1a06:	4b03      	ldr	r3, [pc, #12]	; (80a1a14 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xdc>)
 80a1a08:	f003 fc42 	bl	80a5290 <__aeabi_ddiv>
 80a1a0c:	e7e3      	b.n	80a19d6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9e>
 80a1a0e:	bf00      	nop
 80a1a10:	3fb00000 	.word	0x3fb00000
 80a1a14:	40590000 	.word	0x40590000

080a1a18 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
 80a1a18:	b530      	push	{r4, r5, lr}
 80a1a1a:	460c      	mov	r4, r1
 80a1a1c:	b087      	sub	sp, #28
 80a1a1e:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
 80a1a20:	2220      	movs	r2, #32
 80a1a22:	2100      	movs	r1, #0
 80a1a24:	1d20      	adds	r0, r4, #4
 80a1a26:	f004 faed 	bl	80a6004 <memset>
  event->version = sizeof(sensors_event_t);
 80a1a2a:	2324      	movs	r3, #36	; 0x24
 80a1a2c:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 80a1a2e:	68eb      	ldr	r3, [r5, #12]
 80a1a30:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_ORIENTATION;
 80a1a32:	2303      	movs	r3, #3
 80a1a34:	60a3      	str	r3, [r4, #8]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a1a36:	f000 ff39 	bl	80a28ac <HAL_Timer_Get_Milli_Seconds>
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80a1a3a:	221a      	movs	r2, #26
 80a1a3c:	4629      	mov	r1, r5
  event->timestamp = millis();
 80a1a3e:	6120      	str	r0, [r4, #16]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80a1a40:	4668      	mov	r0, sp
 80a1a42:	f7ff ff79 	bl	80a1938 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80a1a46:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a1a4a:	f003 fdef 	bl	80a562c <__aeabi_d2f>
 80a1a4e:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
 80a1a50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a1a54:	f003 fdea 	bl	80a562c <__aeabi_d2f>
 80a1a58:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
 80a1a5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a1a5e:	f003 fde5 	bl	80a562c <__aeabi_d2f>
 80a1a62:	61e0      	str	r0, [r4, #28]
}
 80a1a64:	2001      	movs	r0, #1
 80a1a66:	b007      	add	sp, #28
 80a1a68:	bd30      	pop	{r4, r5, pc}

080a1a6a <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 80a1a6a:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a1a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 80a1a6e:	db68      	blt.n	80a1b42 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd8>
 80a1a70:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 80a1a74:	428c      	cmp	r4, r1
 80a1a76:	dd64      	ble.n	80a1b42 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd8>
 80a1a78:	2a00      	cmp	r2, #0
 80a1a7a:	db62      	blt.n	80a1b42 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd8>
 80a1a7c:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 80a1a80:	4294      	cmp	r4, r2
 80a1a82:	dd5e      	ble.n	80a1b42 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd8>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
 80a1a84:	7e84      	ldrb	r4, [r0, #26]
 80a1a86:	2c02      	cmp	r4, #2
 80a1a88:	d05c      	beq.n	80a1b44 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xda>
 80a1a8a:	2c03      	cmp	r4, #3
 80a1a8c:	d063      	beq.n	80a1b56 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xec>
 80a1a8e:	2c01      	cmp	r4, #1
 80a1a90:	d104      	bne.n	80a1a9c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
 80a1a92:	43d2      	mvns	r2, r2
 80a1a94:	8904      	ldrh	r4, [r0, #8]
 80a1a96:	4414      	add	r4, r2
      break;
 80a1a98:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
 80a1a9a:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
 80a1a9c:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
 80a1aa0:	428c      	cmp	r4, r1
 80a1aa2:	bfa8      	it	ge
 80a1aa4:	460c      	movge	r4, r1
 80a1aa6:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
 80a1aa8:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
 80a1aac:	4294      	cmp	r4, r2
 80a1aae:	bfa8      	it	ge
 80a1ab0:	4614      	movge	r4, r2
 80a1ab2:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
 80a1ab4:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
 80a1ab8:	428c      	cmp	r4, r1
 80a1aba:	bfb8      	it	lt
 80a1abc:	460c      	movlt	r4, r1
 80a1abe:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
 80a1ac0:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
 80a1ac4:	4294      	cmp	r4, r2
 80a1ac6:	bfb8      	it	lt
 80a1ac8:	4614      	movlt	r4, r2
 80a1aca:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
 80a1acc:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
 80a1ad0:	2c01      	cmp	r4, #1
 80a1ad2:	d118      	bne.n	80a1b06 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x9c>
      switch (color) {
 80a1ad4:	2b01      	cmp	r3, #1
 80a1ad6:	d044      	beq.n	80a1b62 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf8>
 80a1ad8:	2b02      	cmp	r3, #2
 80a1ada:	d055      	beq.n	80a1b88 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x11e>
 80a1adc:	b99b      	cbnz	r3, 80a1b06 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x9c>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
 80a1ade:	4614      	mov	r4, r2
 80a1ae0:	2a00      	cmp	r2, #0
 80a1ae2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80a1ae6:	bfb8      	it	lt
 80a1ae8:	1dd4      	addlt	r4, r2, #7
 80a1aea:	f344 04cf 	sbfx	r4, r4, #3, #16
 80a1aee:	fb05 1404 	mla	r4, r5, r4, r1
 80a1af2:	2501      	movs	r5, #1
 80a1af4:	6b47      	ldr	r7, [r0, #52]	; 0x34
 80a1af6:	f002 0607 	and.w	r6, r2, #7
 80a1afa:	fa05 f606 	lsl.w	r6, r5, r6
 80a1afe:	5d3d      	ldrb	r5, [r7, r4]
 80a1b00:	ea25 0506 	bic.w	r5, r5, r6
 80a1b04:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
 80a1b06:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
 80a1b0a:	2c04      	cmp	r4, #4
 80a1b0c:	d119      	bne.n	80a1b42 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd8>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
 80a1b0e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a1b12:	4362      	muls	r2, r4
 80a1b14:	eb01 74d1 	add.w	r4, r1, r1, lsr #31
 80a1b18:	f344 044f 	sbfx	r4, r4, #1, #16
 80a1b1c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80a1b20:	eb04 0262 	add.w	r2, r4, r2, asr #1
 80a1b24:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
 80a1b26:	07c9      	lsls	r1, r1, #31
        uint8_t t = pixelptr[0] & 0x0F;
 80a1b28:	5ca0      	ldrb	r0, [r4, r2]
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
 80a1b2a:	bf4b      	itete	mi
 80a1b2c:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
 80a1b30:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
 80a1b34:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
 80a1b38:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
 80a1b3c:	bf48      	it	mi
 80a1b3e:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
 80a1b40:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
 80a1b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
 80a1b44:	43c9      	mvns	r1, r1
      y = HEIGHT - y - 1;
 80a1b46:	43d2      	mvns	r2, r2
      x = WIDTH - x - 1;
 80a1b48:	8904      	ldrh	r4, [r0, #8]
 80a1b4a:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
 80a1b4c:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
 80a1b4e:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
 80a1b50:	4422      	add	r2, r4
 80a1b52:	b212      	sxth	r2, r2
      break;
 80a1b54:	e7a2      	b.n	80a1a9c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
 80a1b56:	43c9      	mvns	r1, r1
 80a1b58:	8944      	ldrh	r4, [r0, #10]
 80a1b5a:	440c      	add	r4, r1
      break;
 80a1b5c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
 80a1b5e:	b222      	sxth	r2, r4
      break;
 80a1b60:	e79c      	b.n	80a1a9c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
 80a1b62:	4614      	mov	r4, r2
 80a1b64:	2a00      	cmp	r2, #0
 80a1b66:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80a1b6a:	bfb8      	it	lt
 80a1b6c:	1dd4      	addlt	r4, r2, #7
 80a1b6e:	f344 04cf 	sbfx	r4, r4, #3, #16
 80a1b72:	fb05 1404 	mla	r4, r5, r4, r1
 80a1b76:	2501      	movs	r5, #1
 80a1b78:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80a1b7a:	f002 0707 	and.w	r7, r2, #7
 80a1b7e:	40bd      	lsls	r5, r7
 80a1b80:	5d37      	ldrb	r7, [r6, r4]
 80a1b82:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 80a1b84:	5535      	strb	r5, [r6, r4]
        break;
 80a1b86:	e7be      	b.n	80a1b06 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x9c>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 80a1b88:	4614      	mov	r4, r2
 80a1b8a:	2a00      	cmp	r2, #0
 80a1b8c:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80a1b90:	bfb8      	it	lt
 80a1b92:	1dd4      	addlt	r4, r2, #7
 80a1b94:	f344 04cf 	sbfx	r4, r4, #3, #16
 80a1b98:	fb05 1404 	mla	r4, r5, r4, r1
 80a1b9c:	2501      	movs	r5, #1
 80a1b9e:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80a1ba0:	f002 0707 	and.w	r7, r2, #7
 80a1ba4:	40bd      	lsls	r5, r7
 80a1ba6:	5d37      	ldrb	r7, [r6, r4]
 80a1ba8:	407d      	eors	r5, r7
 80a1baa:	e7eb      	b.n	80a1b84 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x11a>

080a1bac <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
 80a1bac:	b538      	push	{r3, r4, r5, lr}
 80a1bae:	460d      	mov	r5, r1
 80a1bb0:	4611      	mov	r1, r2
 80a1bb2:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
 80a1bb4:	b21a      	sxth	r2, r3
 80a1bb6:	b209      	sxth	r1, r1
 80a1bb8:	f000 fa94 	bl	80a20e4 <_ZN12Adafruit_GFXC1Ess>
 80a1bbc:	4b0b      	ldr	r3, [pc, #44]	; (80a1bec <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
 80a1bbe:	9a06      	ldr	r2, [sp, #24]
 80a1bc0:	6023      	str	r3, [r4, #0]
 80a1bc2:	2300      	movs	r3, #0
 80a1bc4:	62e2      	str	r2, [r4, #44]	; 0x2c
 80a1bc6:	9a07      	ldr	r2, [sp, #28]
 80a1bc8:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
 80a1bcc:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 80a1bd0:	f04f 33ff 	mov.w	r3, #4294967295
 80a1bd4:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 80a1bd8:	f99d 3014 	ldrsb.w	r3, [sp, #20]
}
 80a1bdc:	4620      	mov	r0, r4
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
 80a1bde:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
 80a1be0:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
 80a1be2:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
 80a1be6:	6523      	str	r3, [r4, #80]	; 0x50
}
 80a1be8:	bd38      	pop	{r3, r4, r5, pc}
 80a1bea:	bf00      	nop
 80a1bec:	080a6540 	.word	0x080a6540

080a1bf0 <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
 80a1bf0:	b538      	push	{r3, r4, r5, lr}
 80a1bf2:	4b0c      	ldr	r3, [pc, #48]	; (80a1c24 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
 80a1bf4:	4604      	mov	r4, r0
 80a1bf6:	6003      	str	r3, [r0, #0]
  if (buffer) {
 80a1bf8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a1bfa:	b118      	cbz	r0, 80a1c04 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
 80a1bfc:	f001 f84e 	bl	80a2c9c <free>
    buffer = NULL;
 80a1c00:	2300      	movs	r3, #0
 80a1c02:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
 80a1c04:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a1c06:	b135      	cbz	r5, 80a1c16 <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
 80a1c08:	4628      	mov	r0, r5
 80a1c0a:	f7ff fb55 	bl	80a12b8 <_ZN18Adafruit_SPIDeviceD1Ev>
 80a1c0e:	2138      	movs	r1, #56	; 0x38
 80a1c10:	4628      	mov	r0, r5
 80a1c12:	f001 ff39 	bl	80a3a88 <_ZdlPvj>
  if (i2c_dev)
 80a1c16:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1c18:	b110      	cbz	r0, 80a1c20 <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
 80a1c1a:	2110      	movs	r1, #16
 80a1c1c:	f001 ff34 	bl	80a3a88 <_ZdlPvj>
}
 80a1c20:	4620      	mov	r0, r4
 80a1c22:	bd38      	pop	{r3, r4, r5, pc}
 80a1c24:	080a6540 	.word	0x080a6540

080a1c28 <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
 80a1c28:	b530      	push	{r4, r5, lr}
  if (i2c_dev) {                // I2C
 80a1c2a:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
 80a1c2c:	b087      	sub	sp, #28
 80a1c2e:	4604      	mov	r4, r0
 80a1c30:	f88d 100f 	strb.w	r1, [sp, #15]
  if (i2c_dev) {                // I2C
 80a1c34:	b17d      	cbz	r5, 80a1c56 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
 80a1c36:	2300      	movs	r3, #0
 80a1c38:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
 80a1c3a:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
 80a1c3e:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1c42:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
 80a1c46:	2301      	movs	r3, #1
 80a1c48:	2202      	movs	r2, #2
 80a1c4a:	4628      	mov	r0, r5
 80a1c4c:	a905      	add	r1, sp, #20
 80a1c4e:	f7ff fc89 	bl	80a1564 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 80a1c52:	b007      	add	sp, #28
 80a1c54:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
 80a1c56:	4629      	mov	r1, r5
 80a1c58:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
 80a1c5c:	f001 fe9b 	bl	80a3996 <digitalWrite>
    spi_dev->write(&c, 1);
 80a1c60:	462b      	mov	r3, r5
 80a1c62:	2201      	movs	r2, #1
 80a1c64:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1c66:	9500      	str	r5, [sp, #0]
 80a1c68:	f10d 010f 	add.w	r1, sp, #15
 80a1c6c:	f7ff fc1d 	bl	80a14aa <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
 80a1c70:	e7ef      	b.n	80a1c52 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

080a1c72 <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
 80a1c72:	2900      	cmp	r1, #0
 80a1c74:	bf14      	ite	ne
 80a1c76:	21a7      	movne	r1, #167	; 0xa7
 80a1c78:	21a6      	moveq	r1, #166	; 0xa6
 80a1c7a:	f7ff bfd5 	b.w	80a1c28 <_ZN17Adafruit_GrayOLED12oled_commandEh>

080a1c7e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
 80a1c7e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
 80a1c80:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
 80a1c82:	4604      	mov	r4, r0
 80a1c84:	460e      	mov	r6, r1
 80a1c86:	4617      	mov	r7, r2
 80a1c88:	b085      	sub	sp, #20
  if (i2c_dev) {            // I2C
 80a1c8a:	b165      	cbz	r5, 80a1ca6 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
 80a1c8c:	2300      	movs	r3, #0
 80a1c8e:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
 80a1c92:	2301      	movs	r3, #1
 80a1c94:	f10d 000f 	add.w	r0, sp, #15
 80a1c98:	9000      	str	r0, [sp, #0]
 80a1c9a:	9301      	str	r3, [sp, #4]
 80a1c9c:	4628      	mov	r0, r5
 80a1c9e:	f7ff fc61 	bl	80a1564 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 80a1ca2:	b005      	add	sp, #20
 80a1ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
 80a1ca6:	4629      	mov	r1, r5
 80a1ca8:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
 80a1cac:	f001 fe73 	bl	80a3996 <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
 80a1cb0:	462b      	mov	r3, r5
 80a1cb2:	463a      	mov	r2, r7
 80a1cb4:	4631      	mov	r1, r6
 80a1cb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1cb8:	9500      	str	r5, [sp, #0]
 80a1cba:	f7ff fbf6 	bl	80a14aa <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
 80a1cbe:	e7f0      	b.n	80a1ca2 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

080a1cc0 <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
 80a1cc0:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
 80a1cc2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80a1cc6:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80a1cca:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 80a1cce:	435a      	muls	r2, r3
 80a1cd0:	1dcb      	adds	r3, r1, #7
 80a1cd2:	bf48      	it	mi
 80a1cd4:	f101 030e 	addmi.w	r3, r1, #14
 80a1cd8:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
 80a1cda:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
 80a1cdc:	435a      	muls	r2, r3
 80a1cde:	2100      	movs	r1, #0
 80a1ce0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a1ce2:	f004 f98f 	bl	80a6004 <memset>
  window_x1 = 0;
 80a1ce6:	2300      	movs	r3, #0
 80a1ce8:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
 80a1cea:	8923      	ldrh	r3, [r4, #8]
 80a1cec:	3b01      	subs	r3, #1
 80a1cee:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
 80a1cf0:	8963      	ldrh	r3, [r4, #10]
 80a1cf2:	3b01      	subs	r3, #1
 80a1cf4:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
 80a1cf6:	bd10      	pop	{r4, pc}

080a1cf8 <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
 80a1cf8:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
 80a1cfa:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
 80a1cfc:	4604      	mov	r4, r0
 80a1cfe:	460e      	mov	r6, r1
 80a1d00:	4615      	mov	r5, r2
  if ((!buffer) &&
 80a1d02:	b30b      	cbz	r3, 80a1d48 <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
 80a1d04:	2d00      	cmp	r5, #0
 80a1d06:	d133      	bne.n	80a1d70 <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
 80a1d08:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a1d0a:	2b00      	cmp	r3, #0
 80a1d0c:	d050      	beq.n	80a1db0 <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
 80a1d0e:	2010      	movs	r0, #16
 80a1d10:	f7fe f9c3 	bl	80a009a <_Znwj>
 80a1d14:	4605      	mov	r5, r0
 80a1d16:	b118      	cbz	r0, 80a1d20 <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
 80a1d18:	4631      	mov	r1, r6
 80a1d1a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a1d1c:	f7ff fbf7 	bl	80a150e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 80a1d20:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
 80a1d22:	b31d      	cbz	r5, 80a1d6c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
 80a1d24:	2101      	movs	r1, #1
 80a1d26:	4628      	mov	r0, r5
 80a1d28:	f7ff fc0d 	bl	80a1546 <_ZN18Adafruit_I2CDevice5beginEb>
 80a1d2c:	b1f0      	cbz	r0, 80a1d6c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
 80a1d2e:	4620      	mov	r0, r4
 80a1d30:	f7ff ffc6 	bl	80a1cc0 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
 80a1d34:	2300      	movs	r3, #0
 80a1d36:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
 80a1d38:	8923      	ldrh	r3, [r4, #8]
  return true; // Success
 80a1d3a:	2001      	movs	r0, #1
  window_x2 = WIDTH - 1;
 80a1d3c:	3b01      	subs	r3, #1
 80a1d3e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
 80a1d40:	8963      	ldrh	r3, [r4, #10]
 80a1d42:	3b01      	subs	r3, #1
 80a1d44:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
 80a1d46:	e012      	b.n	80a1d6e <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
 80a1d48:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80a1d4c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80a1d50:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80a1d54:	4358      	muls	r0, r3
 80a1d56:	1dd3      	adds	r3, r2, #7
 80a1d58:	bf48      	it	mi
 80a1d5a:	f102 030e 	addmi.w	r3, r2, #14
 80a1d5e:	10db      	asrs	r3, r3, #3
 80a1d60:	4358      	muls	r0, r3
 80a1d62:	f000 ff93 	bl	80a2c8c <malloc>
 80a1d66:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
 80a1d68:	2800      	cmp	r0, #0
 80a1d6a:	d1cb      	bne.n	80a1d04 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
 80a1d6c:	2000      	movs	r0, #0
}
 80a1d6e:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
 80a1d70:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80a1d72:	2800      	cmp	r0, #0
 80a1d74:	dbc8      	blt.n	80a1d08 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
 80a1d76:	2101      	movs	r1, #1
 80a1d78:	b280      	uxth	r0, r0
 80a1d7a:	f001 fdfb 	bl	80a3974 <pinMode>
    digitalWrite(rstPin, HIGH);
 80a1d7e:	2101      	movs	r1, #1
 80a1d80:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 80a1d84:	f001 fe07 	bl	80a3996 <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
 80a1d88:	200a      	movs	r0, #10
 80a1d8a:	f001 f9fd 	bl	80a3188 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
 80a1d8e:	2100      	movs	r1, #0
 80a1d90:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 80a1d94:	f001 fdff 	bl	80a3996 <digitalWrite>
    delay(10);                  // Wait 10 ms
 80a1d98:	200a      	movs	r0, #10
 80a1d9a:	f001 f9f5 	bl	80a3188 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
 80a1d9e:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 80a1da2:	2101      	movs	r1, #1
 80a1da4:	f001 fdf7 	bl	80a3996 <digitalWrite>
    delay(10);
 80a1da8:	200a      	movs	r0, #10
 80a1daa:	f001 f9ed 	bl	80a3188 <delay>
 80a1dae:	e7ab      	b.n	80a1d08 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
 80a1db0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1db2:	2800      	cmp	r0, #0
 80a1db4:	d0da      	beq.n	80a1d6c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
 80a1db6:	f7ff fa88 	bl	80a12ca <_ZN18Adafruit_SPIDevice5beginEv>
 80a1dba:	2800      	cmp	r0, #0
 80a1dbc:	d0d6      	beq.n	80a1d6c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
 80a1dbe:	2101      	movs	r1, #1
 80a1dc0:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 80a1dc4:	f001 fdd6 	bl	80a3974 <pinMode>
 80a1dc8:	e7b1      	b.n	80a1d2e <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

080a1dca <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
 80a1dca:	2381      	movs	r3, #129	; 0x81
void Adafruit_GrayOLED::setContrast(uint8_t level) {
 80a1dcc:	b507      	push	{r0, r1, r2, lr}
  oled_commandList(cmd, 2);
 80a1dce:	2202      	movs	r2, #2
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
 80a1dd0:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
 80a1dd4:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
 80a1dd6:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
 80a1dda:	f7ff ff50 	bl	80a1c7e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
 80a1dde:	b003      	add	sp, #12
 80a1de0:	f85d fb04 	ldr.w	pc, [sp], #4

080a1de4 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 80a1de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1de8:	461f      	mov	r7, r3
 80a1dea:	b085      	sub	sp, #20
 80a1dec:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a1df0:	eba7 0a01 	sub.w	sl, r7, r1
 80a1df4:	eba8 0902 	sub.w	r9, r8, r2
 80a1df8:	f1b9 0f00 	cmp.w	r9, #0
 80a1dfc:	bfb8      	it	lt
 80a1dfe:	f1c9 0900 	rsblt	r9, r9, #0
 80a1e02:	f1ba 0f00 	cmp.w	sl, #0
 80a1e06:	bfb8      	it	lt
 80a1e08:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 80a1e0c:	45d1      	cmp	r9, sl
                             uint16_t color) {
 80a1e0e:	4683      	mov	fp, r0
 80a1e10:	460c      	mov	r4, r1
 80a1e12:	4616      	mov	r6, r2
 80a1e14:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 80a1e18:	dd04      	ble.n	80a1e24 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 80a1e1a:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
 80a1e1c:	4634      	mov	r4, r6
    _swap_int16_t(x1, y1);
 80a1e1e:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
 80a1e20:	460e      	mov	r6, r1
    _swap_int16_t(x1, y1);
 80a1e22:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 80a1e24:	42bc      	cmp	r4, r7
 80a1e26:	dd05      	ble.n	80a1e34 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 80a1e28:	4632      	mov	r2, r6
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
 80a1e2a:	4646      	mov	r6, r8
 80a1e2c:	4690      	mov	r8, r2
  if (x0 > x1) {
 80a1e2e:	4622      	mov	r2, r4
 80a1e30:	463c      	mov	r4, r7
 80a1e32:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a1e34:	1b3a      	subs	r2, r7, r4
 80a1e36:	b291      	uxth	r1, r2
 80a1e38:	9100      	str	r1, [sp, #0]
  dy = abs(y1 - y0);
 80a1e3a:	eba8 0106 	sub.w	r1, r8, r6
 80a1e3e:	2900      	cmp	r1, #0
 80a1e40:	bfb8      	it	lt
 80a1e42:	4249      	neglt	r1, r1

  int16_t err = dx / 2;
 80a1e44:	f3c2 35c0 	ubfx	r5, r2, #15, #1
  dy = abs(y1 - y0);
 80a1e48:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 80a1e4a:	b211      	sxth	r1, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a1e4c:	4546      	cmp	r6, r8
 80a1e4e:	bfb4      	ite	lt
 80a1e50:	2201      	movlt	r2, #1
 80a1e52:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
 80a1e56:	440d      	add	r5, r1
 80a1e58:	106d      	asrs	r5, r5, #1
    ystep = -1;
 80a1e5a:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
 80a1e5c:	42bc      	cmp	r4, r7
 80a1e5e:	dc1c      	bgt.n	80a1e9a <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
    if (steep) {
 80a1e60:	f8db 2000 	ldr.w	r2, [fp]
 80a1e64:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
 80a1e66:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80a1e6a:	bfc7      	ittee	gt
 80a1e6c:	4631      	movgt	r1, r6
 80a1e6e:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
 80a1e70:	4632      	movle	r2, r6
 80a1e72:	4621      	movle	r1, r4
      writePixel(y0, x0, color);
 80a1e74:	9303      	str	r3, [sp, #12]
      writePixel(x0, y0, color);
 80a1e76:	4658      	mov	r0, fp
 80a1e78:	47c0      	blx	r8
    }
    err -= dy;
 80a1e7a:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
 80a1e7c:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 80a1e7e:	1aad      	subs	r5, r5, r2
 80a1e80:	b2a9      	uxth	r1, r5
 80a1e82:	b22d      	sxth	r5, r5
    if (err < 0) {
 80a1e84:	2d00      	cmp	r5, #0
 80a1e86:	da05      	bge.n	80a1e94 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
      y0 += ystep;
 80a1e88:	9a02      	ldr	r2, [sp, #8]
 80a1e8a:	4416      	add	r6, r2
      err += dx;
 80a1e8c:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 80a1e8e:	b236      	sxth	r6, r6
      err += dx;
 80a1e90:	1855      	adds	r5, r2, r1
 80a1e92:	b22d      	sxth	r5, r5
  for (; x0 <= x1; x0++) {
 80a1e94:	3401      	adds	r4, #1
 80a1e96:	b224      	sxth	r4, r4
 80a1e98:	e7e0      	b.n	80a1e5c <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
    }
  }
}
 80a1e9a:	b005      	add	sp, #20
 80a1e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1ea0 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 80a1ea0:	4770      	bx	lr

080a1ea2 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 80a1ea2:	b410      	push	{r4}
  drawPixel(x, y, color);
 80a1ea4:	6804      	ldr	r4, [r0, #0]
 80a1ea6:	6924      	ldr	r4, [r4, #16]
 80a1ea8:	46a4      	mov	ip, r4
}
 80a1eaa:	bc10      	pop	{r4}
  drawPixel(x, y, color);
 80a1eac:	4760      	bx	ip

080a1eae <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 80a1eae:	b430      	push	{r4, r5}
 80a1eb0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 80a1eb4:	6804      	ldr	r4, [r0, #0]
 80a1eb6:	9502      	str	r5, [sp, #8]
 80a1eb8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80a1eba:	46a4      	mov	ip, r4
}
 80a1ebc:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
 80a1ebe:	4760      	bx	ip

080a1ec0 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 80a1ec0:	b430      	push	{r4, r5}
 80a1ec2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 80a1ec6:	6804      	ldr	r4, [r0, #0]
 80a1ec8:	9502      	str	r5, [sp, #8]
 80a1eca:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80a1ecc:	46a4      	mov	ip, r4
}
 80a1ece:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
 80a1ed0:	4760      	bx	ip

080a1ed2 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 80a1ed2:	b470      	push	{r4, r5, r6}
 80a1ed4:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80a1ed8:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
 80a1edc:	6804      	ldr	r4, [r0, #0]
 80a1ede:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80a1ee2:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80a1ee4:	46a4      	mov	ip, r4
}
 80a1ee6:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
 80a1ee8:	4760      	bx	ip

080a1eea <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 80a1eea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a1eee:	461c      	mov	r4, r3
 80a1ef0:	4616      	mov	r6, r2
 80a1ef2:	4605      	mov	r5, r0
 80a1ef4:	460f      	mov	r7, r1
  startWrite();
 80a1ef6:	6803      	ldr	r3, [r0, #0]
  writeLine(x, y, x, y + h - 1, color);
 80a1ef8:	3c01      	subs	r4, #1
                                 uint16_t color) {
 80a1efa:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 80a1efe:	695b      	ldr	r3, [r3, #20]
  writeLine(x, y, x, y + h - 1, color);
 80a1f00:	4434      	add	r4, r6
  startWrite();
 80a1f02:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
 80a1f04:	b224      	sxth	r4, r4
 80a1f06:	682b      	ldr	r3, [r5, #0]
 80a1f08:	f8cd 8004 	str.w	r8, [sp, #4]
 80a1f0c:	9400      	str	r4, [sp, #0]
 80a1f0e:	4628      	mov	r0, r5
 80a1f10:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80a1f12:	4632      	mov	r2, r6
 80a1f14:	463b      	mov	r3, r7
 80a1f16:	4639      	mov	r1, r7
 80a1f18:	47a0      	blx	r4
  endWrite();
 80a1f1a:	4628      	mov	r0, r5
 80a1f1c:	682b      	ldr	r3, [r5, #0]
 80a1f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a1f20:	b002      	add	sp, #8
 80a1f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 80a1f26:	4718      	bx	r3

080a1f28 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
 80a1f28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a1f2c:	4617      	mov	r7, r2
 80a1f2e:	4604      	mov	r4, r0
 80a1f30:	461d      	mov	r5, r3
 80a1f32:	460e      	mov	r6, r1
  startWrite();
 80a1f34:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
 80a1f36:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 80a1f3a:	695b      	ldr	r3, [r3, #20]
 80a1f3c:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 80a1f3e:	e9cd 7800 	strd	r7, r8, [sp]
 80a1f42:	6822      	ldr	r2, [r4, #0]
 80a1f44:	1e6b      	subs	r3, r5, #1
 80a1f46:	4433      	add	r3, r6
 80a1f48:	4620      	mov	r0, r4
 80a1f4a:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80a1f4c:	4631      	mov	r1, r6
 80a1f4e:	463a      	mov	r2, r7
 80a1f50:	b21b      	sxth	r3, r3
 80a1f52:	47a8      	blx	r5
  endWrite();
 80a1f54:	4620      	mov	r0, r4
 80a1f56:	6823      	ldr	r3, [r4, #0]
 80a1f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a1f5a:	b002      	add	sp, #8
 80a1f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 80a1f60:	4718      	bx	r3

080a1f62 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 80a1f62:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a1f66:	461e      	mov	r6, r3
  startWrite();
 80a1f68:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 80a1f6a:	460c      	mov	r4, r1
  startWrite();
 80a1f6c:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 80a1f6e:	4605      	mov	r5, r0
 80a1f70:	4617      	mov	r7, r2
 80a1f72:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a1f76:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  startWrite();
 80a1f7a:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
 80a1f7c:	4426      	add	r6, r4
 80a1f7e:	42b4      	cmp	r4, r6
 80a1f80:	682b      	ldr	r3, [r5, #0]
 80a1f82:	da0b      	bge.n	80a1f9c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
 80a1f84:	f8cd 9000 	str.w	r9, [sp]
 80a1f88:	4621      	mov	r1, r4
 80a1f8a:	f8d3 a020 	ldr.w	sl, [r3, #32]
 80a1f8e:	463a      	mov	r2, r7
 80a1f90:	4643      	mov	r3, r8
 80a1f92:	4628      	mov	r0, r5
 80a1f94:	3401      	adds	r4, #1
 80a1f96:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
 80a1f98:	b224      	sxth	r4, r4
 80a1f9a:	e7f0      	b.n	80a1f7e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
 80a1f9c:	4628      	mov	r0, r5
 80a1f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a1fa0:	b002      	add	sp, #8
 80a1fa2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 80a1fa6:	4718      	bx	r3

080a1fa8 <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 80a1fa8:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 80a1faa:	9101      	str	r1, [sp, #4]
 80a1fac:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 80a1fb0:	6802      	ldr	r2, [r0, #0]
 80a1fb2:	9100      	str	r1, [sp, #0]
 80a1fb4:	6c14      	ldr	r4, [r2, #64]	; 0x40
 80a1fb6:	2200      	movs	r2, #0
 80a1fb8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a1fbc:	4611      	mov	r1, r2
 80a1fbe:	47a0      	blx	r4
}
 80a1fc0:	b002      	add	sp, #8
 80a1fc2:	bd10      	pop	{r4, pc}

080a1fc4 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 80a1fc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a1fc8:	4604      	mov	r4, r0
 80a1fca:	460f      	mov	r7, r1
 80a1fcc:	4616      	mov	r6, r2
 80a1fce:	461d      	mov	r5, r3
  startWrite();
 80a1fd0:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 80a1fd2:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 80a1fd6:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 80a1fd8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
 80a1fdc:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
 80a1fde:	6823      	ldr	r3, [r4, #0]
 80a1fe0:	f8cd 8000 	str.w	r8, [sp]
 80a1fe4:	4632      	mov	r2, r6
 80a1fe6:	4639      	mov	r1, r7
 80a1fe8:	4620      	mov	r0, r4
 80a1fea:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80a1fee:	462b      	mov	r3, r5
 80a1ff0:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
 80a1ff2:	6823      	ldr	r3, [r4, #0]
 80a1ff4:	f109 32ff 	add.w	r2, r9, #4294967295
 80a1ff8:	f8cd 8000 	str.w	r8, [sp]
 80a1ffc:	4432      	add	r2, r6
 80a1ffe:	4639      	mov	r1, r7
 80a2000:	4620      	mov	r0, r4
 80a2002:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80a2006:	b212      	sxth	r2, r2
 80a2008:	462b      	mov	r3, r5
 80a200a:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
 80a200c:	6823      	ldr	r3, [r4, #0]
 80a200e:	f8cd 8000 	str.w	r8, [sp]
 80a2012:	4632      	mov	r2, r6
 80a2014:	4639      	mov	r1, r7
 80a2016:	4620      	mov	r0, r4
 80a2018:	f8d3 a020 	ldr.w	sl, [r3, #32]
 80a201c:	464b      	mov	r3, r9
 80a201e:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
 80a2020:	3d01      	subs	r5, #1
 80a2022:	6823      	ldr	r3, [r4, #0]
 80a2024:	19e9      	adds	r1, r5, r7
 80a2026:	f8cd 8000 	str.w	r8, [sp]
 80a202a:	4620      	mov	r0, r4
 80a202c:	6a1d      	ldr	r5, [r3, #32]
 80a202e:	4632      	mov	r2, r6
 80a2030:	464b      	mov	r3, r9
 80a2032:	b209      	sxth	r1, r1
 80a2034:	47a8      	blx	r5
  endWrite();
 80a2036:	4620      	mov	r0, r4
 80a2038:	6823      	ldr	r3, [r4, #0]
 80a203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a203c:	b002      	add	sp, #8
 80a203e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 80a2042:	4718      	bx	r3

080a2044 <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 80a2044:	4770      	bx	lr

080a2046 <_ZN12Adafruit_GFX8drawLineEsssst>:
                            uint16_t color) {
 80a2046:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if (x0 == x1) {
 80a204a:	4299      	cmp	r1, r3
                            uint16_t color) {
 80a204c:	4616      	mov	r6, r2
 80a204e:	4680      	mov	r8, r0
 80a2050:	460d      	mov	r5, r1
 80a2052:	461c      	mov	r4, r3
 80a2054:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 80a2058:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
 80a205c:	6802      	ldr	r2, [r0, #0]
  if (x0 == x1) {
 80a205e:	d112      	bne.n	80a2086 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
    if (y0 > y1)
 80a2060:	42be      	cmp	r6, r7
 80a2062:	bfc2      	ittt	gt
 80a2064:	4633      	movgt	r3, r6
 80a2066:	463e      	movgt	r6, r7
 80a2068:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80a206a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80a206e:	1c7b      	adds	r3, r7, #1
 80a2070:	6b94      	ldr	r4, [r2, #56]	; 0x38
 80a2072:	1b9b      	subs	r3, r3, r6
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a2074:	4632      	mov	r2, r6
 80a2076:	4629      	mov	r1, r5
 80a2078:	4640      	mov	r0, r8
 80a207a:	46a4      	mov	ip, r4
 80a207c:	b21b      	sxth	r3, r3
}
 80a207e:	b003      	add	sp, #12
 80a2080:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a2084:	4760      	bx	ip
  } else if (y0 == y1) {
 80a2086:	42be      	cmp	r6, r7
 80a2088:	d10a      	bne.n	80a20a0 <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
    if (x0 > x1)
 80a208a:	4299      	cmp	r1, r3
 80a208c:	bfc2      	ittt	gt
 80a208e:	460b      	movgt	r3, r1
 80a2090:	4625      	movgt	r5, r4
 80a2092:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a2094:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80a2098:	1c63      	adds	r3, r4, #1
 80a209a:	1b5b      	subs	r3, r3, r5
 80a209c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a209e:	e7e9      	b.n	80a2074 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
    startWrite();
 80a20a0:	6953      	ldr	r3, [r2, #20]
 80a20a2:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
 80a20a4:	e9cd 7900 	strd	r7, r9, [sp]
 80a20a8:	f8d8 3000 	ldr.w	r3, [r8]
 80a20ac:	4640      	mov	r0, r8
 80a20ae:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a20b0:	4632      	mov	r2, r6
 80a20b2:	4623      	mov	r3, r4
 80a20b4:	4629      	mov	r1, r5
 80a20b6:	47b8      	blx	r7
    endWrite();
 80a20b8:	4640      	mov	r0, r8
 80a20ba:	f8d8 3000 	ldr.w	r3, [r8]
 80a20be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a20c0:	b003      	add	sp, #12
 80a20c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
 80a20c6:	4718      	bx	r3

080a20c8 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
 80a20c8:	f001 0303 	and.w	r3, r1, #3
 80a20cc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80a20d0:	7683      	strb	r3, [r0, #26]
  switch (rotation) {
 80a20d2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80a20d6:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
 80a20d8:	bf59      	ittee	pl
 80a20da:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
 80a20dc:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
 80a20de:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
 80a20e0:	81c3      	strhmi	r3, [r0, #14]
}
 80a20e2:	4770      	bx	lr

080a20e4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 80a20e4:	b530      	push	{r4, r5, lr}
 80a20e6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 80a20e8:	2400      	movs	r4, #0
  _width = WIDTH;
 80a20ea:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
 80a20ec:	f04f 31ff 	mov.w	r1, #4294967295
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 80a20f0:	4d05      	ldr	r5, [pc, #20]	; (80a2108 <_ZN12Adafruit_GFXC1Ess+0x24>)
 80a20f2:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
 80a20f4:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
 80a20f6:	4a05      	ldr	r2, [pc, #20]	; (80a210c <_ZN12Adafruit_GFXC1Ess+0x28>)
 80a20f8:	6044      	str	r4, [r0, #4]
 80a20fa:	e9c0 1205 	strd	r1, r2, [r0, #20]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 80a20fe:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
 80a2100:	6104      	str	r4, [r0, #16]
  _cp437 = false;
 80a2102:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
 80a2104:	6204      	str	r4, [r0, #32]
}
 80a2106:	bd30      	pop	{r4, r5, pc}
 80a2108:	080a6a9c 	.word	0x080a6a9c
 80a210c:	01000101 	.word	0x01000101

080a2110 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
 80a2110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  startWrite();
 80a2114:	2600      	movs	r6, #0
  uint8_t byte = 0;
 80a2116:	4635      	mov	r5, r6
                              int16_t w, int16_t h, uint16_t color) {
 80a2118:	b089      	sub	sp, #36	; 0x24
 80a211a:	9304      	str	r3, [sp, #16]
 80a211c:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80a2120:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 80a2124:	9305      	str	r3, [sp, #20]
  startWrite();
 80a2126:	6803      	ldr	r3, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
 80a2128:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
 80a212c:	695b      	ldr	r3, [r3, #20]
                              int16_t w, int16_t h, uint16_t color) {
 80a212e:	4604      	mov	r4, r0
 80a2130:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
  startWrite();
 80a2134:	4798      	blx	r3
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80a2136:	f118 0307 	adds.w	r3, r8, #7
 80a213a:	bf48      	it	mi
 80a213c:	f108 030e 	addmi.w	r3, r8, #14
 80a2140:	ea4f 0be3 	mov.w	fp, r3, asr #3
  startWrite();
 80a2144:	9601      	str	r6, [sp, #4]
 80a2146:	9b03      	ldr	r3, [sp, #12]
 80a2148:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
 80a214a:	9905      	ldr	r1, [sp, #20]
 80a214c:	189a      	adds	r2, r3, r2
 80a214e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80a2152:	b212      	sxth	r2, r2
 80a2154:	4299      	cmp	r1, r3
 80a2156:	dd27      	ble.n	80a21a8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x98>
 80a2158:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 80a215c:	9b04      	ldr	r3, [sp, #16]
 80a215e:	4433      	add	r3, r6
 80a2160:	9306      	str	r3, [sp, #24]
 80a2162:	fa0f f389 	sxth.w	r3, r9
    for (int16_t i = 0; i < w; i++) {
 80a2166:	4598      	cmp	r8, r3
 80a2168:	fa1f f189 	uxth.w	r1, r9
 80a216c:	dd17      	ble.n	80a219e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if (i & 7)
 80a216e:	0748      	lsls	r0, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 80a2170:	bf05      	ittet	eq
 80a2172:	9806      	ldreq	r0, [sp, #24]
 80a2174:	10db      	asreq	r3, r3, #3
        byte <<= 1;
 80a2176:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 80a2178:	5cc5      	ldrbeq	r5, [r0, r3]
        byte <<= 1;
 80a217a:	bf18      	it	ne
 80a217c:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
 80a217e:	062b      	lsls	r3, r5, #24
 80a2180:	d50a      	bpl.n	80a2198 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
        writePixel(x + i, y, color);
 80a2182:	9b02      	ldr	r3, [sp, #8]
 80a2184:	9207      	str	r2, [sp, #28]
 80a2186:	4419      	add	r1, r3
 80a2188:	6823      	ldr	r3, [r4, #0]
 80a218a:	4620      	mov	r0, r4
 80a218c:	699b      	ldr	r3, [r3, #24]
 80a218e:	b209      	sxth	r1, r1
 80a2190:	461f      	mov	r7, r3
 80a2192:	4653      	mov	r3, sl
 80a2194:	47b8      	blx	r7
 80a2196:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
 80a2198:	f109 0901 	add.w	r9, r9, #1
 80a219c:	e7e1      	b.n	80a2162 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x52>
  for (int16_t j = 0; j < h; j++, y++) {
 80a219e:	9b01      	ldr	r3, [sp, #4]
 80a21a0:	445e      	add	r6, fp
 80a21a2:	3301      	adds	r3, #1
 80a21a4:	9301      	str	r3, [sp, #4]
 80a21a6:	e7ce      	b.n	80a2146 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x36>
  endWrite();
 80a21a8:	4620      	mov	r0, r4
 80a21aa:	6823      	ldr	r3, [r4, #0]
 80a21ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a21ae:	b009      	add	sp, #36	; 0x24
 80a21b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 80a21b4:	4718      	bx	r3
	...

080a21b8 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
 80a21b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a21bc:	b091      	sub	sp, #68	; 0x44
 80a21be:	4617      	mov	r7, r2
 80a21c0:	461e      	mov	r6, r3
  if (!gfxFont) { // 'Classic' built-in font
 80a21c2:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
 80a21c4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80a21c8:	4682      	mov	sl, r0
 80a21ca:	f8bd 806c 	ldrh.w	r8, [sp, #108]	; 0x6c
 80a21ce:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
 80a21d2:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 80a21d6:	9105      	str	r1, [sp, #20]
 80a21d8:	9302      	str	r3, [sp, #8]
  if (!gfxFont) { // 'Classic' built-in font
 80a21da:	2a00      	cmp	r2, #0
 80a21dc:	f040 80b9 	bne.w	80a2352 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x19a>
    if ((x >= _width) ||              // Clip right
 80a21e0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a21e4:	428b      	cmp	r3, r1
 80a21e6:	f340 813c 	ble.w	80a2462 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
 80a21ea:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80a21ee:	42bb      	cmp	r3, r7
 80a21f0:	f340 8137 	ble.w	80a2462 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 80a21f4:	2306      	movs	r3, #6
 80a21f6:	fb03 1305 	mla	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
 80a21fa:	2b00      	cmp	r3, #0
 80a21fc:	f340 8131 	ble.w	80a2462 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 80a2200:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
 80a2204:	2b00      	cmp	r3, #0
 80a2206:	f340 812c 	ble.w	80a2462 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
    if (!_cp437 && (c >= 176))
 80a220a:	7f03      	ldrb	r3, [r0, #28]
 80a220c:	b91b      	cbnz	r3, 80a2216 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x5e>
 80a220e:	2eaf      	cmp	r6, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
 80a2210:	bf84      	itt	hi
 80a2212:	3601      	addhi	r6, #1
 80a2214:	b2f6      	uxtbhi	r6, r6
    startWrite();
 80a2216:	f8da 3000 	ldr.w	r3, [sl]
 80a221a:	4650      	mov	r0, sl
 80a221c:	695b      	ldr	r3, [r3, #20]
 80a221e:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a2220:	2305      	movs	r3, #5
 80a2222:	9309      	str	r3, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80a2224:	2300      	movs	r3, #0
 80a2226:	9304      	str	r3, [sp, #16]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a2228:	4b8f      	ldr	r3, [pc, #572]	; (80a2468 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b0>)
 80a222a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80a222e:	4433      	add	r3, r6
 80a2230:	930c      	str	r3, [sp, #48]	; 0x30
 80a2232:	b2bb      	uxth	r3, r7
 80a2234:	9306      	str	r3, [sp, #24]
 80a2236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a2238:	9a04      	ldr	r2, [sp, #16]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80a223a:	f8bd 6010 	ldrh.w	r6, [sp, #16]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a223e:	5c9b      	ldrb	r3, [r3, r2]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80a2240:	f04f 0900 	mov.w	r9, #0
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a2244:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80a2246:	b2ab      	uxth	r3, r5
 80a2248:	930b      	str	r3, [sp, #44]	; 0x2c
 80a224a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a224e:	9303      	str	r3, [sp, #12]
 80a2250:	fb05 3306 	mla	r3, r5, r6, r3
 80a2254:	b21b      	sxth	r3, r3
 80a2256:	9308      	str	r3, [sp, #32]
 80a2258:	2308      	movs	r3, #8
 80a225a:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
 80a225c:	9b03      	ldr	r3, [sp, #12]
 80a225e:	441e      	add	r6, r3
 80a2260:	b236      	sxth	r6, r6
        if (line & 1) {
 80a2262:	9a07      	ldr	r2, [sp, #28]
 80a2264:	f8da 3000 	ldr.w	r3, [sl]
 80a2268:	07d2      	lsls	r2, r2, #31
 80a226a:	d54d      	bpl.n	80a2308 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x150>
          if (size_x == 1 && size_y == 1)
 80a226c:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 80a226e:	9906      	ldr	r1, [sp, #24]
 80a2270:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 80a2274:	d13b      	bne.n	80a22ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x136>
 80a2276:	2c01      	cmp	r4, #1
 80a2278:	d139      	bne.n	80a22ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x136>
            writePixel(x + i, y + j, color);
 80a227a:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a227e:	9b02      	ldr	r3, [sp, #8]
 80a2280:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
 80a2282:	4631      	mov	r1, r6
 80a2284:	4650      	mov	r0, sl
 80a2286:	b212      	sxth	r2, r2
 80a2288:	47d8      	blx	fp
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80a228a:	9b07      	ldr	r3, [sp, #28]
 80a228c:	f109 0901 	add.w	r9, r9, #1
 80a2290:	085b      	lsrs	r3, r3, #1
 80a2292:	9307      	str	r3, [sp, #28]
 80a2294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a2296:	fa4f f989 	sxtb.w	r9, r9
 80a229a:	3b01      	subs	r3, #1
 80a229c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a22a0:	930a      	str	r3, [sp, #40]	; 0x28
 80a22a2:	d1de      	bne.n	80a2262 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xaa>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80a22a4:	9b04      	ldr	r3, [sp, #16]
 80a22a6:	3301      	adds	r3, #1
 80a22a8:	b25b      	sxtb	r3, r3
 80a22aa:	9304      	str	r3, [sp, #16]
 80a22ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a22ae:	3b01      	subs	r3, #1
 80a22b0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a22b4:	9309      	str	r3, [sp, #36]	; 0x24
 80a22b6:	d1be      	bne.n	80a2236 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x7e>
    if (bg != color) { // If opaque, draw vertical line for last column
 80a22b8:	9b02      	ldr	r3, [sp, #8]
 80a22ba:	4543      	cmp	r3, r8
 80a22bc:	d00f      	beq.n	80a22de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x126>
      if (size_x == 1 && size_y == 1)
 80a22be:	2d01      	cmp	r5, #1
 80a22c0:	f8da 3000 	ldr.w	r3, [sl]
 80a22c4:	d134      	bne.n	80a2330 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x178>
 80a22c6:	2c01      	cmp	r4, #1
 80a22c8:	d132      	bne.n	80a2330 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x178>
        writeFastVLine(x + 5, y, 8, bg);
 80a22ca:	9903      	ldr	r1, [sp, #12]
 80a22cc:	f8cd 8000 	str.w	r8, [sp]
 80a22d0:	3105      	adds	r1, #5
 80a22d2:	6a1c      	ldr	r4, [r3, #32]
 80a22d4:	463a      	mov	r2, r7
 80a22d6:	2308      	movs	r3, #8
 80a22d8:	4650      	mov	r0, sl
 80a22da:	b209      	sxth	r1, r1
 80a22dc:	47a0      	blx	r4
    endWrite();
 80a22de:	4650      	mov	r0, sl
 80a22e0:	f8da 3000 	ldr.w	r3, [sl]
 80a22e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a22e6:	b011      	add	sp, #68	; 0x44
 80a22e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 80a22ec:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 80a22ee:	fb04 1202 	mla	r2, r4, r2, r1
 80a22f2:	9902      	ldr	r1, [sp, #8]
 80a22f4:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80a22f6:	9400      	str	r4, [sp, #0]
 80a22f8:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80a22fc:	4650      	mov	r0, sl
 80a22fe:	462b      	mov	r3, r5
 80a2300:	9908      	ldr	r1, [sp, #32]
 80a2302:	b212      	sxth	r2, r2
 80a2304:	47d8      	blx	fp
 80a2306:	e7c0      	b.n	80a228a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd2>
        } else if (bg != color) {
 80a2308:	9a02      	ldr	r2, [sp, #8]
 80a230a:	4542      	cmp	r2, r8
 80a230c:	d0bd      	beq.n	80a228a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd2>
          if (size_x == 1 && size_y == 1)
 80a230e:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, bg);
 80a2310:	9906      	ldr	r1, [sp, #24]
 80a2312:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 80a2316:	d106      	bne.n	80a2326 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x16e>
 80a2318:	2c01      	cmp	r4, #1
 80a231a:	d104      	bne.n	80a2326 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x16e>
            writePixel(x + i, y + j, bg);
 80a231c:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a2320:	440a      	add	r2, r1
 80a2322:	4643      	mov	r3, r8
 80a2324:	e7ad      	b.n	80a2282 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xca>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80a2326:	fb04 1202 	mla	r2, r4, r2, r1
 80a232a:	f8cd 8004 	str.w	r8, [sp, #4]
 80a232e:	e7e2      	b.n	80a22f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x13e>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80a2330:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a2332:	00e4      	lsls	r4, r4, #3
 80a2334:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80a2338:	9a03      	ldr	r2, [sp, #12]
 80a233a:	f8cd 8004 	str.w	r8, [sp, #4]
 80a233e:	440a      	add	r2, r1
 80a2340:	4611      	mov	r1, r2
 80a2342:	9400      	str	r4, [sp, #0]
 80a2344:	69dc      	ldr	r4, [r3, #28]
 80a2346:	463a      	mov	r2, r7
 80a2348:	462b      	mov	r3, r5
 80a234a:	4650      	mov	r0, sl
 80a234c:	b209      	sxth	r1, r1
 80a234e:	47a0      	blx	r4
    endWrite();
 80a2350:	e7c5      	b.n	80a22de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x126>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80a2352:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
 80a2354:	6851      	ldr	r1, [r2, #4]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80a2356:	1af6      	subs	r6, r6, r3
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
 80a2358:	6812      	ldr	r2, [r2, #0]
  return gfxFont->glyph + c;
 80a235a:	b2f6      	uxtb	r6, r6
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
 80a235c:	920e      	str	r2, [sp, #56]	; 0x38
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80a235e:	f831 2036 	ldrh.w	r2, [r1, r6, lsl #3]
  return gfxFont->glyph + c;
 80a2362:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80a2366:	9204      	str	r2, [sp, #16]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 80a2368:	789a      	ldrb	r2, [r3, #2]
    if (size_x > 1 || size_y > 1) {
 80a236a:	2d01      	cmp	r5, #1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 80a236c:	9208      	str	r2, [sp, #32]
 80a236e:	78da      	ldrb	r2, [r3, #3]
           yo = pgm_read_byte(&glyph->yOffset);
 80a2370:	f993 b006 	ldrsb.w	fp, [r3, #6]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 80a2374:	920c      	str	r2, [sp, #48]	; 0x30
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 80a2376:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80a237a:	9209      	str	r2, [sp, #36]	; 0x24
    if (size_x > 1 || size_y > 1) {
 80a237c:	d801      	bhi.n	80a2382 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ca>
 80a237e:	2c01      	cmp	r4, #1
 80a2380:	d953      	bls.n	80a242a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x272>
      xo16 = xo;
 80a2382:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80a2386:	9307      	str	r3, [sp, #28]
      yo16 = yo;
 80a2388:	fa0f f38b 	sxth.w	r3, fp
 80a238c:	9306      	str	r3, [sp, #24]
    uint8_t xx, yy, bits = 0, bit = 0;
 80a238e:	f04f 0800 	mov.w	r8, #0
 80a2392:	46c1      	mov	r9, r8
    startWrite();
 80a2394:	f8da 3000 	ldr.w	r3, [sl]
 80a2398:	4650      	mov	r0, sl
 80a239a:	695b      	ldr	r3, [r3, #20]
 80a239c:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 80a239e:	b2bb      	uxth	r3, r7
 80a23a0:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + xo + xx, y + yo + yy, color);
 80a23a2:	445b      	add	r3, fp
    for (yy = 0; yy < h; yy++) {
 80a23a4:	f8cd 800c 	str.w	r8, [sp, #12]
            writePixel(x + xo + xx, y + yo + yy, color);
 80a23a8:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
 80a23aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a23ac:	9a03      	ldr	r2, [sp, #12]
 80a23ae:	429a      	cmp	r2, r3
 80a23b0:	d295      	bcs.n	80a22de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x126>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 80a23b2:	9b06      	ldr	r3, [sp, #24]
      for (xx = 0; xx < w; xx++) {
 80a23b4:	2700      	movs	r7, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 80a23b6:	4413      	add	r3, r2
 80a23b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            writePixel(x + xo + xx, y + yo + yy, color);
 80a23ba:	9903      	ldr	r1, [sp, #12]
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 80a23bc:	fb03 2304 	mla	r3, r3, r4, r2
 80a23c0:	b21b      	sxth	r3, r3
 80a23c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80a23c4:	4643      	mov	r3, r8
            writePixel(x + xo + xx, y + yo + yy, color);
 80a23c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a23c8:	eb02 0b01 	add.w	fp, r2, r1
 80a23cc:	fa0f fb8b 	sxth.w	fp, fp
      for (xx = 0; xx < w; xx++) {
 80a23d0:	9a08      	ldr	r2, [sp, #32]
 80a23d2:	4297      	cmp	r7, r2
 80a23d4:	d23c      	bcs.n	80a2450 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x298>
        if (!(bit++ & 7)) {
 80a23d6:	1c5a      	adds	r2, r3, #1
 80a23d8:	b2d2      	uxtb	r2, r2
 80a23da:	075b      	lsls	r3, r3, #29
 80a23dc:	920d      	str	r2, [sp, #52]	; 0x34
 80a23de:	d107      	bne.n	80a23f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x238>
          bits = pgm_read_byte(&bitmap[bo++]);
 80a23e0:	9b04      	ldr	r3, [sp, #16]
 80a23e2:	9904      	ldr	r1, [sp, #16]
 80a23e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a23e6:	3301      	adds	r3, #1
 80a23e8:	b29b      	uxth	r3, r3
 80a23ea:	f812 9001 	ldrb.w	r9, [r2, r1]
 80a23ee:	9304      	str	r3, [sp, #16]
        if (bits & 0x80) {
 80a23f0:	f019 0f80 	tst.w	r9, #128	; 0x80
 80a23f4:	d011      	beq.n	80a241a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x262>
          if (size_x == 1 && size_y == 1) {
 80a23f6:	2d01      	cmp	r5, #1
 80a23f8:	f8da 3000 	ldr.w	r3, [sl]
 80a23fc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80a2400:	d117      	bne.n	80a2432 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x27a>
 80a2402:	2c01      	cmp	r4, #1
 80a2404:	d115      	bne.n	80a2432 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x27a>
            writePixel(x + xo + xx, y + yo + yy, color);
 80a2406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a2408:	699b      	ldr	r3, [r3, #24]
 80a240a:	4411      	add	r1, r2
 80a240c:	4439      	add	r1, r7
 80a240e:	461e      	mov	r6, r3
 80a2410:	465a      	mov	r2, fp
 80a2412:	4650      	mov	r0, sl
 80a2414:	9b02      	ldr	r3, [sp, #8]
 80a2416:	b209      	sxth	r1, r1
 80a2418:	47b0      	blx	r6
        bits <<= 1;
 80a241a:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
 80a241e:	3701      	adds	r7, #1
        if (!(bit++ & 7)) {
 80a2420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        bits <<= 1;
 80a2422:	fa5f f989 	uxtb.w	r9, r9
      for (xx = 0; xx < w; xx++) {
 80a2426:	b2ff      	uxtb	r7, r7
 80a2428:	e7d2      	b.n	80a23d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x218>
    int16_t xo16 = 0, yo16 = 0;
 80a242a:	2300      	movs	r3, #0
 80a242c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80a2430:	e7ad      	b.n	80a238e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1d6>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 80a2432:	9a07      	ldr	r2, [sp, #28]
 80a2434:	4650      	mov	r0, sl
 80a2436:	443a      	add	r2, r7
 80a2438:	fb02 1105 	mla	r1, r2, r5, r1
 80a243c:	9a02      	ldr	r2, [sp, #8]
 80a243e:	b209      	sxth	r1, r1
 80a2440:	e9cd 4200 	strd	r4, r2, [sp]
 80a2444:	69db      	ldr	r3, [r3, #28]
 80a2446:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a2448:	461e      	mov	r6, r3
 80a244a:	462b      	mov	r3, r5
 80a244c:	47b0      	blx	r6
 80a244e:	e7e4      	b.n	80a241a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x262>
    for (yy = 0; yy < h; yy++) {
 80a2450:	9e03      	ldr	r6, [sp, #12]
 80a2452:	9b08      	ldr	r3, [sp, #32]
 80a2454:	3601      	adds	r6, #1
 80a2456:	4498      	add	r8, r3
 80a2458:	b2f3      	uxtb	r3, r6
 80a245a:	fa5f f888 	uxtb.w	r8, r8
 80a245e:	9303      	str	r3, [sp, #12]
 80a2460:	e7a3      	b.n	80a23aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
}
 80a2462:	b011      	add	sp, #68	; 0x44
 80a2464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2468:	080a6594 	.word	0x080a6594

080a246c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 80a246c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
 80a246e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 80a2470:	4604      	mov	r4, r0
 80a2472:	460b      	mov	r3, r1
 80a2474:	b085      	sub	sp, #20
  if (!gfxFont) { // 'Classic' built-in font
 80a2476:	2a00      	cmp	r2, #0
 80a2478:	d134      	bne.n	80a24e4 <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
 80a247a:	290a      	cmp	r1, #10
 80a247c:	d108      	bne.n	80a2490 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
 80a247e:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
 80a2480:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
 80a2482:	7e42      	ldrb	r2, [r0, #25]
 80a2484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
 80a2488:	8263      	strh	r3, [r4, #18]
}
 80a248a:	2001      	movs	r0, #1
 80a248c:	b005      	add	sp, #20
 80a248e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
 80a2490:	290d      	cmp	r1, #13
 80a2492:	d0fa      	beq.n	80a248a <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 80a2494:	7ee1      	ldrb	r1, [r4, #27]
 80a2496:	7e00      	ldrb	r0, [r0, #24]
 80a2498:	7e65      	ldrb	r5, [r4, #25]
 80a249a:	b171      	cbz	r1, 80a24ba <_ZN12Adafruit_GFX5writeEh+0x4e>
 80a249c:	2106      	movs	r1, #6
 80a249e:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 80a24a2:	fb01 6100 	mla	r1, r1, r0, r6
 80a24a6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80a24aa:	42b1      	cmp	r1, r6
 80a24ac:	bfc1      	itttt	gt
 80a24ae:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
 80a24b2:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
 80a24b4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 80a24b8:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 80a24ba:	8ae2      	ldrh	r2, [r4, #22]
 80a24bc:	e9cd 0502 	strd	r0, r5, [sp, #8]
 80a24c0:	9201      	str	r2, [sp, #4]
 80a24c2:	8aa2      	ldrh	r2, [r4, #20]
 80a24c4:	4620      	mov	r0, r4
 80a24c6:	9200      	str	r2, [sp, #0]
 80a24c8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a24cc:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a24d0:	f7ff fe72 	bl	80a21b8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
 80a24d4:	7e23      	ldrb	r3, [r4, #24]
 80a24d6:	8a22      	ldrh	r2, [r4, #16]
 80a24d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a24dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
 80a24e0:	8223      	strh	r3, [r4, #16]
 80a24e2:	e7d2      	b.n	80a248a <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
 80a24e4:	290a      	cmp	r1, #10
 80a24e6:	d107      	bne.n	80a24f8 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
 80a24e8:	2300      	movs	r3, #0
 80a24ea:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a24ec:	7b13      	ldrb	r3, [r2, #12]
 80a24ee:	7e41      	ldrb	r1, [r0, #25]
      cursor_y +=
 80a24f0:	8a42      	ldrh	r2, [r0, #18]
 80a24f2:	fb01 2303 	mla	r3, r1, r3, r2
 80a24f6:	e7c7      	b.n	80a2488 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
 80a24f8:	290d      	cmp	r1, #13
 80a24fa:	d0c6      	beq.n	80a248a <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 80a24fc:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80a24fe:	42a9      	cmp	r1, r5
 80a2500:	d3c3      	bcc.n	80a248a <_ZN12Adafruit_GFX5writeEh+0x1e>
 80a2502:	7a91      	ldrb	r1, [r2, #10]
 80a2504:	4299      	cmp	r1, r3
 80a2506:	d3c0      	bcc.n	80a248a <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
 80a2508:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 80a250a:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
 80a250c:	b2ed      	uxtb	r5, r5
 80a250e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
 80a2512:	78af      	ldrb	r7, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 80a2514:	b32f      	cbz	r7, 80a2562 <_ZN12Adafruit_GFX5writeEh+0xf6>
 80a2516:	78e9      	ldrb	r1, [r5, #3]
 80a2518:	b319      	cbz	r1, 80a2562 <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 80a251a:	7ee1      	ldrb	r1, [r4, #27]
 80a251c:	7e00      	ldrb	r0, [r0, #24]
 80a251e:	7e66      	ldrb	r6, [r4, #25]
 80a2520:	b191      	cbz	r1, 80a2548 <_ZN12Adafruit_GFX5writeEh+0xdc>
 80a2522:	f995 1005 	ldrsb.w	r1, [r5, #5]
 80a2526:	4439      	add	r1, r7
 80a2528:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
 80a252c:	fb00 7101 	mla	r1, r0, r1, r7
 80a2530:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80a2534:	42b9      	cmp	r1, r7
 80a2536:	dd07      	ble.n	80a2548 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
 80a2538:	2700      	movs	r7, #0
 80a253a:	8227      	strh	r7, [r4, #16]
 80a253c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a2540:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
 80a2542:	fb02 1206 	mla	r2, r2, r6, r1
 80a2546:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 80a2548:	8ae2      	ldrh	r2, [r4, #22]
 80a254a:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80a254e:	9201      	str	r2, [sp, #4]
 80a2550:	8aa2      	ldrh	r2, [r4, #20]
 80a2552:	4620      	mov	r0, r4
 80a2554:	9200      	str	r2, [sp, #0]
 80a2556:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a255a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a255e:	f7ff fe2b 	bl	80a21b8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 80a2562:	7929      	ldrb	r1, [r5, #4]
 80a2564:	7e23      	ldrb	r3, [r4, #24]
        cursor_x +=
 80a2566:	8a22      	ldrh	r2, [r4, #16]
 80a2568:	fb01 2303 	mla	r3, r1, r3, r2
 80a256c:	e7b8      	b.n	80a24e0 <_ZN12Adafruit_GFX5writeEh+0x74>

080a256e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
 80a256e:	2901      	cmp	r1, #1
 80a2570:	bf38      	it	cc
 80a2572:	2101      	movcc	r1, #1
 80a2574:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
 80a2576:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 80a2578:	4770      	bx	lr

080a257a <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
 80a257a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a257e:	4604      	mov	r4, r0
 80a2580:	b08b      	sub	sp, #44	; 0x2c
 80a2582:	f000 f99b 	bl	80a28bc <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 80a2586:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
 80a258a:	f9b4 503a 	ldrsh.w	r5, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 80a258e:	1dda      	adds	r2, r3, #7
 80a2590:	bf48      	it	mi
 80a2592:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
 80a2596:	2340      	movs	r3, #64	; 0x40
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 80a2598:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
 80a259c:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
  uint8_t bytes_per_page = WIDTH;
 80a25a0:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
 80a25a2:	2d00      	cmp	r5, #0
 80a25a4:	bfb8      	it	lt
 80a25a6:	3507      	addlt	r5, #7
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
 80a25a8:	45b9      	cmp	r9, r7
 80a25aa:	bf28      	it	cs
 80a25ac:	46b9      	movcs	r9, r7
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};

      digitalWrite(dcPin, LOW);
 80a25ae:	f04f 0b00 	mov.w	fp, #0
  uint8_t dc_byte = 0x40;
 80a25b2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
 80a25b6:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 80a25ba:	9303      	str	r3, [sp, #12]
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
 80a25bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  uint8_t first_page = window_y1 / 8;
 80a25be:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
 80a25c2:	68db      	ldr	r3, [r3, #12]
 80a25c4:	fb07 9a05 	mla	sl, r7, r5, r9
 80a25c8:	3b01      	subs	r3, #1
 80a25ca:	b29b      	uxth	r3, r3
 80a25cc:	9304      	str	r3, [sp, #16]
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
 80a25ce:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
    bytes_remaining -= (WIDTH - 1) - page_end;
 80a25d2:	1c7a      	adds	r2, r7, #1
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
 80a25d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80a25d8:	b2db      	uxtb	r3, r3
    bytes_remaining -= (WIDTH - 1) - page_end;
 80a25da:	4413      	add	r3, r2
 80a25dc:	9306      	str	r3, [sp, #24]
  for (uint8_t p = first_page; p < pages; p++) {
 80a25de:	9b03      	ldr	r3, [sp, #12]
 80a25e0:	429d      	cmp	r5, r3
 80a25e2:	d26b      	bcs.n	80a26bc <_ZN15Adafruit_SH110X7displayEv+0x142>
    ptr += page_start;
 80a25e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
 80a25e6:	7a26      	ldrb	r6, [r4, #8]
 80a25e8:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
 80a25ec:	eb03 080a 	add.w	r8, r3, sl
    bytes_remaining -= (WIDTH - 1) - page_end;
 80a25f0:	9b06      	ldr	r3, [sp, #24]
 80a25f2:	444a      	add	r2, r9
 80a25f4:	1b9e      	subs	r6, r3, r6
    if (i2c_dev) { // I2C
 80a25f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a25f8:	1111      	asrs	r1, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
 80a25fa:	eba6 0609 	sub.w	r6, r6, r9
 80a25fe:	f1a5 0050 	sub.w	r0, r5, #80	; 0x50
 80a2602:	b2f6      	uxtb	r6, r6
    if (i2c_dev) { // I2C
 80a2604:	b2c0      	uxtb	r0, r0
 80a2606:	3110      	adds	r1, #16
 80a2608:	f002 020f 	and.w	r2, r2, #15
 80a260c:	2b00      	cmp	r3, #0
 80a260e:	d035      	beq.n	80a267c <_ZN15Adafruit_SH110X7displayEv+0x102>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 80a2610:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80a2614:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
      i2c_dev->setSpeed(i2c_preclk);
 80a2618:	4618      	mov	r0, r3
 80a261a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 80a261c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      uint8_t cmd[] = {
 80a2620:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
 80a2624:	f7ff f823 	bl	80a166e <_ZN18Adafruit_I2CDevice8setSpeedEm>
      i2c_dev->write(cmd, 4);
 80a2628:	2301      	movs	r3, #1
 80a262a:	2204      	movs	r2, #4
 80a262c:	e9cd bb00 	strd	fp, fp, [sp]
 80a2630:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a2632:	a909      	add	r1, sp, #36	; 0x24
 80a2634:	f7fe ff96 	bl	80a1564 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
 80a2638:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80a263c:	9305      	str	r3, [sp, #20]
      while (bytes_remaining) {
 80a263e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a2640:	b1ae      	cbz	r6, 80a266e <_ZN15Adafruit_SH110X7displayEv+0xf4>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
 80a2642:	9b05      	ldr	r3, [sp, #20]
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
 80a2644:	4641      	mov	r1, r8
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
 80a2646:	42b3      	cmp	r3, r6
 80a2648:	bf28      	it	cs
 80a264a:	4633      	movcs	r3, r6
 80a264c:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
 80a264e:	2301      	movs	r3, #1
 80a2650:	9301      	str	r3, [sp, #4]
 80a2652:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80a2656:	9300      	str	r3, [sp, #0]
 80a2658:	2301      	movs	r3, #1
 80a265a:	9207      	str	r2, [sp, #28]
 80a265c:	f7fe ff82 	bl	80a1564 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
 80a2660:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
 80a2662:	1ab6      	subs	r6, r6, r2
        ptr += to_write;
 80a2664:	4490      	add	r8, r2
        bytes_remaining -= to_write;
 80a2666:	b2f6      	uxtb	r6, r6
 80a2668:	f000 f928 	bl	80a28bc <os_thread_yield>
#endif // PLATFORM_THREADING
}
 80a266c:	e7e7      	b.n	80a263e <_ZN15Adafruit_SH110X7displayEv+0xc4>
      i2c_dev->setSpeed(i2c_postclk);
 80a266e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80a2670:	f7fe fffd 	bl	80a166e <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
 80a2674:	3501      	adds	r5, #1
 80a2676:	b2ed      	uxtb	r5, r5
 80a2678:	44ba      	add	sl, r7
 80a267a:	e7b0      	b.n	80a25de <_ZN15Adafruit_SH110X7displayEv+0x64>
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 80a267c:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
 80a2680:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
      digitalWrite(dcPin, LOW);
 80a2684:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 80a2688:	4619      	mov	r1, r3
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 80a268a:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
 80a268e:	9305      	str	r3, [sp, #20]
 80a2690:	f001 f981 	bl	80a3996 <digitalWrite>
      spi_dev->write(cmd, 3);
 80a2694:	9b05      	ldr	r3, [sp, #20]
 80a2696:	2203      	movs	r2, #3
 80a2698:	9300      	str	r3, [sp, #0]
 80a269a:	a909      	add	r1, sp, #36	; 0x24
 80a269c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a269e:	f7fe ff04 	bl	80a14aa <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
 80a26a2:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 80a26a6:	2101      	movs	r1, #1
 80a26a8:	f001 f975 	bl	80a3996 <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
 80a26ac:	9b05      	ldr	r3, [sp, #20]
 80a26ae:	4632      	mov	r2, r6
 80a26b0:	4641      	mov	r1, r8
 80a26b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a26b4:	9300      	str	r3, [sp, #0]
 80a26b6:	f7fe fef8 	bl	80a14aa <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
 80a26ba:	e7db      	b.n	80a2674 <_ZN15Adafruit_SH110X7displayEv+0xfa>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
 80a26bc:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 80a26c0:	f04f 33ff 	mov.w	r3, #4294967295
 80a26c4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
 80a26c8:	b00b      	add	sp, #44	; 0x2c
 80a26ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a26d0 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
 80a26d0:	b530      	push	{r4, r5, lr}
 80a26d2:	4604      	mov	r4, r0
 80a26d4:	b085      	sub	sp, #20
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
 80a26d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a26d8:	9503      	str	r5, [sp, #12]
 80a26da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a26dc:	9502      	str	r5, [sp, #8]
 80a26de:	f99d 5020 	ldrsb.w	r5, [sp, #32]
 80a26e2:	e9cd 3500 	strd	r3, r5, [sp]
 80a26e6:	4613      	mov	r3, r2
 80a26e8:	460a      	mov	r2, r1
 80a26ea:	2101      	movs	r1, #1
 80a26ec:	f7ff fa5e 	bl	80a1bac <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
 80a26f0:	4b03      	ldr	r3, [pc, #12]	; (80a2700 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
 80a26f2:	4620      	mov	r0, r4
 80a26f4:	6023      	str	r3, [r4, #0]
 80a26f6:	2300      	movs	r3, #0
 80a26f8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80a26fc:	b005      	add	sp, #20
 80a26fe:	bd30      	pop	{r4, r5, pc}
 80a2700:	080a6af4 	.word	0x080a6af4

080a2704 <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
 80a2704:	b510      	push	{r4, lr}
 80a2706:	4604      	mov	r4, r0
 80a2708:	4b02      	ldr	r3, [pc, #8]	; (80a2714 <_ZN15Adafruit_SH110XD1Ev+0x10>)
 80a270a:	6003      	str	r3, [r0, #0]
 80a270c:	f7ff fa70 	bl	80a1bf0 <_ZN17Adafruit_GrayOLEDD1Ev>
 80a2710:	4620      	mov	r0, r4
 80a2712:	bd10      	pop	{r4, pc}
 80a2714:	080a6af4 	.word	0x080a6af4

080a2718 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
 80a2718:	b510      	push	{r4, lr}
 80a271a:	4604      	mov	r4, r0
 80a271c:	4b02      	ldr	r3, [pc, #8]	; (80a2728 <_ZN15Adafruit_SH1107D1Ev+0x10>)
 80a271e:	6003      	str	r3, [r0, #0]
 80a2720:	f7ff fff0 	bl	80a2704 <_ZN15Adafruit_SH110XD1Ev>
 80a2724:	4620      	mov	r0, r4
 80a2726:	bd10      	pop	{r4, pc}
 80a2728:	080a6d30 	.word	0x080a6d30

080a272c <_ZN15Adafruit_SH1107D0Ev>:
 80a272c:	b510      	push	{r4, lr}
 80a272e:	4604      	mov	r4, r0
 80a2730:	f7ff fff2 	bl	80a2718 <_ZN15Adafruit_SH1107D1Ev>
 80a2734:	4620      	mov	r0, r4
 80a2736:	2158      	movs	r1, #88	; 0x58
 80a2738:	f001 f9a6 	bl	80a3a88 <_ZdlPvj>
 80a273c:	4620      	mov	r0, r4
 80a273e:	bd10      	pop	{r4, pc}

080a2740 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
 80a2740:	b530      	push	{r4, r5, lr}
 80a2742:	4604      	mov	r4, r0
 80a2744:	b085      	sub	sp, #20
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
 80a2746:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a2748:	9502      	str	r5, [sp, #8]
 80a274a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a274c:	9501      	str	r5, [sp, #4]
 80a274e:	f99d 5020 	ldrsb.w	r5, [sp, #32]
 80a2752:	9500      	str	r5, [sp, #0]
 80a2754:	f7ff ffbc 	bl	80a26d0 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
 80a2758:	4620      	mov	r0, r4
 80a275a:	4b02      	ldr	r3, [pc, #8]	; (80a2764 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
 80a275c:	6023      	str	r3, [r4, #0]
 80a275e:	b005      	add	sp, #20
 80a2760:	bd30      	pop	{r4, r5, pc}
 80a2762:	bf00      	nop
 80a2764:	080a6d30 	.word	0x080a6d30

080a2768 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
 80a2768:	b530      	push	{r4, r5, lr}
 80a276a:	4604      	mov	r4, r0
 80a276c:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
 80a276e:	f7ff fac3 	bl	80a1cf8 <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
 80a2772:	212f      	movs	r1, #47	; 0x2f
 80a2774:	4620      	mov	r0, r4
 80a2776:	f7ff fb28 	bl	80a1dca <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
 80a277a:	68a2      	ldr	r2, [r4, #8]
 80a277c:	4b2f      	ldr	r3, [pc, #188]	; (80a283c <_ZN15Adafruit_SH11075beginEhb+0xd4>)
 80a277e:	429a      	cmp	r2, r3
 80a2780:	d121      	bne.n	80a27c6 <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
 80a2782:	6823      	ldr	r3, [r4, #0]
 80a2784:	2101      	movs	r1, #1
 80a2786:	4620      	mov	r0, r4
 80a2788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a278a:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
 80a278c:	2501      	movs	r5, #1
 80a278e:	2320      	movs	r3, #32
 80a2790:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80a2794:	2373      	movs	r3, #115	; 0x73
 80a2796:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80a279a:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80a279e:	3a20      	subs	r2, #32
 80a27a0:	3973      	subs	r1, #115	; 0x73
 80a27a2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80a27a6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80a27aa:	4620      	mov	r0, r4
 80a27ac:	9300      	str	r3, [sp, #0]
 80a27ae:	f341 014f 	sbfx	r1, r1, #1, #16
 80a27b2:	4b23      	ldr	r3, [pc, #140]	; (80a2840 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
 80a27b4:	f342 024f 	sbfx	r2, r2, #1, #16
 80a27b8:	f7ff fcaa 	bl	80a2110 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
 80a27bc:	6823      	ldr	r3, [r4, #0]
 80a27be:	2100      	movs	r1, #0
 80a27c0:	4620      	mov	r0, r4
 80a27c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a27c4:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
 80a27c6:	68a3      	ldr	r3, [r4, #8]
 80a27c8:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
 80a27cc:	d117      	bne.n	80a27fe <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
 80a27ce:	2320      	movs	r3, #32
 80a27d0:	2001      	movs	r0, #1
 80a27d2:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80a27d6:	2373      	movs	r3, #115	; 0x73
 80a27d8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80a27dc:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80a27e0:	3a20      	subs	r2, #32
 80a27e2:	3973      	subs	r1, #115	; 0x73
 80a27e4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80a27e8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80a27ec:	9300      	str	r3, [sp, #0]
 80a27ee:	4620      	mov	r0, r4
 80a27f0:	4b13      	ldr	r3, [pc, #76]	; (80a2840 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
 80a27f2:	f342 024f 	sbfx	r2, r2, #1, #16
 80a27f6:	f341 014f 	sbfx	r1, r1, #1, #16
 80a27fa:	f7ff fc89 	bl	80a2110 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
 80a27fe:	2216      	movs	r2, #22
 80a2800:	4620      	mov	r0, r4
 80a2802:	4910      	ldr	r1, [pc, #64]	; (80a2844 <_ZN15Adafruit_SH11075beginEhb+0xdc>)
 80a2804:	f7ff fa3b 	bl	80a1c7e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
 80a2808:	4605      	mov	r5, r0
 80a280a:	b918      	cbnz	r0, 80a2814 <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
 80a280c:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
 80a280e:	4628      	mov	r0, r5
 80a2810:	b005      	add	sp, #20
 80a2812:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
 80a2814:	68a3      	ldr	r3, [r4, #8]
 80a2816:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
 80a281a:	d007      	beq.n	80a282c <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
 80a281c:	2064      	movs	r0, #100	; 0x64
 80a281e:	f000 fcb3 	bl	80a3188 <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
 80a2822:	21af      	movs	r1, #175	; 0xaf
 80a2824:	4620      	mov	r0, r4
 80a2826:	f7ff f9ff 	bl	80a1c28 <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
 80a282a:	e7f0      	b.n	80a280e <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
 80a282c:	2204      	movs	r2, #4
 80a282e:	4620      	mov	r0, r4
 80a2830:	4905      	ldr	r1, [pc, #20]	; (80a2848 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
 80a2832:	f7ff fa24 	bl	80a1c7e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
 80a2836:	2800      	cmp	r0, #0
 80a2838:	d1f0      	bne.n	80a281c <_ZN15Adafruit_SH11075beginEhb+0xb4>
 80a283a:	e7e7      	b.n	80a280c <_ZN15Adafruit_SH11075beginEhb+0xa4>
 80a283c:	00800040 	.word	0x00800040
 80a2840:	080a6b48 	.word	0x080a6b48
 80a2844:	080a6d88 	.word	0x080a6d88
 80a2848:	080a6d84 	.word	0x080a6d84

080a284c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a284c:	b508      	push	{r3, lr}
 80a284e:	4b02      	ldr	r3, [pc, #8]	; (80a2858 <HAL_Pin_Mode+0xc>)
 80a2850:	681b      	ldr	r3, [r3, #0]
 80a2852:	689b      	ldr	r3, [r3, #8]
 80a2854:	9301      	str	r3, [sp, #4]
 80a2856:	bd08      	pop	{r3, pc}
 80a2858:	080601b0 	.word	0x080601b0

080a285c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a285c:	b508      	push	{r3, lr}
 80a285e:	4b02      	ldr	r3, [pc, #8]	; (80a2868 <HAL_Get_Pin_Mode+0xc>)
 80a2860:	681b      	ldr	r3, [r3, #0]
 80a2862:	68db      	ldr	r3, [r3, #12]
 80a2864:	9301      	str	r3, [sp, #4]
 80a2866:	bd08      	pop	{r3, pc}
 80a2868:	080601b0 	.word	0x080601b0

080a286c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a286c:	b508      	push	{r3, lr}
 80a286e:	4b02      	ldr	r3, [pc, #8]	; (80a2878 <HAL_GPIO_Write+0xc>)
 80a2870:	681b      	ldr	r3, [r3, #0]
 80a2872:	691b      	ldr	r3, [r3, #16]
 80a2874:	9301      	str	r3, [sp, #4]
 80a2876:	bd08      	pop	{r3, pc}
 80a2878:	080601b0 	.word	0x080601b0

080a287c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a287c:	b508      	push	{r3, lr}
 80a287e:	4b02      	ldr	r3, [pc, #8]	; (80a2888 <HAL_GPIO_Read+0xc>)
 80a2880:	681b      	ldr	r3, [r3, #0]
 80a2882:	695b      	ldr	r3, [r3, #20]
 80a2884:	9301      	str	r3, [sp, #4]
 80a2886:	bd08      	pop	{r3, pc}
 80a2888:	080601b0 	.word	0x080601b0

080a288c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a288c:	b508      	push	{r3, lr}
 80a288e:	4b02      	ldr	r3, [pc, #8]	; (80a2898 <HAL_RNG_GetRandomNumber+0xc>)
 80a2890:	681b      	ldr	r3, [r3, #0]
 80a2892:	685b      	ldr	r3, [r3, #4]
 80a2894:	9301      	str	r3, [sp, #4]
 80a2896:	bd08      	pop	{r3, pc}
 80a2898:	0806019c 	.word	0x0806019c

080a289c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a289c:	b508      	push	{r3, lr}
 80a289e:	4b02      	ldr	r3, [pc, #8]	; (80a28a8 <HAL_Delay_Microseconds+0xc>)
 80a28a0:	681b      	ldr	r3, [r3, #0]
 80a28a2:	68db      	ldr	r3, [r3, #12]
 80a28a4:	9301      	str	r3, [sp, #4]
 80a28a6:	bd08      	pop	{r3, pc}
 80a28a8:	0806019c 	.word	0x0806019c

080a28ac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a28ac:	b508      	push	{r3, lr}
 80a28ae:	4b02      	ldr	r3, [pc, #8]	; (80a28b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a28b0:	681b      	ldr	r3, [r3, #0]
 80a28b2:	695b      	ldr	r3, [r3, #20]
 80a28b4:	9301      	str	r3, [sp, #4]
 80a28b6:	bd08      	pop	{r3, pc}
 80a28b8:	0806019c 	.word	0x0806019c

080a28bc <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 80a28bc:	b508      	push	{r3, lr}
 80a28be:	4b02      	ldr	r3, [pc, #8]	; (80a28c8 <os_thread_yield+0xc>)
 80a28c0:	681b      	ldr	r3, [r3, #0]
 80a28c2:	68db      	ldr	r3, [r3, #12]
 80a28c4:	9301      	str	r3, [sp, #4]
 80a28c6:	bd08      	pop	{r3, pc}
 80a28c8:	080601d0 	.word	0x080601d0

080a28cc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a28cc:	b508      	push	{r3, lr}
 80a28ce:	4b02      	ldr	r3, [pc, #8]	; (80a28d8 <os_mutex_recursive_create+0xc>)
 80a28d0:	681b      	ldr	r3, [r3, #0]
 80a28d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a28d4:	9301      	str	r3, [sp, #4]
 80a28d6:	bd08      	pop	{r3, pc}
 80a28d8:	080601d0 	.word	0x080601d0

080a28dc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a28dc:	b508      	push	{r3, lr}
 80a28de:	4b02      	ldr	r3, [pc, #8]	; (80a28e8 <os_mutex_recursive_destroy+0xc>)
 80a28e0:	681b      	ldr	r3, [r3, #0]
 80a28e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a28e4:	9301      	str	r3, [sp, #4]
 80a28e6:	bd08      	pop	{r3, pc}
 80a28e8:	080601d0 	.word	0x080601d0

080a28ec <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a28ec:	b508      	push	{r3, lr}
 80a28ee:	4b02      	ldr	r3, [pc, #8]	; (80a28f8 <os_mutex_recursive_lock+0xc>)
 80a28f0:	681b      	ldr	r3, [r3, #0]
 80a28f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a28f4:	9301      	str	r3, [sp, #4]
 80a28f6:	bd08      	pop	{r3, pc}
 80a28f8:	080601d0 	.word	0x080601d0

080a28fc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a28fc:	b508      	push	{r3, lr}
 80a28fe:	4b02      	ldr	r3, [pc, #8]	; (80a2908 <os_mutex_recursive_unlock+0xc>)
 80a2900:	681b      	ldr	r3, [r3, #0]
 80a2902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2904:	9301      	str	r3, [sp, #4]
 80a2906:	bd08      	pop	{r3, pc}
 80a2908:	080601d0 	.word	0x080601d0

080a290c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a290c:	b508      	push	{r3, lr}
 80a290e:	4b02      	ldr	r3, [pc, #8]	; (80a2918 <hal_usart_init+0xc>)
 80a2910:	681b      	ldr	r3, [r3, #0]
 80a2912:	699b      	ldr	r3, [r3, #24]
 80a2914:	9301      	str	r3, [sp, #4]
 80a2916:	bd08      	pop	{r3, pc}
 80a2918:	080601c4 	.word	0x080601c4

080a291c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a291c:	b508      	push	{r3, lr}
 80a291e:	4b02      	ldr	r3, [pc, #8]	; (80a2928 <hal_usart_write+0xc>)
 80a2920:	681b      	ldr	r3, [r3, #0]
 80a2922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2924:	9301      	str	r3, [sp, #4]
 80a2926:	bd08      	pop	{r3, pc}
 80a2928:	080601c4 	.word	0x080601c4

080a292c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a292c:	b508      	push	{r3, lr}
 80a292e:	4b02      	ldr	r3, [pc, #8]	; (80a2938 <hal_usart_available+0xc>)
 80a2930:	681b      	ldr	r3, [r3, #0]
 80a2932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2934:	9301      	str	r3, [sp, #4]
 80a2936:	bd08      	pop	{r3, pc}
 80a2938:	080601c4 	.word	0x080601c4

080a293c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a293c:	b508      	push	{r3, lr}
 80a293e:	4b02      	ldr	r3, [pc, #8]	; (80a2948 <hal_usart_read+0xc>)
 80a2940:	681b      	ldr	r3, [r3, #0]
 80a2942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2944:	9301      	str	r3, [sp, #4]
 80a2946:	bd08      	pop	{r3, pc}
 80a2948:	080601c4 	.word	0x080601c4

080a294c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a294c:	b508      	push	{r3, lr}
 80a294e:	4b02      	ldr	r3, [pc, #8]	; (80a2958 <hal_usart_peek+0xc>)
 80a2950:	681b      	ldr	r3, [r3, #0]
 80a2952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2954:	9301      	str	r3, [sp, #4]
 80a2956:	bd08      	pop	{r3, pc}
 80a2958:	080601c4 	.word	0x080601c4

080a295c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a295c:	b508      	push	{r3, lr}
 80a295e:	4b02      	ldr	r3, [pc, #8]	; (80a2968 <hal_usart_flush+0xc>)
 80a2960:	681b      	ldr	r3, [r3, #0]
 80a2962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2964:	9301      	str	r3, [sp, #4]
 80a2966:	bd08      	pop	{r3, pc}
 80a2968:	080601c4 	.word	0x080601c4

080a296c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a296c:	b508      	push	{r3, lr}
 80a296e:	4b02      	ldr	r3, [pc, #8]	; (80a2978 <hal_usart_is_enabled+0xc>)
 80a2970:	681b      	ldr	r3, [r3, #0]
 80a2972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2974:	9301      	str	r3, [sp, #4]
 80a2976:	bd08      	pop	{r3, pc}
 80a2978:	080601c4 	.word	0x080601c4

080a297c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a297c:	b508      	push	{r3, lr}
 80a297e:	4b02      	ldr	r3, [pc, #8]	; (80a2988 <hal_usart_available_data_for_write+0xc>)
 80a2980:	681b      	ldr	r3, [r3, #0]
 80a2982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2984:	9301      	str	r3, [sp, #4]
 80a2986:	bd08      	pop	{r3, pc}
 80a2988:	080601c4 	.word	0x080601c4

080a298c <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 80a298c:	b508      	push	{r3, lr}
 80a298e:	4b02      	ldr	r3, [pc, #8]	; (80a2998 <hal_i2c_set_speed+0xc>)
 80a2990:	681b      	ldr	r3, [r3, #0]
 80a2992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2994:	9301      	str	r3, [sp, #4]
 80a2996:	bd08      	pop	{r3, pc}
 80a2998:	080601ac 	.word	0x080601ac

080a299c <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a299c:	b508      	push	{r3, lr}
 80a299e:	4b02      	ldr	r3, [pc, #8]	; (80a29a8 <hal_i2c_begin+0xc>)
 80a29a0:	681b      	ldr	r3, [r3, #0]
 80a29a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a29a4:	9301      	str	r3, [sp, #4]
 80a29a6:	bd08      	pop	{r3, pc}
 80a29a8:	080601ac 	.word	0x080601ac

080a29ac <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a29ac:	b508      	push	{r3, lr}
 80a29ae:	4b02      	ldr	r3, [pc, #8]	; (80a29b8 <hal_i2c_begin_transmission+0xc>)
 80a29b0:	681b      	ldr	r3, [r3, #0]
 80a29b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a29b4:	9301      	str	r3, [sp, #4]
 80a29b6:	bd08      	pop	{r3, pc}
 80a29b8:	080601ac 	.word	0x080601ac

080a29bc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a29bc:	b508      	push	{r3, lr}
 80a29be:	4b02      	ldr	r3, [pc, #8]	; (80a29c8 <hal_i2c_end_transmission+0xc>)
 80a29c0:	681b      	ldr	r3, [r3, #0]
 80a29c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a29c4:	9301      	str	r3, [sp, #4]
 80a29c6:	bd08      	pop	{r3, pc}
 80a29c8:	080601ac 	.word	0x080601ac

080a29cc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a29cc:	b508      	push	{r3, lr}
 80a29ce:	4b02      	ldr	r3, [pc, #8]	; (80a29d8 <hal_i2c_write+0xc>)
 80a29d0:	681b      	ldr	r3, [r3, #0]
 80a29d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a29d4:	9301      	str	r3, [sp, #4]
 80a29d6:	bd08      	pop	{r3, pc}
 80a29d8:	080601ac 	.word	0x080601ac

080a29dc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a29dc:	b508      	push	{r3, lr}
 80a29de:	4b02      	ldr	r3, [pc, #8]	; (80a29e8 <hal_i2c_available+0xc>)
 80a29e0:	681b      	ldr	r3, [r3, #0]
 80a29e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a29e4:	9301      	str	r3, [sp, #4]
 80a29e6:	bd08      	pop	{r3, pc}
 80a29e8:	080601ac 	.word	0x080601ac

080a29ec <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a29ec:	b508      	push	{r3, lr}
 80a29ee:	4b02      	ldr	r3, [pc, #8]	; (80a29f8 <hal_i2c_read+0xc>)
 80a29f0:	681b      	ldr	r3, [r3, #0]
 80a29f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a29f4:	9301      	str	r3, [sp, #4]
 80a29f6:	bd08      	pop	{r3, pc}
 80a29f8:	080601ac 	.word	0x080601ac

080a29fc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a29fc:	b508      	push	{r3, lr}
 80a29fe:	4b02      	ldr	r3, [pc, #8]	; (80a2a08 <hal_i2c_peek+0xc>)
 80a2a00:	681b      	ldr	r3, [r3, #0]
 80a2a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2a04:	9301      	str	r3, [sp, #4]
 80a2a06:	bd08      	pop	{r3, pc}
 80a2a08:	080601ac 	.word	0x080601ac

080a2a0c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a2a0c:	b508      	push	{r3, lr}
 80a2a0e:	4b02      	ldr	r3, [pc, #8]	; (80a2a18 <hal_i2c_flush+0xc>)
 80a2a10:	681b      	ldr	r3, [r3, #0]
 80a2a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2a14:	9301      	str	r3, [sp, #4]
 80a2a16:	bd08      	pop	{r3, pc}
 80a2a18:	080601ac 	.word	0x080601ac

080a2a1c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a2a1c:	b508      	push	{r3, lr}
 80a2a1e:	4b02      	ldr	r3, [pc, #8]	; (80a2a28 <hal_i2c_is_enabled+0xc>)
 80a2a20:	681b      	ldr	r3, [r3, #0]
 80a2a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2a24:	9301      	str	r3, [sp, #4]
 80a2a26:	bd08      	pop	{r3, pc}
 80a2a28:	080601ac 	.word	0x080601ac

080a2a2c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a2a2c:	b508      	push	{r3, lr}
 80a2a2e:	4b03      	ldr	r3, [pc, #12]	; (80a2a3c <hal_i2c_init+0x10>)
 80a2a30:	681b      	ldr	r3, [r3, #0]
 80a2a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2a36:	9301      	str	r3, [sp, #4]
 80a2a38:	bd08      	pop	{r3, pc}
 80a2a3a:	0000      	.short	0x0000
 80a2a3c:	080601ac 	.word	0x080601ac

080a2a40 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a2a40:	b508      	push	{r3, lr}
 80a2a42:	4b03      	ldr	r3, [pc, #12]	; (80a2a50 <hal_i2c_request_ex+0x10>)
 80a2a44:	681b      	ldr	r3, [r3, #0]
 80a2a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a2a4a:	9301      	str	r3, [sp, #4]
 80a2a4c:	bd08      	pop	{r3, pc}
 80a2a4e:	0000      	.short	0x0000
 80a2a50:	080601ac 	.word	0x080601ac

080a2a54 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a2a54:	b508      	push	{r3, lr}
 80a2a56:	4b02      	ldr	r3, [pc, #8]	; (80a2a60 <hal_spi_begin+0xc>)
 80a2a58:	681b      	ldr	r3, [r3, #0]
 80a2a5a:	681b      	ldr	r3, [r3, #0]
 80a2a5c:	9301      	str	r3, [sp, #4]
 80a2a5e:	bd08      	pop	{r3, pc}
 80a2a60:	080601b4 	.word	0x080601b4

080a2a64 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80a2a64:	b508      	push	{r3, lr}
 80a2a66:	4b02      	ldr	r3, [pc, #8]	; (80a2a70 <hal_spi_transfer+0xc>)
 80a2a68:	681b      	ldr	r3, [r3, #0]
 80a2a6a:	695b      	ldr	r3, [r3, #20]
 80a2a6c:	9301      	str	r3, [sp, #4]
 80a2a6e:	bd08      	pop	{r3, pc}
 80a2a70:	080601b4 	.word	0x080601b4

080a2a74 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a2a74:	b508      	push	{r3, lr}
 80a2a76:	4b02      	ldr	r3, [pc, #8]	; (80a2a80 <hal_spi_init+0xc>)
 80a2a78:	681b      	ldr	r3, [r3, #0]
 80a2a7a:	69db      	ldr	r3, [r3, #28]
 80a2a7c:	9301      	str	r3, [sp, #4]
 80a2a7e:	bd08      	pop	{r3, pc}
 80a2a80:	080601b4 	.word	0x080601b4

080a2a84 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a2a84:	b508      	push	{r3, lr}
 80a2a86:	4b02      	ldr	r3, [pc, #8]	; (80a2a90 <hal_spi_is_enabled+0xc>)
 80a2a88:	681b      	ldr	r3, [r3, #0]
 80a2a8a:	6a1b      	ldr	r3, [r3, #32]
 80a2a8c:	9301      	str	r3, [sp, #4]
 80a2a8e:	bd08      	pop	{r3, pc}
 80a2a90:	080601b4 	.word	0x080601b4

080a2a94 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 80a2a94:	b508      	push	{r3, lr}
 80a2a96:	4b02      	ldr	r3, [pc, #8]	; (80a2aa0 <hal_spi_info+0xc>)
 80a2a98:	681b      	ldr	r3, [r3, #0]
 80a2a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2a9c:	9301      	str	r3, [sp, #4]
 80a2a9e:	bd08      	pop	{r3, pc}
 80a2aa0:	080601b4 	.word	0x080601b4

080a2aa4 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
 80a2aa4:	b508      	push	{r3, lr}
 80a2aa6:	4b02      	ldr	r3, [pc, #8]	; (80a2ab0 <hal_spi_transfer_dma+0xc>)
 80a2aa8:	681b      	ldr	r3, [r3, #0]
 80a2aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2aac:	9301      	str	r3, [sp, #4]
 80a2aae:	bd08      	pop	{r3, pc}
 80a2ab0:	080601b4 	.word	0x080601b4

080a2ab4 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 80a2ab4:	b508      	push	{r3, lr}
 80a2ab6:	4b02      	ldr	r3, [pc, #8]	; (80a2ac0 <hal_spi_transfer_dma_status+0xc>)
 80a2ab8:	681b      	ldr	r3, [r3, #0]
 80a2aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2abc:	9301      	str	r3, [sp, #4]
 80a2abe:	bd08      	pop	{r3, pc}
 80a2ac0:	080601b4 	.word	0x080601b4

080a2ac4 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a2ac4:	b508      	push	{r3, lr}
 80a2ac6:	4b02      	ldr	r3, [pc, #8]	; (80a2ad0 <hal_spi_set_settings+0xc>)
 80a2ac8:	681b      	ldr	r3, [r3, #0]
 80a2aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2acc:	9301      	str	r3, [sp, #4]
 80a2ace:	bd08      	pop	{r3, pc}
 80a2ad0:	080601b4 	.word	0x080601b4

080a2ad4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2ad4:	b508      	push	{r3, lr}
 80a2ad6:	4b02      	ldr	r3, [pc, #8]	; (80a2ae0 <HAL_USB_USART_Init+0xc>)
 80a2ad8:	681b      	ldr	r3, [r3, #0]
 80a2ada:	681b      	ldr	r3, [r3, #0]
 80a2adc:	9301      	str	r3, [sp, #4]
 80a2ade:	bd08      	pop	{r3, pc}
 80a2ae0:	080601d8 	.word	0x080601d8

080a2ae4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2ae4:	b508      	push	{r3, lr}
 80a2ae6:	4b02      	ldr	r3, [pc, #8]	; (80a2af0 <HAL_USB_USART_Begin+0xc>)
 80a2ae8:	681b      	ldr	r3, [r3, #0]
 80a2aea:	685b      	ldr	r3, [r3, #4]
 80a2aec:	9301      	str	r3, [sp, #4]
 80a2aee:	bd08      	pop	{r3, pc}
 80a2af0:	080601d8 	.word	0x080601d8

080a2af4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2af4:	b508      	push	{r3, lr}
 80a2af6:	4b02      	ldr	r3, [pc, #8]	; (80a2b00 <HAL_USB_USART_Available_Data+0xc>)
 80a2af8:	681b      	ldr	r3, [r3, #0]
 80a2afa:	691b      	ldr	r3, [r3, #16]
 80a2afc:	9301      	str	r3, [sp, #4]
 80a2afe:	bd08      	pop	{r3, pc}
 80a2b00:	080601d8 	.word	0x080601d8

080a2b04 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2b04:	b508      	push	{r3, lr}
 80a2b06:	4b02      	ldr	r3, [pc, #8]	; (80a2b10 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2b08:	681b      	ldr	r3, [r3, #0]
 80a2b0a:	695b      	ldr	r3, [r3, #20]
 80a2b0c:	9301      	str	r3, [sp, #4]
 80a2b0e:	bd08      	pop	{r3, pc}
 80a2b10:	080601d8 	.word	0x080601d8

080a2b14 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2b14:	b508      	push	{r3, lr}
 80a2b16:	4b02      	ldr	r3, [pc, #8]	; (80a2b20 <HAL_USB_USART_Receive_Data+0xc>)
 80a2b18:	681b      	ldr	r3, [r3, #0]
 80a2b1a:	699b      	ldr	r3, [r3, #24]
 80a2b1c:	9301      	str	r3, [sp, #4]
 80a2b1e:	bd08      	pop	{r3, pc}
 80a2b20:	080601d8 	.word	0x080601d8

080a2b24 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2b24:	b508      	push	{r3, lr}
 80a2b26:	4b02      	ldr	r3, [pc, #8]	; (80a2b30 <HAL_USB_USART_Send_Data+0xc>)
 80a2b28:	681b      	ldr	r3, [r3, #0]
 80a2b2a:	69db      	ldr	r3, [r3, #28]
 80a2b2c:	9301      	str	r3, [sp, #4]
 80a2b2e:	bd08      	pop	{r3, pc}
 80a2b30:	080601d8 	.word	0x080601d8

080a2b34 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2b34:	b508      	push	{r3, lr}
 80a2b36:	4b02      	ldr	r3, [pc, #8]	; (80a2b40 <HAL_USB_USART_Flush_Data+0xc>)
 80a2b38:	681b      	ldr	r3, [r3, #0]
 80a2b3a:	6a1b      	ldr	r3, [r3, #32]
 80a2b3c:	9301      	str	r3, [sp, #4]
 80a2b3e:	bd08      	pop	{r3, pc}
 80a2b40:	080601d8 	.word	0x080601d8

080a2b44 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a2b44:	b508      	push	{r3, lr}
 80a2b46:	4b02      	ldr	r3, [pc, #8]	; (80a2b50 <HAL_USB_USART_Is_Enabled+0xc>)
 80a2b48:	681b      	ldr	r3, [r3, #0]
 80a2b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2b4c:	9301      	str	r3, [sp, #4]
 80a2b4e:	bd08      	pop	{r3, pc}
 80a2b50:	080601d8 	.word	0x080601d8

080a2b54 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2b54:	b508      	push	{r3, lr}
 80a2b56:	4b02      	ldr	r3, [pc, #8]	; (80a2b60 <inet_gethostbyname+0xc>)
 80a2b58:	681b      	ldr	r3, [r3, #0]
 80a2b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2b5c:	9301      	str	r3, [sp, #4]
 80a2b5e:	bd08      	pop	{r3, pc}
 80a2b60:	080601c0 	.word	0x080601c0

080a2b64 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a2b64:	b508      	push	{r3, lr}
 80a2b66:	4b02      	ldr	r3, [pc, #8]	; (80a2b70 <panic_+0xc>)
 80a2b68:	681b      	ldr	r3, [r3, #0]
 80a2b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2b6c:	9301      	str	r3, [sp, #4]
 80a2b6e:	bd08      	pop	{r3, pc}
 80a2b70:	080201a8 	.word	0x080201a8

080a2b74 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2b74:	b508      	push	{r3, lr}
 80a2b76:	4b02      	ldr	r3, [pc, #8]	; (80a2b80 <set_system_mode+0xc>)
 80a2b78:	681b      	ldr	r3, [r3, #0]
 80a2b7a:	685b      	ldr	r3, [r3, #4]
 80a2b7c:	9301      	str	r3, [sp, #4]
 80a2b7e:	bd08      	pop	{r3, pc}
 80a2b80:	080601a4 	.word	0x080601a4

080a2b84 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2b84:	b508      	push	{r3, lr}
 80a2b86:	4b02      	ldr	r3, [pc, #8]	; (80a2b90 <system_delay_ms+0xc>)
 80a2b88:	681b      	ldr	r3, [r3, #0]
 80a2b8a:	695b      	ldr	r3, [r3, #20]
 80a2b8c:	9301      	str	r3, [sp, #4]
 80a2b8e:	bd08      	pop	{r3, pc}
 80a2b90:	080601a4 	.word	0x080601a4

080a2b94 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2b94:	b508      	push	{r3, lr}
 80a2b96:	4b03      	ldr	r3, [pc, #12]	; (80a2ba4 <system_ctrl_set_app_request_handler+0x10>)
 80a2b98:	681b      	ldr	r3, [r3, #0]
 80a2b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a2b9e:	9301      	str	r3, [sp, #4]
 80a2ba0:	bd08      	pop	{r3, pc}
 80a2ba2:	0000      	.short	0x0000
 80a2ba4:	080601a4 	.word	0x080601a4

080a2ba8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2ba8:	b508      	push	{r3, lr}
 80a2baa:	4b03      	ldr	r3, [pc, #12]	; (80a2bb8 <system_ctrl_set_result+0x10>)
 80a2bac:	681b      	ldr	r3, [r3, #0]
 80a2bae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2bb2:	9301      	str	r3, [sp, #4]
 80a2bb4:	bd08      	pop	{r3, pc}
 80a2bb6:	0000      	.short	0x0000
 80a2bb8:	080601a4 	.word	0x080601a4

080a2bbc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2bbc:	b508      	push	{r3, lr}
 80a2bbe:	4b02      	ldr	r3, [pc, #8]	; (80a2bc8 <network_connect+0xc>)
 80a2bc0:	681b      	ldr	r3, [r3, #0]
 80a2bc2:	685b      	ldr	r3, [r3, #4]
 80a2bc4:	9301      	str	r3, [sp, #4]
 80a2bc6:	bd08      	pop	{r3, pc}
 80a2bc8:	080601c8 	.word	0x080601c8

080a2bcc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2bcc:	b508      	push	{r3, lr}
 80a2bce:	4b02      	ldr	r3, [pc, #8]	; (80a2bd8 <network_connecting+0xc>)
 80a2bd0:	681b      	ldr	r3, [r3, #0]
 80a2bd2:	689b      	ldr	r3, [r3, #8]
 80a2bd4:	9301      	str	r3, [sp, #4]
 80a2bd6:	bd08      	pop	{r3, pc}
 80a2bd8:	080601c8 	.word	0x080601c8

080a2bdc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a2bdc:	b508      	push	{r3, lr}
 80a2bde:	4b02      	ldr	r3, [pc, #8]	; (80a2be8 <network_disconnect+0xc>)
 80a2be0:	681b      	ldr	r3, [r3, #0]
 80a2be2:	68db      	ldr	r3, [r3, #12]
 80a2be4:	9301      	str	r3, [sp, #4]
 80a2be6:	bd08      	pop	{r3, pc}
 80a2be8:	080601c8 	.word	0x080601c8

080a2bec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2bec:	b508      	push	{r3, lr}
 80a2bee:	4b02      	ldr	r3, [pc, #8]	; (80a2bf8 <network_ready+0xc>)
 80a2bf0:	681b      	ldr	r3, [r3, #0]
 80a2bf2:	691b      	ldr	r3, [r3, #16]
 80a2bf4:	9301      	str	r3, [sp, #4]
 80a2bf6:	bd08      	pop	{r3, pc}
 80a2bf8:	080601c8 	.word	0x080601c8

080a2bfc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2bfc:	b508      	push	{r3, lr}
 80a2bfe:	4b02      	ldr	r3, [pc, #8]	; (80a2c08 <network_on+0xc>)
 80a2c00:	681b      	ldr	r3, [r3, #0]
 80a2c02:	695b      	ldr	r3, [r3, #20]
 80a2c04:	9301      	str	r3, [sp, #4]
 80a2c06:	bd08      	pop	{r3, pc}
 80a2c08:	080601c8 	.word	0x080601c8

080a2c0c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2c0c:	b508      	push	{r3, lr}
 80a2c0e:	4b02      	ldr	r3, [pc, #8]	; (80a2c18 <network_off+0xc>)
 80a2c10:	681b      	ldr	r3, [r3, #0]
 80a2c12:	699b      	ldr	r3, [r3, #24]
 80a2c14:	9301      	str	r3, [sp, #4]
 80a2c16:	bd08      	pop	{r3, pc}
 80a2c18:	080601c8 	.word	0x080601c8

080a2c1c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2c1c:	b508      	push	{r3, lr}
 80a2c1e:	4b02      	ldr	r3, [pc, #8]	; (80a2c28 <network_listen+0xc>)
 80a2c20:	681b      	ldr	r3, [r3, #0]
 80a2c22:	69db      	ldr	r3, [r3, #28]
 80a2c24:	9301      	str	r3, [sp, #4]
 80a2c26:	bd08      	pop	{r3, pc}
 80a2c28:	080601c8 	.word	0x080601c8

080a2c2c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a2c2c:	b508      	push	{r3, lr}
 80a2c2e:	4b02      	ldr	r3, [pc, #8]	; (80a2c38 <network_listening+0xc>)
 80a2c30:	681b      	ldr	r3, [r3, #0]
 80a2c32:	6a1b      	ldr	r3, [r3, #32]
 80a2c34:	9301      	str	r3, [sp, #4]
 80a2c36:	bd08      	pop	{r3, pc}
 80a2c38:	080601c8 	.word	0x080601c8

080a2c3c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2c3c:	b508      	push	{r3, lr}
 80a2c3e:	4b02      	ldr	r3, [pc, #8]	; (80a2c48 <network_set_listen_timeout+0xc>)
 80a2c40:	681b      	ldr	r3, [r3, #0]
 80a2c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2c44:	9301      	str	r3, [sp, #4]
 80a2c46:	bd08      	pop	{r3, pc}
 80a2c48:	080601c8 	.word	0x080601c8

080a2c4c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a2c4c:	b508      	push	{r3, lr}
 80a2c4e:	4b02      	ldr	r3, [pc, #8]	; (80a2c58 <network_get_listen_timeout+0xc>)
 80a2c50:	681b      	ldr	r3, [r3, #0]
 80a2c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2c54:	9301      	str	r3, [sp, #4]
 80a2c56:	bd08      	pop	{r3, pc}
 80a2c58:	080601c8 	.word	0x080601c8

080a2c5c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a2c5c:	b508      	push	{r3, lr}
 80a2c5e:	4b02      	ldr	r3, [pc, #8]	; (80a2c68 <network_is_on+0xc>)
 80a2c60:	681b      	ldr	r3, [r3, #0]
 80a2c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2c64:	9301      	str	r3, [sp, #4]
 80a2c66:	bd08      	pop	{r3, pc}
 80a2c68:	080601c8 	.word	0x080601c8

080a2c6c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a2c6c:	b508      	push	{r3, lr}
 80a2c6e:	4b02      	ldr	r3, [pc, #8]	; (80a2c78 <network_is_off+0xc>)
 80a2c70:	681b      	ldr	r3, [r3, #0]
 80a2c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2c74:	9301      	str	r3, [sp, #4]
 80a2c76:	bd08      	pop	{r3, pc}
 80a2c78:	080601c8 	.word	0x080601c8

080a2c7c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2c7c:	b508      	push	{r3, lr}
 80a2c7e:	4b02      	ldr	r3, [pc, #8]	; (80a2c88 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2c80:	681b      	ldr	r3, [r3, #0]
 80a2c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2c84:	9301      	str	r3, [sp, #4]
 80a2c86:	bd08      	pop	{r3, pc}
 80a2c88:	080601cc 	.word	0x080601cc

080a2c8c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2c8c:	b508      	push	{r3, lr}
 80a2c8e:	4b02      	ldr	r3, [pc, #8]	; (80a2c98 <malloc+0xc>)
 80a2c90:	681b      	ldr	r3, [r3, #0]
 80a2c92:	681b      	ldr	r3, [r3, #0]
 80a2c94:	9301      	str	r3, [sp, #4]
 80a2c96:	bd08      	pop	{r3, pc}
 80a2c98:	080601a0 	.word	0x080601a0

080a2c9c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2c9c:	b508      	push	{r3, lr}
 80a2c9e:	4b02      	ldr	r3, [pc, #8]	; (80a2ca8 <free+0xc>)
 80a2ca0:	681b      	ldr	r3, [r3, #0]
 80a2ca2:	685b      	ldr	r3, [r3, #4]
 80a2ca4:	9301      	str	r3, [sp, #4]
 80a2ca6:	bd08      	pop	{r3, pc}
 80a2ca8:	080601a0 	.word	0x080601a0

080a2cac <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a2cac:	b508      	push	{r3, lr}
 80a2cae:	4b02      	ldr	r3, [pc, #8]	; (80a2cb8 <vsnprintf+0xc>)
 80a2cb0:	681b      	ldr	r3, [r3, #0]
 80a2cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2cb4:	9301      	str	r3, [sp, #4]
 80a2cb6:	bd08      	pop	{r3, pc}
 80a2cb8:	080601a0 	.word	0x080601a0

080a2cbc <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a2cbc:	b508      	push	{r3, lr}
 80a2cbe:	4b02      	ldr	r3, [pc, #8]	; (80a2cc8 <__errno+0xc>)
 80a2cc0:	681b      	ldr	r3, [r3, #0]
 80a2cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2cc4:	9301      	str	r3, [sp, #4]
 80a2cc6:	bd08      	pop	{r3, pc}
 80a2cc8:	080601a0 	.word	0x080601a0

080a2ccc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a2ccc:	b508      	push	{r3, lr}
 80a2cce:	4b02      	ldr	r3, [pc, #8]	; (80a2cd8 <newlib_impure_ptr_callback+0xc>)
 80a2cd0:	681b      	ldr	r3, [r3, #0]
 80a2cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2cd4:	9301      	str	r3, [sp, #4]
 80a2cd6:	bd08      	pop	{r3, pc}
 80a2cd8:	080601a0 	.word	0x080601a0

080a2cdc <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a2cdc:	6880      	ldr	r0, [r0, #8]
 80a2cde:	f7ff be0d 	b.w	80a28fc <os_mutex_recursive_unlock>

080a2ce2 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a2ce2:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a2ce4:	2600      	movs	r6, #0
 80a2ce6:	4604      	mov	r4, r0
 80a2ce8:	460d      	mov	r5, r1
 80a2cea:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a2cee:	f7ff fded 	bl	80a28cc <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a2cf2:	4628      	mov	r0, r5
    _spi = spi;
 80a2cf4:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a2cf6:	f7ff febd 	bl	80a2a74 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a2cfa:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a2cfc:	6066      	str	r6, [r4, #4]
}
 80a2cfe:	bd70      	pop	{r4, r5, r6, pc}

080a2d00 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a2d00:	b510      	push	{r4, lr}
 80a2d02:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 80a2d04:	6880      	ldr	r0, [r0, #8]
 80a2d06:	f7ff fdf1 	bl	80a28ec <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 80a2d0a:	7820      	ldrb	r0, [r4, #0]
 80a2d0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a2d10:	f7ff fea0 	bl	80a2a54 <hal_spi_begin>
        unlock();
 80a2d14:	4620      	mov	r0, r4
 80a2d16:	f7ff ffe1 	bl	80a2cdc <_ZN8SPIClass6unlockEv>
    }
}
 80a2d1a:	bd10      	pop	{r4, pc}

080a2d1c <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 80a2d1c:	b508      	push	{r3, lr}
    // Release peripheral
    unlock();
 80a2d1e:	f7ff ffdd 	bl	80a2cdc <_ZN8SPIClass6unlockEv>
}
 80a2d22:	bd08      	pop	{r3, pc}

080a2d24 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a2d24:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a2d26:	2400      	movs	r4, #0
 80a2d28:	0840      	lsrs	r0, r0, #1
 80a2d2a:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a2d2c:	6818      	ldr	r0, [r3, #0]
 80a2d2e:	b2e5      	uxtb	r5, r4
 80a2d30:	4288      	cmp	r0, r1
 80a2d32:	d906      	bls.n	80a2d42 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a2d34:	3401      	adds	r4, #1
 80a2d36:	2c08      	cmp	r4, #8
 80a2d38:	d002      	beq.n	80a2d40 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a2d3a:	0840      	lsrs	r0, r0, #1
 80a2d3c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a2d3e:	e7f5      	b.n	80a2d2c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a2d40:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 80a2d42:	4b02      	ldr	r3, [pc, #8]	; (80a2d4c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a2d44:	5d5b      	ldrb	r3, [r3, r5]
 80a2d46:	7013      	strb	r3, [r2, #0]
}
 80a2d48:	bd30      	pop	{r4, r5, pc}
 80a2d4a:	bf00      	nop
 80a2d4c:	080a6d9e 	.word	0x080a6d9e

080a2d50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 80a2d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2d54:	4606      	mov	r6, r0
 80a2d56:	b08f      	sub	sp, #60	; 0x3c
 80a2d58:	6880      	ldr	r0, [r0, #8]
 80a2d5a:	460c      	mov	r4, r1
 80a2d5c:	f7ff fdc6 	bl	80a28ec <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 80a2d60:	2214      	movs	r2, #20
 80a2d62:	2100      	movs	r1, #0
 80a2d64:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 80a2d66:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 80a2d68:	f003 f94c 	bl	80a6004 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a2d6c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 80a2d6e:	2200      	movs	r2, #0
 80a2d70:	4628      	mov	r0, r5
 80a2d72:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 80a2d74:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 80a2d78:	f7ff fe8c 	bl	80a2a94 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 80a2d7c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80a2d80:	b113      	cbz	r3, 80a2d88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x38>
 80a2d82:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a2d86:	b155      	cbz	r5, 80a2d9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  SPISettings()
  {
 80a2d88:	2700      	movs	r7, #0
 80a2d8a:	2501      	movs	r5, #1
 80a2d8c:	46b9      	mov	r9, r7
 80a2d8e:	46b8      	mov	r8, r7
  virtual ~SPISettings() {
  }

  bool operator==(const SPISettings& other) const
  {
    if (default_ && other.default_)
 80a2d90:	7923      	ldrb	r3, [r4, #4]
 80a2d92:	b15d      	cbz	r5, 80a2dac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x5c>
 80a2d94:	b1c3      	cbz	r3, 80a2dc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
}
 80a2d96:	2000      	movs	r0, #0
 80a2d98:	b00f      	add	sp, #60	; 0x3c
 80a2d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 80a2d9e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a2da2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a2da6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 80a2daa:	e7f1      	b.n	80a2d90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x40>
      return true;

    if (default_ == other.default_ &&
 80a2dac:	2b00      	cmp	r3, #0
 80a2dae:	d135      	bne.n	80a2e1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xcc>
 80a2db0:	68a3      	ldr	r3, [r4, #8]
 80a2db2:	4543      	cmp	r3, r8
 80a2db4:	d108      	bne.n	80a2dc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a2db6:	f88d 9020 	strb.w	r9, [sp, #32]
 80a2dba:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a2dbe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a2dc2:	89a3      	ldrh	r3, [r4, #12]
 80a2dc4:	429a      	cmp	r2, r3
 80a2dc6:	d0e6      	beq.n	80a2d96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            uint8_t divisor = 0;
 80a2dc8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a2dca:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 80a2dcc:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a2dd0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a2dd2:	ab04      	add	r3, sp, #16
 80a2dd4:	f10d 020f 	add.w	r2, sp, #15
 80a2dd8:	f7ff ffa4 	bl	80a2d24 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    return false;
  }

  bool operator<=(const SPISettings& other) const
  {
    if (default_ && other.default_)
 80a2ddc:	7921      	ldrb	r1, [r4, #4]
 80a2dde:	b985      	cbnz	r5, 80a2e02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb2>
      return true;

    if (default_ == other.default_ &&
 80a2de0:	b989      	cbnz	r1, 80a2e06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a2de2:	68a3      	ldr	r3, [r4, #8]
 80a2de4:	4543      	cmp	r3, r8
 80a2de6:	d30e      	bcc.n	80a2e06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a2de8:	f88d 9020 	strb.w	r9, [sp, #32]
 80a2dec:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a2df0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a2df4:	89a3      	ldrh	r3, [r4, #12]
 80a2df6:	429a      	cmp	r2, r3
 80a2df8:	d105      	bne.n	80a2e06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 80a2dfa:	9b04      	ldr	r3, [sp, #16]
 80a2dfc:	4543      	cmp	r3, r8
 80a2dfe:	d102      	bne.n	80a2e06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a2e00:	e7c9      	b.n	80a2d96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
    if (default_ && other.default_)
 80a2e02:	2900      	cmp	r1, #0
 80a2e04:	d1f9      	bne.n	80a2dfa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xaa>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 80a2e06:	2300      	movs	r3, #0
 80a2e08:	9301      	str	r3, [sp, #4]
 80a2e0a:	7b63      	ldrb	r3, [r4, #13]
 80a2e0c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a2e10:	9300      	str	r3, [sp, #0]
 80a2e12:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a2e14:	7830      	ldrb	r0, [r6, #0]
 80a2e16:	f7ff fe55 	bl	80a2ac4 <hal_spi_set_settings>
    return 0;
 80a2e1a:	e7bc      	b.n	80a2d96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a2e1c:	462b      	mov	r3, r5
 80a2e1e:	462a      	mov	r2, r5
 80a2e20:	2101      	movs	r1, #1
 80a2e22:	e9cd 5500 	strd	r5, r5, [sp]
 80a2e26:	e7f5      	b.n	80a2e14 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc4>

080a2e28 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a2e28:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80a2e2a:	7800      	ldrb	r0, [r0, #0]
 80a2e2c:	f7ff fe1a 	bl	80a2a64 <hal_spi_transfer>
}
 80a2e30:	b2c0      	uxtb	r0, r0
 80a2e32:	bd08      	pop	{r3, pc}

080a2e34 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 80a2e34:	b530      	push	{r4, r5, lr}
 80a2e36:	b087      	sub	sp, #28
 80a2e38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a2e3a:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 80a2e3c:	9500      	str	r5, [sp, #0]
 80a2e3e:	7800      	ldrb	r0, [r0, #0]
 80a2e40:	f7ff fe30 	bl	80a2aa4 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 80a2e44:	b93d      	cbnz	r5, 80a2e56 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 80a2e46:	7820      	ldrb	r0, [r4, #0]
 80a2e48:	a902      	add	r1, sp, #8
 80a2e4a:	f7ff fe33 	bl	80a2ab4 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 80a2e4e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a2e52:	07db      	lsls	r3, r3, #31
 80a2e54:	d4f7      	bmi.n	80a2e46 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
 80a2e56:	b007      	add	sp, #28
 80a2e58:	bd30      	pop	{r4, r5, pc}
	...

080a2e5c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a2e5c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a2e5e:	2000      	movs	r0, #0
 80a2e60:	4b04      	ldr	r3, [pc, #16]	; (80a2e74 <_GLOBAL__sub_I_System+0x18>)
 80a2e62:	601a      	str	r2, [r3, #0]
 80a2e64:	4b04      	ldr	r3, [pc, #16]	; (80a2e78 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a2e66:	4a05      	ldr	r2, [pc, #20]	; (80a2e7c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a2e68:	6018      	str	r0, [r3, #0]
 80a2e6a:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a2e6c:	7198      	strb	r0, [r3, #6]
 80a2e6e:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2e70:	f7ff be80 	b.w	80a2b74 <set_system_mode>
 80a2e74:	20000144 	.word	0x20000144
 80a2e78:	20000138 	.word	0x20000138
 80a2e7c:	ffff0000 	.word	0xffff0000

080a2e80 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2e82:	4606      	mov	r6, r0
 80a2e84:	460d      	mov	r5, r1
  size_t n = 0;
 80a2e86:	2400      	movs	r4, #0
 80a2e88:	188f      	adds	r7, r1, r2
  while (size--) {
 80a2e8a:	42bd      	cmp	r5, r7
 80a2e8c:	d00c      	beq.n	80a2ea8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2e8e:	6833      	ldr	r3, [r6, #0]
 80a2e90:	4630      	mov	r0, r6
 80a2e92:	689b      	ldr	r3, [r3, #8]
 80a2e94:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2e98:	4798      	blx	r3
     if (chunk>=0)
 80a2e9a:	1e03      	subs	r3, r0, #0
 80a2e9c:	db01      	blt.n	80a2ea2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2e9e:	441c      	add	r4, r3
  while (size--) {
 80a2ea0:	e7f3      	b.n	80a2e8a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2ea2:	2c00      	cmp	r4, #0
 80a2ea4:	bf08      	it	eq
 80a2ea6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2ea8:	4620      	mov	r0, r4
 80a2eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2eac <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2eac:	b570      	push	{r4, r5, r6, lr}
 80a2eae:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2eb0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2eb2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a2eb4:	b149      	cbz	r1, 80a2eca <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2eb6:	f003 f8d1 	bl	80a605c <strlen>
 80a2eba:	682b      	ldr	r3, [r5, #0]
 80a2ebc:	4602      	mov	r2, r0
 80a2ebe:	4621      	mov	r1, r4
 80a2ec0:	4628      	mov	r0, r5
    }
 80a2ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a2ec6:	68db      	ldr	r3, [r3, #12]
 80a2ec8:	4718      	bx	r3
    }
 80a2eca:	bd70      	pop	{r4, r5, r6, pc}

080a2ecc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a2ecc:	b508      	push	{r3, lr}
  return write(str);
 80a2ece:	f7ff ffed 	bl	80a2eac <_ZN5Print5writeEPKc>
}
 80a2ed2:	bd08      	pop	{r3, pc}

080a2ed4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a2ed4:	6803      	ldr	r3, [r0, #0]
 80a2ed6:	689b      	ldr	r3, [r3, #8]
 80a2ed8:	4718      	bx	r3

080a2eda <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
 80a2eda:	b508      	push	{r3, lr}
  return write(str);
 80a2edc:	f7ff ffe6 	bl	80a2eac <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
 80a2ee0:	bd08      	pop	{r3, pc}

080a2ee2 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
 80a2ee2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2ee4:	210d      	movs	r1, #13
{
 80a2ee6:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2ee8:	f7ff fff4 	bl	80a2ed4 <_ZN5Print5printEc>
  n += print('\n');
 80a2eec:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a2eee:	4604      	mov	r4, r0
  n += print('\n');
 80a2ef0:	4628      	mov	r0, r5
 80a2ef2:	f7ff ffef 	bl	80a2ed4 <_ZN5Print5printEc>
  return n;
}
 80a2ef6:	4420      	add	r0, r4
 80a2ef8:	bd38      	pop	{r3, r4, r5, pc}

080a2efa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2efa:	b538      	push	{r3, r4, r5, lr}
 80a2efc:	4605      	mov	r5, r0
  return write(str);
 80a2efe:	f7ff ffd5 	bl	80a2eac <_ZN5Print5writeEPKc>
 80a2f02:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a2f04:	4628      	mov	r0, r5
 80a2f06:	f7ff ffec 	bl	80a2ee2 <_ZN5Print7printlnEv>
  return n;
}
 80a2f0a:	4420      	add	r0, r4
 80a2f0c:	bd38      	pop	{r3, r4, r5, pc}

080a2f0e <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 80a2f0e:	f7ff bff4 	b.w	80a2efa <_ZN5Print7printlnEPKc>

080a2f12 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2f12:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2f14:	2a01      	cmp	r2, #1
 80a2f16:	bf98      	it	ls
 80a2f18:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2f1a:	b530      	push	{r4, r5, lr}
 80a2f1c:	b08b      	sub	sp, #44	; 0x2c
 80a2f1e:	460c      	mov	r4, r1
  *str = '\0';
 80a2f20:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a2f24:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a2f26:	4625      	mov	r5, r4
 80a2f28:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a2f2c:	fb04 5312 	mls	r3, r4, r2, r5
 80a2f30:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2f32:	2b09      	cmp	r3, #9
 80a2f34:	bf94      	ite	ls
 80a2f36:	3330      	addls	r3, #48	; 0x30
 80a2f38:	3337      	addhi	r3, #55	; 0x37
 80a2f3a:	b2db      	uxtb	r3, r3
  } while(n);
 80a2f3c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2f3e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a2f42:	d9f0      	bls.n	80a2f26 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a2f44:	f7ff ffb2 	bl	80a2eac <_ZN5Print5writeEPKc>
}
 80a2f48:	b00b      	add	sp, #44	; 0x2c
 80a2f4a:	bd30      	pop	{r4, r5, pc}

080a2f4c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2f50:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2f52:	4619      	mov	r1, r3
 80a2f54:	4610      	mov	r0, r2
{
 80a2f56:	4692      	mov	sl, r2
 80a2f58:	461f      	mov	r7, r3
 80a2f5a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a2f5e:	f002 fb07 	bl	80a5570 <__aeabi_dcmpun>
 80a2f62:	b140      	cbz	r0, 80a2f76 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a2f64:	4950      	ldr	r1, [pc, #320]	; (80a30a8 <_ZN5Print10printFloatEdh+0x15c>)
 80a2f66:	4628      	mov	r0, r5
 80a2f68:	f7ff ffa0 	bl	80a2eac <_ZN5Print5writeEPKc>
 80a2f6c:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a2f6e:	4620      	mov	r0, r4
 80a2f70:	b003      	add	sp, #12
 80a2f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a2f76:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a2f7a:	f04f 32ff 	mov.w	r2, #4294967295
 80a2f7e:	4650      	mov	r0, sl
 80a2f80:	4621      	mov	r1, r4
 80a2f82:	4b4a      	ldr	r3, [pc, #296]	; (80a30ac <_ZN5Print10printFloatEdh+0x160>)
 80a2f84:	f002 faf4 	bl	80a5570 <__aeabi_dcmpun>
 80a2f88:	b948      	cbnz	r0, 80a2f9e <_ZN5Print10printFloatEdh+0x52>
 80a2f8a:	f04f 32ff 	mov.w	r2, #4294967295
 80a2f8e:	4650      	mov	r0, sl
 80a2f90:	4621      	mov	r1, r4
 80a2f92:	4b46      	ldr	r3, [pc, #280]	; (80a30ac <_ZN5Print10printFloatEdh+0x160>)
 80a2f94:	f002 face 	bl	80a5534 <__aeabi_dcmple>
 80a2f98:	b908      	cbnz	r0, 80a2f9e <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a2f9a:	4945      	ldr	r1, [pc, #276]	; (80a30b0 <_ZN5Print10printFloatEdh+0x164>)
 80a2f9c:	e7e3      	b.n	80a2f66 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a2f9e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2fa2:	4650      	mov	r0, sl
 80a2fa4:	4639      	mov	r1, r7
 80a2fa6:	4b43      	ldr	r3, [pc, #268]	; (80a30b4 <_ZN5Print10printFloatEdh+0x168>)
 80a2fa8:	f002 fad8 	bl	80a555c <__aeabi_dcmpgt>
 80a2fac:	b108      	cbz	r0, 80a2fb2 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a2fae:	4942      	ldr	r1, [pc, #264]	; (80a30b8 <_ZN5Print10printFloatEdh+0x16c>)
 80a2fb0:	e7d9      	b.n	80a2f66 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a2fb2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2fb6:	4650      	mov	r0, sl
 80a2fb8:	4639      	mov	r1, r7
 80a2fba:	4b40      	ldr	r3, [pc, #256]	; (80a30bc <_ZN5Print10printFloatEdh+0x170>)
 80a2fbc:	f002 fab0 	bl	80a5520 <__aeabi_dcmplt>
 80a2fc0:	2800      	cmp	r0, #0
 80a2fc2:	d1f4      	bne.n	80a2fae <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a2fc4:	2200      	movs	r2, #0
 80a2fc6:	2300      	movs	r3, #0
 80a2fc8:	4650      	mov	r0, sl
 80a2fca:	4639      	mov	r1, r7
 80a2fcc:	f002 faa8 	bl	80a5520 <__aeabi_dcmplt>
 80a2fd0:	4604      	mov	r4, r0
 80a2fd2:	b130      	cbz	r0, 80a2fe2 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a2fd4:	212d      	movs	r1, #45	; 0x2d
 80a2fd6:	4628      	mov	r0, r5
 80a2fd8:	f7ff ff7c 	bl	80a2ed4 <_ZN5Print5printEc>
 80a2fdc:	4604      	mov	r4, r0
     number = -number;
 80a2fde:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a2fe2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a2fe6:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a2fe8:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a2fec:	4934      	ldr	r1, [pc, #208]	; (80a30c0 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80a2fee:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a30c8 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a2ff2:	fa5f f38b 	uxtb.w	r3, fp
 80a2ff6:	429e      	cmp	r6, r3
 80a2ff8:	d906      	bls.n	80a3008 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a2ffa:	4642      	mov	r2, r8
 80a2ffc:	464b      	mov	r3, r9
 80a2ffe:	f002 f947 	bl	80a5290 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a3002:	f10b 0b01 	add.w	fp, fp, #1
 80a3006:	e7f4      	b.n	80a2ff2 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a3008:	463b      	mov	r3, r7
 80a300a:	4652      	mov	r2, sl
 80a300c:	f001 fe60 	bl	80a4cd0 <__adddf3>
 80a3010:	4689      	mov	r9, r1
 80a3012:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a3014:	f002 faea 	bl	80a55ec <__aeabi_d2uiz>
 80a3018:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a301a:	f001 ff95 	bl	80a4f48 <__aeabi_ui2d>
 80a301e:	4602      	mov	r2, r0
 80a3020:	460b      	mov	r3, r1
 80a3022:	4640      	mov	r0, r8
 80a3024:	4649      	mov	r1, r9
 80a3026:	f001 fe51 	bl	80a4ccc <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a302a:	220a      	movs	r2, #10
 80a302c:	4680      	mov	r8, r0
 80a302e:	4689      	mov	r9, r1
 80a3030:	4628      	mov	r0, r5
 80a3032:	4639      	mov	r1, r7
 80a3034:	f7ff ff6d 	bl	80a2f12 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a3038:	4404      	add	r4, r0
  if (digits > 0) {
 80a303a:	b126      	cbz	r6, 80a3046 <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80a303c:	4628      	mov	r0, r5
 80a303e:	4921      	ldr	r1, [pc, #132]	; (80a30c4 <_ZN5Print10printFloatEdh+0x178>)
 80a3040:	f7ff ff34 	bl	80a2eac <_ZN5Print5writeEPKc>
    n += print(".");
 80a3044:	4404      	add	r4, r0
    remainder *= 10.0;
 80a3046:	f04f 0a00 	mov.w	sl, #0
 80a304a:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a30c8 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80a304e:	3e01      	subs	r6, #1
 80a3050:	b2f6      	uxtb	r6, r6
 80a3052:	2eff      	cmp	r6, #255	; 0xff
 80a3054:	d08b      	beq.n	80a2f6e <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a3056:	4652      	mov	r2, sl
 80a3058:	465b      	mov	r3, fp
 80a305a:	4640      	mov	r0, r8
 80a305c:	4649      	mov	r1, r9
 80a305e:	f001 ffed 	bl	80a503c <__aeabi_dmul>
 80a3062:	4680      	mov	r8, r0
 80a3064:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a3066:	f002 fa99 	bl	80a559c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a306a:	1e07      	subs	r7, r0, #0
 80a306c:	da19      	bge.n	80a30a2 <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80a306e:	212d      	movs	r1, #45	; 0x2d
 80a3070:	4628      	mov	r0, r5
 80a3072:	f7ff ff2f 	bl	80a2ed4 <_ZN5Print5printEc>
 80a3076:	4603      	mov	r3, r0
            val = -n;
 80a3078:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a307a:	220a      	movs	r2, #10
 80a307c:	4628      	mov	r0, r5
 80a307e:	9301      	str	r3, [sp, #4]
 80a3080:	f7ff ff47 	bl	80a2f12 <_ZN5Print11printNumberEmh>
 80a3084:	9b01      	ldr	r3, [sp, #4]
 80a3086:	4403      	add	r3, r0
    remainder -= toPrint;
 80a3088:	4638      	mov	r0, r7
    n += print(toPrint);
 80a308a:	441c      	add	r4, r3
    remainder -= toPrint;
 80a308c:	f001 ff6c 	bl	80a4f68 <__aeabi_i2d>
 80a3090:	4602      	mov	r2, r0
 80a3092:	460b      	mov	r3, r1
 80a3094:	4640      	mov	r0, r8
 80a3096:	4649      	mov	r1, r9
 80a3098:	f001 fe18 	bl	80a4ccc <__aeabi_dsub>
 80a309c:	4680      	mov	r8, r0
 80a309e:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a30a0:	e7d5      	b.n	80a304e <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80a30a2:	4639      	mov	r1, r7
        size_t t = 0;
 80a30a4:	2300      	movs	r3, #0
 80a30a6:	e7e8      	b.n	80a307a <_ZN5Print10printFloatEdh+0x12e>
 80a30a8:	080a6da6 	.word	0x080a6da6
 80a30ac:	7fefffff 	.word	0x7fefffff
 80a30b0:	080a6daa 	.word	0x080a6daa
 80a30b4:	41efffff 	.word	0x41efffff
 80a30b8:	080a6dae 	.word	0x080a6dae
 80a30bc:	c1efffff 	.word	0xc1efffff
 80a30c0:	3fe00000 	.word	0x3fe00000
 80a30c4:	080a6db2 	.word	0x080a6db2
 80a30c8:	40240000 	.word	0x40240000

080a30cc <_ZN5Print5printEfi>:
{
 80a30cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a30ce:	4605      	mov	r5, r0
 80a30d0:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a30d2:	4608      	mov	r0, r1
 80a30d4:	f001 ff5a 	bl	80a4f8c <__aeabi_f2d>
 80a30d8:	b2e4      	uxtb	r4, r4
 80a30da:	4602      	mov	r2, r0
 80a30dc:	460b      	mov	r3, r1
 80a30de:	4628      	mov	r0, r5
 80a30e0:	9400      	str	r4, [sp, #0]
 80a30e2:	f7ff ff33 	bl	80a2f4c <_ZN5Print10printFloatEdh>
}
 80a30e6:	b003      	add	sp, #12
 80a30e8:	bd30      	pop	{r4, r5, pc}

080a30ea <_ZN5Print5printEdi>:
  return printFloat(n, digits);
 80a30ea:	f89d 1000 	ldrb.w	r1, [sp]
 80a30ee:	9100      	str	r1, [sp, #0]
 80a30f0:	f7ff bf2c 	b.w	80a2f4c <_ZN5Print10printFloatEdh>

080a30f4 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a30f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a30f8:	b086      	sub	sp, #24
 80a30fa:	af00      	add	r7, sp, #0
 80a30fc:	4605      	mov	r5, r0
 80a30fe:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a3100:	1d38      	adds	r0, r7, #4
 80a3102:	2114      	movs	r1, #20
{
 80a3104:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a3106:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a3108:	f7ff fdd0 	bl	80a2cac <vsnprintf>

    if (n<bufsize)
 80a310c:	2813      	cmp	r0, #19
 80a310e:	d80e      	bhi.n	80a312e <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a3110:	4628      	mov	r0, r5
 80a3112:	1d39      	adds	r1, r7, #4
 80a3114:	f7ff feca 	bl	80a2eac <_ZN5Print5writeEPKc>
 80a3118:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a311a:	b11e      	cbz	r6, 80a3124 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a311c:	4628      	mov	r0, r5
 80a311e:	f7ff fee0 	bl	80a2ee2 <_ZN5Print7printlnEv>
 80a3122:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a3124:	4620      	mov	r0, r4
 80a3126:	3718      	adds	r7, #24
 80a3128:	46bd      	mov	sp, r7
 80a312a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a312e:	f100 0308 	add.w	r3, r0, #8
 80a3132:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a3136:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a3138:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a313c:	4622      	mov	r2, r4
 80a313e:	1c41      	adds	r1, r0, #1
 80a3140:	683b      	ldr	r3, [r7, #0]
 80a3142:	4668      	mov	r0, sp
 80a3144:	f7ff fdb2 	bl	80a2cac <vsnprintf>
  return write(str);
 80a3148:	4669      	mov	r1, sp
 80a314a:	4628      	mov	r0, r5
 80a314c:	f7ff feae 	bl	80a2eac <_ZN5Print5writeEPKc>
 80a3150:	4604      	mov	r4, r0
 80a3152:	46c5      	mov	sp, r8
 80a3154:	e7e1      	b.n	80a311a <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a3156 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a3156:	2300      	movs	r3, #0
 80a3158:	6840      	ldr	r0, [r0, #4]
 80a315a:	461a      	mov	r2, r3
 80a315c:	4619      	mov	r1, r3
 80a315e:	f7ff bd4d 	b.w	80a2bfc <network_on>
	...

080a3164 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a3164:	4b01      	ldr	r3, [pc, #4]	; (80a316c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a3166:	4a02      	ldr	r2, [pc, #8]	; (80a3170 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a3168:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a316a:	4770      	bx	lr
 80a316c:	20000148 	.word	0x20000148
 80a3170:	080a6db4 	.word	0x080a6db4

080a3174 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a3174:	4b02      	ldr	r3, [pc, #8]	; (80a3180 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a3176:	681a      	ldr	r2, [r3, #0]
 80a3178:	4b02      	ldr	r3, [pc, #8]	; (80a3184 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a317a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a317c:	4770      	bx	lr
 80a317e:	bf00      	nop
 80a3180:	20000000 	.word	0x20000000
 80a3184:	2000014c 	.word	0x2000014c

080a3188 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a3188:	2100      	movs	r1, #0
 80a318a:	f7ff bcfb 	b.w	80a2b84 <system_delay_ms>
	...

080a3190 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3190:	2200      	movs	r2, #0
 80a3192:	4b01      	ldr	r3, [pc, #4]	; (80a3198 <_GLOBAL__sub_I_RGB+0x8>)
 80a3194:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a3196:	4770      	bx	lr
 80a3198:	20000150 	.word	0x20000150

080a319c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a319c:	4b01      	ldr	r3, [pc, #4]	; (80a31a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a319e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a31a0:	4770      	bx	lr
 80a31a2:	bf00      	nop
 80a31a4:	20000008 	.word	0x20000008

080a31a8 <serialEventRun>:
{
 80a31a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a31aa:	4b13      	ldr	r3, [pc, #76]	; (80a31f8 <serialEventRun+0x50>)
 80a31ac:	b143      	cbz	r3, 80a31c0 <serialEventRun+0x18>
 80a31ae:	f000 f97b 	bl	80a34a8 <_Z16_fetch_usbserialv>
 80a31b2:	6803      	ldr	r3, [r0, #0]
 80a31b4:	691b      	ldr	r3, [r3, #16]
 80a31b6:	4798      	blx	r3
 80a31b8:	2800      	cmp	r0, #0
 80a31ba:	dd01      	ble.n	80a31c0 <serialEventRun+0x18>
        serialEvent();
 80a31bc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a31c0:	4b0e      	ldr	r3, [pc, #56]	; (80a31fc <serialEventRun+0x54>)
 80a31c2:	b143      	cbz	r3, 80a31d6 <serialEventRun+0x2e>
 80a31c4:	f000 fa20 	bl	80a3608 <_Z22__fetch_global_Serial1v>
 80a31c8:	6803      	ldr	r3, [r0, #0]
 80a31ca:	691b      	ldr	r3, [r3, #16]
 80a31cc:	4798      	blx	r3
 80a31ce:	2800      	cmp	r0, #0
 80a31d0:	dd01      	ble.n	80a31d6 <serialEventRun+0x2e>
        serialEvent1();
 80a31d2:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a31d6:	4b0a      	ldr	r3, [pc, #40]	; (80a3200 <serialEventRun+0x58>)
 80a31d8:	b10b      	cbz	r3, 80a31de <serialEventRun+0x36>
 80a31da:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a31de:	4b09      	ldr	r3, [pc, #36]	; (80a3204 <serialEventRun+0x5c>)
 80a31e0:	b143      	cbz	r3, 80a31f4 <serialEventRun+0x4c>
 80a31e2:	f000 f99b 	bl	80a351c <_Z17_fetch_usbserial1v>
 80a31e6:	6803      	ldr	r3, [r0, #0]
 80a31e8:	691b      	ldr	r3, [r3, #16]
 80a31ea:	4798      	blx	r3
 80a31ec:	2800      	cmp	r0, #0
 80a31ee:	dd01      	ble.n	80a31f4 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a31f0:	f3af 8000 	nop.w
}
 80a31f4:	bd08      	pop	{r3, pc}
 80a31f6:	bf00      	nop
	...

080a3208 <_post_loop>:
{
 80a3208:	b508      	push	{r3, lr}
	serialEventRun();
 80a320a:	f7ff ffcd 	bl	80a31a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a320e:	f7ff fb4d 	bl	80a28ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a3212:	4b01      	ldr	r3, [pc, #4]	; (80a3218 <_post_loop+0x10>)
 80a3214:	6018      	str	r0, [r3, #0]
}
 80a3216:	bd08      	pop	{r3, pc}
 80a3218:	200005cc 	.word	0x200005cc

080a321c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a321c:	4805      	ldr	r0, [pc, #20]	; (80a3234 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a321e:	4a06      	ldr	r2, [pc, #24]	; (80a3238 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a3220:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3222:	1a12      	subs	r2, r2, r0
 80a3224:	4905      	ldr	r1, [pc, #20]	; (80a323c <_Z33system_initialize_user_backup_ramv+0x20>)
 80a3226:	f002 fedf 	bl	80a5fe8 <memcpy>
    __backup_sram_signature = signature;
 80a322a:	4b05      	ldr	r3, [pc, #20]	; (80a3240 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a322c:	4a05      	ldr	r2, [pc, #20]	; (80a3244 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a322e:	601a      	str	r2, [r3, #0]
}
 80a3230:	bd08      	pop	{r3, pc}
 80a3232:	bf00      	nop
 80a3234:	40024000 	.word	0x40024000
 80a3238:	40024004 	.word	0x40024004
 80a323c:	080a6f38 	.word	0x080a6f38
 80a3240:	40024000 	.word	0x40024000
 80a3244:	9a271c1e 	.word	0x9a271c1e

080a3248 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3248:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a324a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a324c:	461a      	mov	r2, r3
 80a324e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3252:	9300      	str	r3, [sp, #0]
 80a3254:	f7ff fca8 	bl	80a2ba8 <system_ctrl_set_result>
}
 80a3258:	b003      	add	sp, #12
 80a325a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3260 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a3260:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a3262:	8843      	ldrh	r3, [r0, #2]
 80a3264:	2b0a      	cmp	r3, #10
 80a3266:	d008      	beq.n	80a327a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a3268:	2b50      	cmp	r3, #80	; 0x50
 80a326a:	d10b      	bne.n	80a3284 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a326c:	4b09      	ldr	r3, [pc, #36]	; (80a3294 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a326e:	681b      	ldr	r3, [r3, #0]
 80a3270:	b14b      	cbz	r3, 80a3286 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a3272:	b003      	add	sp, #12
 80a3274:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a3278:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a327a:	f7ff ffe5 	bl	80a3248 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a327e:	b003      	add	sp, #12
 80a3280:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3284:	2300      	movs	r3, #0
 80a3286:	461a      	mov	r2, r3
 80a3288:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a328c:	9300      	str	r3, [sp, #0]
 80a328e:	f7ff fc8b 	bl	80a2ba8 <system_ctrl_set_result>
}
 80a3292:	e7f4      	b.n	80a327e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a3294:	20000164 	.word	0x20000164

080a3298 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a3298:	2100      	movs	r1, #0
{
 80a329a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a329c:	4811      	ldr	r0, [pc, #68]	; (80a32e4 <module_user_init_hook+0x4c>)
 80a329e:	f7ff fd15 	bl	80a2ccc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a32a2:	4b11      	ldr	r3, [pc, #68]	; (80a32e8 <module_user_init_hook+0x50>)
 80a32a4:	681a      	ldr	r2, [r3, #0]
 80a32a6:	4b11      	ldr	r3, [pc, #68]	; (80a32ec <module_user_init_hook+0x54>)
 80a32a8:	429a      	cmp	r2, r3
 80a32aa:	bf0c      	ite	eq
 80a32ac:	2201      	moveq	r2, #1
 80a32ae:	2200      	movne	r2, #0
 80a32b0:	4b0f      	ldr	r3, [pc, #60]	; (80a32f0 <module_user_init_hook+0x58>)
 80a32b2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a32b4:	d001      	beq.n	80a32ba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a32b6:	f7ff ffb1 	bl	80a321c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a32ba:	f7ff fae7 	bl	80a288c <HAL_RNG_GetRandomNumber>
 80a32be:	4604      	mov	r4, r0
    srand(seed);
 80a32c0:	f002 fea8 	bl	80a6014 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a32c4:	4b0b      	ldr	r3, [pc, #44]	; (80a32f4 <module_user_init_hook+0x5c>)
 80a32c6:	b113      	cbz	r3, 80a32ce <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a32c8:	4620      	mov	r0, r4
 80a32ca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a32ce:	2100      	movs	r1, #0
 80a32d0:	4808      	ldr	r0, [pc, #32]	; (80a32f4 <module_user_init_hook+0x5c>)
 80a32d2:	f7ff fcd3 	bl	80a2c7c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a32d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a32da:	2100      	movs	r1, #0
 80a32dc:	4806      	ldr	r0, [pc, #24]	; (80a32f8 <module_user_init_hook+0x60>)
 80a32de:	f7ff bc59 	b.w	80a2b94 <system_ctrl_set_app_request_handler>
 80a32e2:	bf00      	nop
 80a32e4:	080a319d 	.word	0x080a319d
 80a32e8:	40024000 	.word	0x40024000
 80a32ec:	9a271c1e 	.word	0x9a271c1e
 80a32f0:	20000160 	.word	0x20000160
 80a32f4:	00000000 	.word	0x00000000
 80a32f8:	080a3261 	.word	0x080a3261

080a32fc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a32fc:	4770      	bx	lr

080a32fe <_ZN9IPAddressD0Ev>:
 80a32fe:	b510      	push	{r4, lr}
 80a3300:	4604      	mov	r4, r0
 80a3302:	2118      	movs	r1, #24
 80a3304:	f000 fbc0 	bl	80a3a88 <_ZdlPvj>
 80a3308:	4620      	mov	r0, r4
 80a330a:	bd10      	pop	{r4, pc}

080a330c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a330e:	460e      	mov	r6, r1
 80a3310:	2400      	movs	r4, #0
 80a3312:	f100 0708 	add.w	r7, r0, #8
 80a3316:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a3318:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a331c:	220a      	movs	r2, #10
 80a331e:	4630      	mov	r0, r6
 80a3320:	f7ff fdf7 	bl	80a2f12 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3324:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3326:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a3328:	d101      	bne.n	80a332e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a332a:	4620      	mov	r0, r4
 80a332c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a332e:	2c00      	cmp	r4, #0
 80a3330:	d0f2      	beq.n	80a3318 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a3332:	212e      	movs	r1, #46	; 0x2e
 80a3334:	4630      	mov	r0, r6
 80a3336:	f7ff fdcd 	bl	80a2ed4 <_ZN5Print5printEc>
 80a333a:	4404      	add	r4, r0
 80a333c:	e7ec      	b.n	80a3318 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a3340 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a3340:	b510      	push	{r4, lr}
 80a3342:	4604      	mov	r4, r0
 80a3344:	4b04      	ldr	r3, [pc, #16]	; (80a3358 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3346:	2211      	movs	r2, #17
 80a3348:	2100      	movs	r1, #0
 80a334a:	f840 3b04 	str.w	r3, [r0], #4
 80a334e:	f002 fe59 	bl	80a6004 <memset>
}
 80a3352:	4620      	mov	r0, r4
 80a3354:	bd10      	pop	{r4, pc}
 80a3356:	bf00      	nop
 80a3358:	080a6ddc 	.word	0x080a6ddc

080a335c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a335c:	4603      	mov	r3, r0
 80a335e:	4a07      	ldr	r2, [pc, #28]	; (80a337c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a3360:	b510      	push	{r4, lr}
 80a3362:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a3366:	f101 0210 	add.w	r2, r1, #16
 80a336a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a336e:	4291      	cmp	r1, r2
 80a3370:	f843 4b04 	str.w	r4, [r3], #4
 80a3374:	d1f9      	bne.n	80a336a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a3376:	780a      	ldrb	r2, [r1, #0]
 80a3378:	701a      	strb	r2, [r3, #0]
}
 80a337a:	bd10      	pop	{r4, pc}
 80a337c:	080a6ddc 	.word	0x080a6ddc

080a3380 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a3380:	4a02      	ldr	r2, [pc, #8]	; (80a338c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a3382:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a3386:	2204      	movs	r2, #4
 80a3388:	7502      	strb	r2, [r0, #20]
}
 80a338a:	4770      	bx	lr
 80a338c:	080a6ddc 	.word	0x080a6ddc

080a3390 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a3390:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a3392:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a3396:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a339a:	2304      	movs	r3, #4
 80a339c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a33a0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a33a4:	6044      	str	r4, [r0, #4]
 80a33a6:	7503      	strb	r3, [r0, #20]
}
 80a33a8:	bd10      	pop	{r4, pc}
	...

080a33ac <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a33ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a33ae:	4d04      	ldr	r5, [pc, #16]	; (80a33c0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a33b0:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a33b2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a33b6:	9500      	str	r5, [sp, #0]
 80a33b8:	f7ff ffea 	bl	80a3390 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a33bc:	b003      	add	sp, #12
 80a33be:	bd30      	pop	{r4, r5, pc}
 80a33c0:	080a6ddc 	.word	0x080a6ddc

080a33c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a33c4:	7441      	strb	r1, [r0, #17]
}
 80a33c6:	4770      	bx	lr

080a33c8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a33c8:	4770      	bx	lr

080a33ca <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a33ca:	4770      	bx	lr

080a33cc <_ZN9USBSerial4readEv>:
{
 80a33cc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a33ce:	2100      	movs	r1, #0
 80a33d0:	7c00      	ldrb	r0, [r0, #16]
 80a33d2:	f7ff fb9f 	bl	80a2b14 <HAL_USB_USART_Receive_Data>
}
 80a33d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a33da:	bd08      	pop	{r3, pc}

080a33dc <_ZN9USBSerial4peekEv>:
{
 80a33dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a33de:	2101      	movs	r1, #1
 80a33e0:	7c00      	ldrb	r0, [r0, #16]
 80a33e2:	f7ff fb97 	bl	80a2b14 <HAL_USB_USART_Receive_Data>
}
 80a33e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a33ea:	bd08      	pop	{r3, pc}

080a33ec <_ZN9USBSerial17availableForWriteEv>:
{
 80a33ec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a33ee:	7c00      	ldrb	r0, [r0, #16]
 80a33f0:	f7ff fb88 	bl	80a2b04 <HAL_USB_USART_Available_Data_For_Write>
}
 80a33f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a33f8:	bd08      	pop	{r3, pc}

080a33fa <_ZN9USBSerial9availableEv>:
{
 80a33fa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a33fc:	7c00      	ldrb	r0, [r0, #16]
 80a33fe:	f7ff fb79 	bl	80a2af4 <HAL_USB_USART_Available_Data>
}
 80a3402:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3406:	bd08      	pop	{r3, pc}

080a3408 <_ZN9USBSerial5writeEh>:
{
 80a3408:	b538      	push	{r3, r4, r5, lr}
 80a340a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a340c:	7c00      	ldrb	r0, [r0, #16]
{
 80a340e:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3410:	f7ff fb78 	bl	80a2b04 <HAL_USB_USART_Available_Data_For_Write>
 80a3414:	2800      	cmp	r0, #0
 80a3416:	dc01      	bgt.n	80a341c <_ZN9USBSerial5writeEh+0x14>
 80a3418:	7c60      	ldrb	r0, [r4, #17]
 80a341a:	b128      	cbz	r0, 80a3428 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a341c:	4629      	mov	r1, r5
 80a341e:	7c20      	ldrb	r0, [r4, #16]
 80a3420:	f7ff fb80 	bl	80a2b24 <HAL_USB_USART_Send_Data>
 80a3424:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a3428:	bd38      	pop	{r3, r4, r5, pc}

080a342a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a342a:	7c00      	ldrb	r0, [r0, #16]
 80a342c:	f7ff bb82 	b.w	80a2b34 <HAL_USB_USART_Flush_Data>

080a3430 <_ZN9USBSerialD0Ev>:
 80a3430:	b510      	push	{r4, lr}
 80a3432:	4604      	mov	r4, r0
 80a3434:	2114      	movs	r1, #20
 80a3436:	f000 fb27 	bl	80a3a88 <_ZdlPvj>
 80a343a:	4620      	mov	r0, r4
 80a343c:	bd10      	pop	{r4, pc}

080a343e <__tcf_1>:
 80a343e:	4770      	bx	lr

080a3440 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3440:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3446:	4604      	mov	r4, r0
 80a3448:	4608      	mov	r0, r1
 80a344a:	2100      	movs	r1, #0
 80a344c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a3450:	4b04      	ldr	r3, [pc, #16]	; (80a3464 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a3452:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3454:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a3456:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a3458:	4611      	mov	r1, r2
  _blocking = true;
 80a345a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a345c:	f7ff fb3a 	bl	80a2ad4 <HAL_USB_USART_Init>
}
 80a3460:	4620      	mov	r0, r4
 80a3462:	bd10      	pop	{r4, pc}
 80a3464:	080a6df0 	.word	0x080a6df0

080a3468 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3468:	2200      	movs	r2, #0
 80a346a:	7c00      	ldrb	r0, [r0, #16]
 80a346c:	f7ff bb3a 	b.w	80a2ae4 <HAL_USB_USART_Begin>

080a3470 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
 80a3470:	7c00      	ldrb	r0, [r0, #16]
 80a3472:	f7ff bb67 	b.w	80a2b44 <HAL_USB_USART_Is_Enabled>

080a3476 <_ZN9USBSerialcvbEv>:
  return isEnabled();
 80a3476:	f7ff bffb 	b.w	80a3470 <_ZN9USBSerial9isEnabledEv>
	...

080a347c <_Z19acquireSerialBufferv>:
{
 80a347c:	b510      	push	{r4, lr}
 80a347e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3480:	2214      	movs	r2, #20
 80a3482:	2100      	movs	r1, #0
 80a3484:	f002 fdbe 	bl	80a6004 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a3488:	4b05      	ldr	r3, [pc, #20]	; (80a34a0 <_Z19acquireSerialBufferv+0x24>)
}
 80a348a:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a348c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a348e:	4b05      	ldr	r3, [pc, #20]	; (80a34a4 <_Z19acquireSerialBufferv+0x28>)
 80a3490:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3492:	f240 1301 	movw	r3, #257	; 0x101
 80a3496:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3498:	2381      	movs	r3, #129	; 0x81
 80a349a:	8223      	strh	r3, [r4, #16]
}
 80a349c:	bd10      	pop	{r4, pc}
 80a349e:	bf00      	nop
 80a34a0:	20000198 	.word	0x20000198
 80a34a4:	20000299 	.word	0x20000299

080a34a8 <_Z16_fetch_usbserialv>:
{
 80a34a8:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a34aa:	4d0e      	ldr	r5, [pc, #56]	; (80a34e4 <_Z16_fetch_usbserialv+0x3c>)
{
 80a34ac:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a34ae:	a801      	add	r0, sp, #4
 80a34b0:	f7ff ffe4 	bl	80a347c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a34b4:	7829      	ldrb	r1, [r5, #0]
 80a34b6:	f3bf 8f5b 	dmb	ish
 80a34ba:	f011 0401 	ands.w	r4, r1, #1
 80a34be:	d10e      	bne.n	80a34de <_Z16_fetch_usbserialv+0x36>
 80a34c0:	4628      	mov	r0, r5
 80a34c2:	f7fc fdfb 	bl	80a00bc <__cxa_guard_acquire>
 80a34c6:	b150      	cbz	r0, 80a34de <_Z16_fetch_usbserialv+0x36>
 80a34c8:	4621      	mov	r1, r4
 80a34ca:	aa01      	add	r2, sp, #4
 80a34cc:	4806      	ldr	r0, [pc, #24]	; (80a34e8 <_Z16_fetch_usbserialv+0x40>)
 80a34ce:	f7ff ffb7 	bl	80a3440 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a34d2:	4628      	mov	r0, r5
 80a34d4:	f7fc fdf7 	bl	80a00c6 <__cxa_guard_release>
 80a34d8:	4804      	ldr	r0, [pc, #16]	; (80a34ec <_Z16_fetch_usbserialv+0x44>)
 80a34da:	f002 fd7f 	bl	80a5fdc <atexit>
	return _usbserial;
}
 80a34de:	4802      	ldr	r0, [pc, #8]	; (80a34e8 <_Z16_fetch_usbserialv+0x40>)
 80a34e0:	b007      	add	sp, #28
 80a34e2:	bd30      	pop	{r4, r5, pc}
 80a34e4:	20000168 	.word	0x20000168
 80a34e8:	20000170 	.word	0x20000170
 80a34ec:	080a33c9 	.word	0x080a33c9

080a34f0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a34f0:	b510      	push	{r4, lr}
 80a34f2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a34f4:	2214      	movs	r2, #20
 80a34f6:	2100      	movs	r1, #0
 80a34f8:	f002 fd84 	bl	80a6004 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a34fc:	4b05      	ldr	r3, [pc, #20]	; (80a3514 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a34fe:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a3500:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3502:	4b05      	ldr	r3, [pc, #20]	; (80a3518 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3504:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3506:	f240 1301 	movw	r3, #257	; 0x101
 80a350a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a350c:	2381      	movs	r3, #129	; 0x81
 80a350e:	8223      	strh	r3, [r4, #16]
}
 80a3510:	bd10      	pop	{r4, pc}
 80a3512:	bf00      	nop
 80a3514:	2000031a 	.word	0x2000031a
 80a3518:	2000041b 	.word	0x2000041b

080a351c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a351c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a351e:	4c0e      	ldr	r4, [pc, #56]	; (80a3558 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a3520:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3522:	a801      	add	r0, sp, #4
 80a3524:	f7ff ffe4 	bl	80a34f0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3528:	7823      	ldrb	r3, [r4, #0]
 80a352a:	f3bf 8f5b 	dmb	ish
 80a352e:	07db      	lsls	r3, r3, #31
 80a3530:	d40e      	bmi.n	80a3550 <_Z17_fetch_usbserial1v+0x34>
 80a3532:	4620      	mov	r0, r4
 80a3534:	f7fc fdc2 	bl	80a00bc <__cxa_guard_acquire>
 80a3538:	b150      	cbz	r0, 80a3550 <_Z17_fetch_usbserial1v+0x34>
 80a353a:	2101      	movs	r1, #1
 80a353c:	aa01      	add	r2, sp, #4
 80a353e:	4807      	ldr	r0, [pc, #28]	; (80a355c <_Z17_fetch_usbserial1v+0x40>)
 80a3540:	f7ff ff7e 	bl	80a3440 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3544:	4620      	mov	r0, r4
 80a3546:	f7fc fdbe 	bl	80a00c6 <__cxa_guard_release>
 80a354a:	4805      	ldr	r0, [pc, #20]	; (80a3560 <_Z17_fetch_usbserial1v+0x44>)
 80a354c:	f002 fd46 	bl	80a5fdc <atexit>
  return _usbserial1;
}
 80a3550:	4802      	ldr	r0, [pc, #8]	; (80a355c <_Z17_fetch_usbserial1v+0x40>)
 80a3552:	b006      	add	sp, #24
 80a3554:	bd10      	pop	{r4, pc}
 80a3556:	bf00      	nop
 80a3558:	2000016c 	.word	0x2000016c
 80a355c:	20000184 	.word	0x20000184
 80a3560:	080a343f 	.word	0x080a343f

080a3564 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a3564:	4770      	bx	lr

080a3566 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3566:	7441      	strb	r1, [r0, #17]
}
 80a3568:	4770      	bx	lr

080a356a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a356a:	4770      	bx	lr

080a356c <_ZN11USARTSerial17availableForWriteEv>:
{
 80a356c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a356e:	7c00      	ldrb	r0, [r0, #16]
 80a3570:	f7ff fa04 	bl	80a297c <hal_usart_available_data_for_write>
}
 80a3574:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3578:	bd08      	pop	{r3, pc}

080a357a <_ZN11USARTSerial9availableEv>:
{
 80a357a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a357c:	7c00      	ldrb	r0, [r0, #16]
 80a357e:	f7ff f9d5 	bl	80a292c <hal_usart_available>
}
 80a3582:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3586:	bd08      	pop	{r3, pc}

080a3588 <_ZN11USARTSerial4peekEv>:
{
 80a3588:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a358a:	7c00      	ldrb	r0, [r0, #16]
 80a358c:	f7ff f9de 	bl	80a294c <hal_usart_peek>
}
 80a3590:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3594:	bd08      	pop	{r3, pc}

080a3596 <_ZN11USARTSerial4readEv>:
{
 80a3596:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a3598:	7c00      	ldrb	r0, [r0, #16]
 80a359a:	f7ff f9cf 	bl	80a293c <hal_usart_read>
}
 80a359e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a35a2:	bd08      	pop	{r3, pc}

080a35a4 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a35a4:	7c00      	ldrb	r0, [r0, #16]
 80a35a6:	f7ff b9d9 	b.w	80a295c <hal_usart_flush>

080a35aa <_ZN11USARTSerial5writeEh>:
{
 80a35aa:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a35ac:	7c46      	ldrb	r6, [r0, #17]
{
 80a35ae:	4604      	mov	r4, r0
 80a35b0:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a35b2:	b12e      	cbz	r6, 80a35c0 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a35b4:	4629      	mov	r1, r5
 80a35b6:	7c20      	ldrb	r0, [r4, #16]
}
 80a35b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a35bc:	f7ff b9ae 	b.w	80a291c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a35c0:	7c00      	ldrb	r0, [r0, #16]
 80a35c2:	f7ff f9db 	bl	80a297c <hal_usart_available_data_for_write>
 80a35c6:	2800      	cmp	r0, #0
 80a35c8:	dcf4      	bgt.n	80a35b4 <_ZN11USARTSerial5writeEh+0xa>
}
 80a35ca:	4630      	mov	r0, r6
 80a35cc:	bd70      	pop	{r4, r5, r6, pc}

080a35ce <_ZN11USARTSerialD0Ev>:
 80a35ce:	b510      	push	{r4, lr}
 80a35d0:	4604      	mov	r4, r0
 80a35d2:	2114      	movs	r1, #20
 80a35d4:	f000 fa58 	bl	80a3a88 <_ZdlPvj>
 80a35d8:	4620      	mov	r0, r4
 80a35da:	bd10      	pop	{r4, pc}

080a35dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a35dc:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a35e0:	b510      	push	{r4, lr}
 80a35e2:	4604      	mov	r4, r0
 80a35e4:	4608      	mov	r0, r1
 80a35e6:	4611      	mov	r1, r2
 80a35e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a35ec:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a35f0:	4a04      	ldr	r2, [pc, #16]	; (80a3604 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a35f2:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a35f4:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a35f6:	2201      	movs	r2, #1
 80a35f8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a35fa:	461a      	mov	r2, r3
 80a35fc:	f7ff f986 	bl	80a290c <hal_usart_init>
}
 80a3600:	4620      	mov	r0, r4
 80a3602:	bd10      	pop	{r4, pc}
 80a3604:	080a6e20 	.word	0x080a6e20

080a3608 <_Z22__fetch_global_Serial1v>:
{
 80a3608:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a360a:	4d0c      	ldr	r5, [pc, #48]	; (80a363c <_Z22__fetch_global_Serial1v+0x34>)
 80a360c:	7829      	ldrb	r1, [r5, #0]
 80a360e:	f3bf 8f5b 	dmb	ish
 80a3612:	f011 0401 	ands.w	r4, r1, #1
 80a3616:	d10f      	bne.n	80a3638 <_Z22__fetch_global_Serial1v+0x30>
 80a3618:	4628      	mov	r0, r5
 80a361a:	f7fc fd4f 	bl	80a00bc <__cxa_guard_acquire>
 80a361e:	b158      	cbz	r0, 80a3638 <_Z22__fetch_global_Serial1v+0x30>
 80a3620:	4621      	mov	r1, r4
 80a3622:	4b07      	ldr	r3, [pc, #28]	; (80a3640 <_Z22__fetch_global_Serial1v+0x38>)
 80a3624:	4a07      	ldr	r2, [pc, #28]	; (80a3644 <_Z22__fetch_global_Serial1v+0x3c>)
 80a3626:	4808      	ldr	r0, [pc, #32]	; (80a3648 <_Z22__fetch_global_Serial1v+0x40>)
 80a3628:	f7ff ffd8 	bl	80a35dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a362c:	4628      	mov	r0, r5
 80a362e:	f7fc fd4a 	bl	80a00c6 <__cxa_guard_release>
 80a3632:	4806      	ldr	r0, [pc, #24]	; (80a364c <_Z22__fetch_global_Serial1v+0x44>)
 80a3634:	f002 fcd2 	bl	80a5fdc <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a3638:	4803      	ldr	r0, [pc, #12]	; (80a3648 <_Z22__fetch_global_Serial1v+0x40>)
 80a363a:	bd38      	pop	{r3, r4, r5, pc}
 80a363c:	2000049c 	.word	0x2000049c
 80a3640:	20000524 	.word	0x20000524
 80a3644:	200004a0 	.word	0x200004a0
 80a3648:	200005a8 	.word	0x200005a8
 80a364c:	080a356b 	.word	0x080a356b

080a3650 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a3650:	4770      	bx	lr

080a3652 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a3652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3654:	4606      	mov	r6, r0
 80a3656:	4615      	mov	r5, r2
 80a3658:	460c      	mov	r4, r1
 80a365a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a365c:	42bc      	cmp	r4, r7
 80a365e:	d006      	beq.n	80a366e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3660:	6833      	ldr	r3, [r6, #0]
 80a3662:	4630      	mov	r0, r6
 80a3664:	689b      	ldr	r3, [r3, #8]
 80a3666:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a366a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a366c:	e7f6      	b.n	80a365c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a366e:	4628      	mov	r0, r5
 80a3670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3672 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a3672:	2200      	movs	r2, #0
 80a3674:	7c00      	ldrb	r0, [r0, #16]
 80a3676:	f7ff b9a9 	b.w	80a29cc <hal_i2c_write>

080a367a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a367a:	2100      	movs	r1, #0
 80a367c:	7c00      	ldrb	r0, [r0, #16]
 80a367e:	f7ff b9ad 	b.w	80a29dc <hal_i2c_available>

080a3682 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a3682:	2100      	movs	r1, #0
 80a3684:	7c00      	ldrb	r0, [r0, #16]
 80a3686:	f7ff b9b1 	b.w	80a29ec <hal_i2c_read>

080a368a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a368a:	2100      	movs	r1, #0
 80a368c:	7c00      	ldrb	r0, [r0, #16]
 80a368e:	f7ff b9b5 	b.w	80a29fc <hal_i2c_peek>

080a3692 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a3692:	2100      	movs	r1, #0
 80a3694:	7c00      	ldrb	r0, [r0, #16]
 80a3696:	f7ff b9b9 	b.w	80a2a0c <hal_i2c_flush>

080a369a <_ZN7TwoWireD0Ev>:
 80a369a:	b510      	push	{r4, lr}
 80a369c:	4604      	mov	r4, r0
 80a369e:	2114      	movs	r1, #20
 80a36a0:	f000 f9f2 	bl	80a3a88 <_ZdlPvj>
 80a36a4:	4620      	mov	r0, r4
 80a36a6:	bd10      	pop	{r4, pc}

080a36a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a36a8:	b510      	push	{r4, lr}
 80a36aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a36ae:	4604      	mov	r4, r0
 80a36b0:	4608      	mov	r0, r1
 80a36b2:	2100      	movs	r1, #0
 80a36b4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a36b8:	4b03      	ldr	r3, [pc, #12]	; (80a36c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a36ba:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a36bc:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a36be:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a36c0:	f7ff f9b4 	bl	80a2a2c <hal_i2c_init>
}
 80a36c4:	4620      	mov	r0, r4
 80a36c6:	bd10      	pop	{r4, pc}
 80a36c8:	080a6e50 	.word	0x080a6e50

080a36cc <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 80a36cc:	2200      	movs	r2, #0
 80a36ce:	7c00      	ldrb	r0, [r0, #16]
 80a36d0:	f7ff b95c 	b.w	80a298c <hal_i2c_set_speed>

080a36d4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a36d4:	2300      	movs	r3, #0
 80a36d6:	7c00      	ldrb	r0, [r0, #16]
 80a36d8:	461a      	mov	r2, r3
 80a36da:	4619      	mov	r1, r3
 80a36dc:	f7ff b95e 	b.w	80a299c <hal_i2c_begin>

080a36e0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a36e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a36e2:	2200      	movs	r2, #0
 80a36e4:	2314      	movs	r3, #20
 80a36e6:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a36ea:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a36ee:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a36f0:	7c00      	ldrb	r0, [r0, #16]
 80a36f2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a36f6:	684b      	ldr	r3, [r1, #4]
 80a36f8:	9303      	str	r3, [sp, #12]
 80a36fa:	68cb      	ldr	r3, [r1, #12]
 80a36fc:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a36fe:	7a0b      	ldrb	r3, [r1, #8]
 80a3700:	a901      	add	r1, sp, #4
 80a3702:	9305      	str	r3, [sp, #20]
 80a3704:	f7ff f99c 	bl	80a2a40 <hal_i2c_request_ex>
}
 80a3708:	b007      	add	sp, #28
 80a370a:	f85d fb04 	ldr.w	pc, [sp], #4

080a370e <_ZN7TwoWire11requestFromEhjh>:
{
 80a370e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a3710:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a3712:	f88d 1000 	strb.w	r1, [sp]
 80a3716:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a371a:	bf18      	it	ne
 80a371c:	2301      	movne	r3, #1
 80a371e:	9103      	str	r1, [sp, #12]
 80a3720:	4669      	mov	r1, sp
    size_ = size;
 80a3722:	9201      	str	r2, [sp, #4]
 80a3724:	f88d 3008 	strb.w	r3, [sp, #8]
 80a3728:	f7ff ffda 	bl	80a36e0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a372c:	b005      	add	sp, #20
 80a372e:	f85d fb04 	ldr.w	pc, [sp], #4

080a3732 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a3732:	2301      	movs	r3, #1
 80a3734:	f7ff bfeb 	b.w	80a370e <_ZN7TwoWire11requestFromEhjh>

080a3738 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a3738:	2200      	movs	r2, #0
 80a373a:	7c00      	ldrb	r0, [r0, #16]
 80a373c:	f7ff b936 	b.w	80a29ac <hal_i2c_begin_transmission>

080a3740 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a3740:	2200      	movs	r2, #0
 80a3742:	7c00      	ldrb	r0, [r0, #16]
 80a3744:	f7ff b93a 	b.w	80a29bc <hal_i2c_end_transmission>

080a3748 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a3748:	2101      	movs	r1, #1
 80a374a:	f7ff bff9 	b.w	80a3740 <_ZN7TwoWire15endTransmissionEh>

080a374e <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a374e:	2200      	movs	r2, #0
 80a3750:	6840      	ldr	r0, [r0, #4]
 80a3752:	4611      	mov	r1, r2
 80a3754:	f7ff ba4a 	b.w	80a2bec <network_ready>

080a3758 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3758:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a375a:	4615      	mov	r5, r2
 80a375c:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a375e:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a3760:	460e      	mov	r6, r1
 80a3762:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a3764:	2100      	movs	r1, #0
 80a3766:	a803      	add	r0, sp, #12
 80a3768:	f002 fc4c 	bl	80a6004 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a376c:	4628      	mov	r0, r5
 80a376e:	f002 fc75 	bl	80a605c <strlen>
 80a3772:	2700      	movs	r7, #0
 80a3774:	b281      	uxth	r1, r0
 80a3776:	6873      	ldr	r3, [r6, #4]
 80a3778:	4628      	mov	r0, r5
 80a377a:	9700      	str	r7, [sp, #0]
 80a377c:	aa03      	add	r2, sp, #12
 80a377e:	f7ff f9e9 	bl	80a2b54 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3782:	b130      	cbz	r0, 80a3792 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a3784:	4639      	mov	r1, r7
 80a3786:	4620      	mov	r0, r4
 80a3788:	f7ff fdfa 	bl	80a3380 <_ZN9IPAddressC1Em>
    }
 80a378c:	4620      	mov	r0, r4
 80a378e:	b009      	add	sp, #36	; 0x24
 80a3790:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3792:	4620      	mov	r0, r4
 80a3794:	a903      	add	r1, sp, #12
 80a3796:	f7ff fde1 	bl	80a335c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a379a:	e7f7      	b.n	80a378c <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a379c <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a379c:	2200      	movs	r2, #0
 80a379e:	6840      	ldr	r0, [r0, #4]
 80a37a0:	4611      	mov	r1, r2
 80a37a2:	f7ff ba43 	b.w	80a2c2c <network_listening>

080a37a6 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a37a6:	2200      	movs	r2, #0
 80a37a8:	6840      	ldr	r0, [r0, #4]
 80a37aa:	4611      	mov	r1, r2
 80a37ac:	f7ff ba4e 	b.w	80a2c4c <network_get_listen_timeout>

080a37b0 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a37b0:	2200      	movs	r2, #0
 80a37b2:	6840      	ldr	r0, [r0, #4]
 80a37b4:	f7ff ba42 	b.w	80a2c3c <network_set_listen_timeout>

080a37b8 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a37b8:	2200      	movs	r2, #0
 80a37ba:	6840      	ldr	r0, [r0, #4]
 80a37bc:	f081 0101 	eor.w	r1, r1, #1
 80a37c0:	f7ff ba2c 	b.w	80a2c1c <network_listen>

080a37c4 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a37c4:	2300      	movs	r3, #0
 80a37c6:	6840      	ldr	r0, [r0, #4]
 80a37c8:	461a      	mov	r2, r3
 80a37ca:	4619      	mov	r1, r3
 80a37cc:	f7ff ba1e 	b.w	80a2c0c <network_off>

080a37d0 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a37d0:	2200      	movs	r2, #0
 80a37d2:	6840      	ldr	r0, [r0, #4]
 80a37d4:	4611      	mov	r1, r2
 80a37d6:	f7ff b9f9 	b.w	80a2bcc <network_connecting>

080a37da <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a37da:	2200      	movs	r2, #0
 80a37dc:	2102      	movs	r1, #2
 80a37de:	6840      	ldr	r0, [r0, #4]
 80a37e0:	f7ff b9fc 	b.w	80a2bdc <network_disconnect>

080a37e4 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a37e4:	2300      	movs	r3, #0
 80a37e6:	6840      	ldr	r0, [r0, #4]
 80a37e8:	461a      	mov	r2, r3
 80a37ea:	f7ff b9e7 	b.w	80a2bbc <network_connect>
	...

080a37f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a37f0:	2204      	movs	r2, #4
 80a37f2:	4b02      	ldr	r3, [pc, #8]	; (80a37fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a37f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a37f6:	4a02      	ldr	r2, [pc, #8]	; (80a3800 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a37f8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a37fa:	4770      	bx	lr
 80a37fc:	200005bc 	.word	0x200005bc
 80a3800:	080a6e78 	.word	0x080a6e78

080a3804 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a3804:	2300      	movs	r3, #0
 80a3806:	6840      	ldr	r0, [r0, #4]
 80a3808:	461a      	mov	r2, r3
 80a380a:	f7ff b9d7 	b.w	80a2bbc <network_connect>

080a380e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a380e:	2200      	movs	r2, #0
 80a3810:	2102      	movs	r1, #2
 80a3812:	6840      	ldr	r0, [r0, #4]
 80a3814:	f7ff b9e2 	b.w	80a2bdc <network_disconnect>

080a3818 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a3818:	2200      	movs	r2, #0
 80a381a:	6840      	ldr	r0, [r0, #4]
 80a381c:	4611      	mov	r1, r2
 80a381e:	f7ff b9d5 	b.w	80a2bcc <network_connecting>

080a3822 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a3822:	2200      	movs	r2, #0
 80a3824:	6840      	ldr	r0, [r0, #4]
 80a3826:	4611      	mov	r1, r2
 80a3828:	f7ff b9e0 	b.w	80a2bec <network_ready>

080a382c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a382c:	2300      	movs	r3, #0
 80a382e:	6840      	ldr	r0, [r0, #4]
 80a3830:	461a      	mov	r2, r3
 80a3832:	4619      	mov	r1, r3
 80a3834:	f7ff b9e2 	b.w	80a2bfc <network_on>

080a3838 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a3838:	2300      	movs	r3, #0
 80a383a:	6840      	ldr	r0, [r0, #4]
 80a383c:	461a      	mov	r2, r3
 80a383e:	4619      	mov	r1, r3
 80a3840:	f7ff b9e4 	b.w	80a2c0c <network_off>

080a3844 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a3844:	2100      	movs	r1, #0
 80a3846:	6840      	ldr	r0, [r0, #4]
 80a3848:	f7ff ba08 	b.w	80a2c5c <network_is_on>

080a384c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a384c:	2100      	movs	r1, #0
 80a384e:	6840      	ldr	r0, [r0, #4]
 80a3850:	f7ff ba0c 	b.w	80a2c6c <network_is_off>

080a3854 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a3854:	2200      	movs	r2, #0
 80a3856:	6840      	ldr	r0, [r0, #4]
 80a3858:	f081 0101 	eor.w	r1, r1, #1
 80a385c:	f7ff b9de 	b.w	80a2c1c <network_listen>

080a3860 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a3860:	2200      	movs	r2, #0
 80a3862:	6840      	ldr	r0, [r0, #4]
 80a3864:	f7ff b9ea 	b.w	80a2c3c <network_set_listen_timeout>

080a3868 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a3868:	2200      	movs	r2, #0
 80a386a:	6840      	ldr	r0, [r0, #4]
 80a386c:	4611      	mov	r1, r2
 80a386e:	f7ff b9ed 	b.w	80a2c4c <network_get_listen_timeout>

080a3872 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a3872:	2200      	movs	r2, #0
 80a3874:	6840      	ldr	r0, [r0, #4]
 80a3876:	4611      	mov	r1, r2
 80a3878:	f7ff b9d8 	b.w	80a2c2c <network_listening>

080a387c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a387c:	b570      	push	{r4, r5, r6, lr}
 80a387e:	4615      	mov	r5, r2
 80a3880:	b08e      	sub	sp, #56	; 0x38
 80a3882:	4604      	mov	r4, r0
    IPAddress addr;
 80a3884:	a808      	add	r0, sp, #32
 80a3886:	f7ff fd5b 	bl	80a3340 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a388a:	2211      	movs	r2, #17
 80a388c:	2100      	movs	r1, #0
 80a388e:	a803      	add	r0, sp, #12
 80a3890:	f002 fbb8 	bl	80a6004 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3894:	2600      	movs	r6, #0
 80a3896:	4628      	mov	r0, r5
 80a3898:	f002 fbe0 	bl	80a605c <strlen>
 80a389c:	4b0a      	ldr	r3, [pc, #40]	; (80a38c8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a389e:	9600      	str	r6, [sp, #0]
 80a38a0:	b281      	uxth	r1, r0
 80a38a2:	685b      	ldr	r3, [r3, #4]
 80a38a4:	4628      	mov	r0, r5
 80a38a6:	aa03      	add	r2, sp, #12
 80a38a8:	f7ff f954 	bl	80a2b54 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a38ac:	b130      	cbz	r0, 80a38bc <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a38ae:	4631      	mov	r1, r6
 80a38b0:	4620      	mov	r0, r4
 80a38b2:	f7ff fd65 	bl	80a3380 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a38b6:	4620      	mov	r0, r4
 80a38b8:	b00e      	add	sp, #56	; 0x38
 80a38ba:	bd70      	pop	{r4, r5, r6, pc}
 80a38bc:	4620      	mov	r0, r4
 80a38be:	a903      	add	r1, sp, #12
 80a38c0:	f7ff fd4c 	bl	80a335c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a38c4:	e7f7      	b.n	80a38b6 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a38c6:	bf00      	nop
 80a38c8:	200005bc 	.word	0x200005bc

080a38cc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a38cc:	4b02      	ldr	r3, [pc, #8]	; (80a38d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a38ce:	4a03      	ldr	r2, [pc, #12]	; (80a38dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a38d0:	601a      	str	r2, [r3, #0]
 80a38d2:	2200      	movs	r2, #0
 80a38d4:	605a      	str	r2, [r3, #4]

} // spark
 80a38d6:	4770      	bx	lr
 80a38d8:	200005c4 	.word	0x200005c4
 80a38dc:	080a6eb4 	.word	0x080a6eb4

080a38e0 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a38e0:	4b02      	ldr	r3, [pc, #8]	; (80a38ec <__tcf_0+0xc>)
 80a38e2:	6898      	ldr	r0, [r3, #8]
 80a38e4:	b108      	cbz	r0, 80a38ea <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a38e6:	f7fe bff9 	b.w	80a28dc <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a38ea:	4770      	bx	lr
 80a38ec:	2000012c 	.word	0x2000012c

080a38f0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a38f0:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a38f2:	b570      	push	{r4, r5, r6, lr}
 80a38f4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a38f6:	d901      	bls.n	80a38fc <pinAvailable+0xc>
    return false;
 80a38f8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a38fa:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a38fc:	f1a0 030d 	sub.w	r3, r0, #13
 80a3900:	2b02      	cmp	r3, #2
 80a3902:	d90b      	bls.n	80a391c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a3904:	2801      	cmp	r0, #1
 80a3906:	d824      	bhi.n	80a3952 <pinAvailable+0x62>
 80a3908:	f000 f89a 	bl	80a3a40 <_Z19__fetch_global_Wirev>
 80a390c:	2100      	movs	r1, #0
 80a390e:	7c00      	ldrb	r0, [r0, #16]
 80a3910:	f7ff f884 	bl	80a2a1c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3914:	f080 0001 	eor.w	r0, r0, #1
 80a3918:	b2c0      	uxtb	r0, r0
 80a391a:	e7ee      	b.n	80a38fa <pinAvailable+0xa>
 80a391c:	4e12      	ldr	r6, [pc, #72]	; (80a3968 <pinAvailable+0x78>)
 80a391e:	7831      	ldrb	r1, [r6, #0]
 80a3920:	f3bf 8f5b 	dmb	ish
 80a3924:	f011 0501 	ands.w	r5, r1, #1
 80a3928:	d10d      	bne.n	80a3946 <pinAvailable+0x56>
 80a392a:	4630      	mov	r0, r6
 80a392c:	f7fc fbc6 	bl	80a00bc <__cxa_guard_acquire>
 80a3930:	b148      	cbz	r0, 80a3946 <pinAvailable+0x56>
 80a3932:	4629      	mov	r1, r5
 80a3934:	480d      	ldr	r0, [pc, #52]	; (80a396c <pinAvailable+0x7c>)
 80a3936:	f7ff f9d4 	bl	80a2ce2 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a393a:	4630      	mov	r0, r6
 80a393c:	f7fc fbc3 	bl	80a00c6 <__cxa_guard_release>
 80a3940:	480b      	ldr	r0, [pc, #44]	; (80a3970 <pinAvailable+0x80>)
 80a3942:	f002 fb4b 	bl	80a5fdc <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3946:	4b09      	ldr	r3, [pc, #36]	; (80a396c <pinAvailable+0x7c>)
 80a3948:	7818      	ldrb	r0, [r3, #0]
 80a394a:	f7ff f89b 	bl	80a2a84 <hal_spi_is_enabled>
 80a394e:	2800      	cmp	r0, #0
 80a3950:	d1d2      	bne.n	80a38f8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3952:	3c12      	subs	r4, #18
 80a3954:	2c01      	cmp	r4, #1
 80a3956:	d805      	bhi.n	80a3964 <pinAvailable+0x74>
 80a3958:	f7ff fe56 	bl	80a3608 <_Z22__fetch_global_Serial1v>
 80a395c:	7c00      	ldrb	r0, [r0, #16]
 80a395e:	f7ff f805 	bl	80a296c <hal_usart_is_enabled>
 80a3962:	e7d7      	b.n	80a3914 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a3964:	2001      	movs	r0, #1
 80a3966:	e7c8      	b.n	80a38fa <pinAvailable+0xa>
 80a3968:	20000128 	.word	0x20000128
 80a396c:	2000012c 	.word	0x2000012c
 80a3970:	080a38e1 	.word	0x080a38e1

080a3974 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3974:	2817      	cmp	r0, #23
{
 80a3976:	b538      	push	{r3, r4, r5, lr}
 80a3978:	4604      	mov	r4, r0
 80a397a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a397c:	d80a      	bhi.n	80a3994 <pinMode+0x20>
 80a397e:	29ff      	cmp	r1, #255	; 0xff
 80a3980:	d008      	beq.n	80a3994 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a3982:	f7ff ffb5 	bl	80a38f0 <pinAvailable>
 80a3986:	b128      	cbz	r0, 80a3994 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a3988:	4629      	mov	r1, r5
 80a398a:	4620      	mov	r0, r4
}
 80a398c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a3990:	f7fe bf5c 	b.w	80a284c <HAL_Pin_Mode>
}
 80a3994:	bd38      	pop	{r3, r4, r5, pc}

080a3996 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3996:	b538      	push	{r3, r4, r5, lr}
 80a3998:	4604      	mov	r4, r0
 80a399a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a399c:	f7fe ff5e 	bl	80a285c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a39a0:	28ff      	cmp	r0, #255	; 0xff
 80a39a2:	d010      	beq.n	80a39c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a39a4:	2806      	cmp	r0, #6
 80a39a6:	d804      	bhi.n	80a39b2 <digitalWrite+0x1c>
 80a39a8:	234d      	movs	r3, #77	; 0x4d
 80a39aa:	fa23 f000 	lsr.w	r0, r3, r0
 80a39ae:	07c3      	lsls	r3, r0, #31
 80a39b0:	d409      	bmi.n	80a39c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a39b2:	4620      	mov	r0, r4
 80a39b4:	f7ff ff9c 	bl	80a38f0 <pinAvailable>
 80a39b8:	b128      	cbz	r0, 80a39c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a39ba:	4629      	mov	r1, r5
 80a39bc:	4620      	mov	r0, r4
}
 80a39be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a39c2:	f7fe bf53 	b.w	80a286c <HAL_GPIO_Write>
}
 80a39c6:	bd38      	pop	{r3, r4, r5, pc}

080a39c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a39c8:	b510      	push	{r4, lr}
 80a39ca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a39cc:	f7fe ff46 	bl	80a285c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a39d0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a39d2:	b2db      	uxtb	r3, r3
 80a39d4:	2b01      	cmp	r3, #1
 80a39d6:	d908      	bls.n	80a39ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a39d8:	4620      	mov	r0, r4
 80a39da:	f7ff ff89 	bl	80a38f0 <pinAvailable>
 80a39de:	b120      	cbz	r0, 80a39ea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a39e0:	4620      	mov	r0, r4
}
 80a39e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a39e6:	f7fe bf49 	b.w	80a287c <HAL_GPIO_Read>
}
 80a39ea:	2000      	movs	r0, #0
 80a39ec:	bd10      	pop	{r4, pc}
	...

080a39f0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a39f0:	2300      	movs	r3, #0
 80a39f2:	b507      	push	{r0, r1, r2, lr}
 80a39f4:	461a      	mov	r2, r3
 80a39f6:	4619      	mov	r1, r3
 80a39f8:	9300      	str	r3, [sp, #0]
 80a39fa:	4803      	ldr	r0, [pc, #12]	; (80a3a08 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a39fc:	f7ff fcd6 	bl	80a33ac <_ZN9IPAddressC1Ehhhh>
 80a3a00:	b003      	add	sp, #12
 80a3a02:	f85d fb04 	ldr.w	pc, [sp], #4
 80a3a06:	bf00      	nop
 80a3a08:	200005d0 	.word	0x200005d0

080a3a0c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3a0c:	4770      	bx	lr
	...

080a3a10 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a3a10:	2300      	movs	r3, #0
{
 80a3a12:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a3a14:	2520      	movs	r5, #32
 80a3a16:	8043      	strh	r3, [r0, #2]
 80a3a18:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3a1a:	4e08      	ldr	r6, [pc, #32]	; (80a3a3c <_Z17acquireWireBufferv+0x2c>)
{
 80a3a1c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a3a1e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3a20:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a3a22:	6085      	str	r5, [r0, #8]
 80a3a24:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3a26:	4628      	mov	r0, r5
 80a3a28:	f000 f830 	bl	80a3a8c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3a2c:	4631      	mov	r1, r6
	};
 80a3a2e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3a30:	4628      	mov	r0, r5
 80a3a32:	f000 f82b 	bl	80a3a8c <_ZnajRKSt9nothrow_t>
	};
 80a3a36:	60e0      	str	r0, [r4, #12]
}
 80a3a38:	4620      	mov	r0, r4
 80a3a3a:	bd70      	pop	{r4, r5, r6, pc}
 80a3a3c:	080a6ee8 	.word	0x080a6ee8

080a3a40 <_Z19__fetch_global_Wirev>:
{
 80a3a40:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3a42:	4d0e      	ldr	r5, [pc, #56]	; (80a3a7c <_Z19__fetch_global_Wirev+0x3c>)
{
 80a3a44:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3a46:	7829      	ldrb	r1, [r5, #0]
 80a3a48:	f3bf 8f5b 	dmb	ish
 80a3a4c:	f011 0401 	ands.w	r4, r1, #1
 80a3a50:	d111      	bne.n	80a3a76 <_Z19__fetch_global_Wirev+0x36>
 80a3a52:	4628      	mov	r0, r5
 80a3a54:	f7fc fb32 	bl	80a00bc <__cxa_guard_acquire>
 80a3a58:	b168      	cbz	r0, 80a3a76 <_Z19__fetch_global_Wirev+0x36>
 80a3a5a:	a801      	add	r0, sp, #4
 80a3a5c:	f7ff ffd8 	bl	80a3a10 <_Z17acquireWireBufferv>
 80a3a60:	4621      	mov	r1, r4
 80a3a62:	aa01      	add	r2, sp, #4
 80a3a64:	4806      	ldr	r0, [pc, #24]	; (80a3a80 <_Z19__fetch_global_Wirev+0x40>)
 80a3a66:	f7ff fe1f 	bl	80a36a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a3a6a:	4628      	mov	r0, r5
 80a3a6c:	f7fc fb2b 	bl	80a00c6 <__cxa_guard_release>
 80a3a70:	4804      	ldr	r0, [pc, #16]	; (80a3a84 <_Z19__fetch_global_Wirev+0x44>)
 80a3a72:	f002 fab3 	bl	80a5fdc <atexit>
	return wire;
}
 80a3a76:	4802      	ldr	r0, [pc, #8]	; (80a3a80 <_Z19__fetch_global_Wirev+0x40>)
 80a3a78:	b007      	add	sp, #28
 80a3a7a:	bd30      	pop	{r4, r5, pc}
 80a3a7c:	200005e8 	.word	0x200005e8
 80a3a80:	200005ec 	.word	0x200005ec
 80a3a84:	080a3a0d 	.word	0x080a3a0d

080a3a88 <_ZdlPvj>:
 80a3a88:	f7fc bb0b 	b.w	80a00a2 <_ZdlPv>

080a3a8c <_ZnajRKSt9nothrow_t>:
 80a3a8c:	f7fc bb07 	b.w	80a009e <_Znaj>

080a3a90 <pow>:
 80a3a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3a94:	b08f      	sub	sp, #60	; 0x3c
 80a3a96:	461d      	mov	r5, r3
 80a3a98:	4606      	mov	r6, r0
 80a3a9a:	460f      	mov	r7, r1
 80a3a9c:	4614      	mov	r4, r2
 80a3a9e:	f000 f997 	bl	80a3dd0 <__ieee754_pow>
 80a3aa2:	4ba4      	ldr	r3, [pc, #656]	; (80a3d34 <pow+0x2a4>)
 80a3aa4:	e9cd 0100 	strd	r0, r1, [sp]
 80a3aa8:	f993 9000 	ldrsb.w	r9, [r3]
 80a3aac:	f1b9 3fff 	cmp.w	r9, #4294967295
 80a3ab0:	d038      	beq.n	80a3b24 <pow+0x94>
 80a3ab2:	4622      	mov	r2, r4
 80a3ab4:	462b      	mov	r3, r5
 80a3ab6:	4620      	mov	r0, r4
 80a3ab8:	4629      	mov	r1, r5
 80a3aba:	f001 fd59 	bl	80a5570 <__aeabi_dcmpun>
 80a3abe:	4683      	mov	fp, r0
 80a3ac0:	bb80      	cbnz	r0, 80a3b24 <pow+0x94>
 80a3ac2:	4632      	mov	r2, r6
 80a3ac4:	463b      	mov	r3, r7
 80a3ac6:	4630      	mov	r0, r6
 80a3ac8:	4639      	mov	r1, r7
 80a3aca:	f001 fd51 	bl	80a5570 <__aeabi_dcmpun>
 80a3ace:	4680      	mov	r8, r0
 80a3ad0:	2800      	cmp	r0, #0
 80a3ad2:	f040 80d9 	bne.w	80a3c88 <pow+0x1f8>
 80a3ad6:	f04f 0a00 	mov.w	sl, #0
 80a3ada:	f04f 0b00 	mov.w	fp, #0
 80a3ade:	4630      	mov	r0, r6
 80a3ae0:	4639      	mov	r1, r7
 80a3ae2:	4652      	mov	r2, sl
 80a3ae4:	465b      	mov	r3, fp
 80a3ae6:	f001 fd11 	bl	80a550c <__aeabi_dcmpeq>
 80a3aea:	b300      	cbz	r0, 80a3b2e <pow+0x9e>
 80a3aec:	4652      	mov	r2, sl
 80a3aee:	465b      	mov	r3, fp
 80a3af0:	4620      	mov	r0, r4
 80a3af2:	4629      	mov	r1, r5
 80a3af4:	f001 fd0a 	bl	80a550c <__aeabi_dcmpeq>
 80a3af8:	9003      	str	r0, [sp, #12]
 80a3afa:	2800      	cmp	r0, #0
 80a3afc:	d048      	beq.n	80a3b90 <pow+0x100>
 80a3afe:	2201      	movs	r2, #1
 80a3b00:	4b8d      	ldr	r3, [pc, #564]	; (80a3d38 <pow+0x2a8>)
 80a3b02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a3b06:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a3b0a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80a3b0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a3b12:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80a3b16:	f1b9 0f00 	cmp.w	r9, #0
 80a3b1a:	d068      	beq.n	80a3bee <pow+0x15e>
 80a3b1c:	2300      	movs	r3, #0
 80a3b1e:	4c87      	ldr	r4, [pc, #540]	; (80a3d3c <pow+0x2ac>)
 80a3b20:	e9cd 3400 	strd	r3, r4, [sp]
 80a3b24:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3b28:	b00f      	add	sp, #60	; 0x3c
 80a3b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3b2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3b32:	f000 ffad 	bl	80a4a90 <finite>
 80a3b36:	4680      	mov	r8, r0
 80a3b38:	2800      	cmp	r0, #0
 80a3b3a:	d069      	beq.n	80a3c10 <pow+0x180>
 80a3b3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3b40:	f04f 0800 	mov.w	r8, #0
 80a3b44:	f04f 0900 	mov.w	r9, #0
 80a3b48:	4642      	mov	r2, r8
 80a3b4a:	464b      	mov	r3, r9
 80a3b4c:	f001 fcde 	bl	80a550c <__aeabi_dcmpeq>
 80a3b50:	2800      	cmp	r0, #0
 80a3b52:	d0e7      	beq.n	80a3b24 <pow+0x94>
 80a3b54:	4630      	mov	r0, r6
 80a3b56:	4639      	mov	r1, r7
 80a3b58:	f000 ff9a 	bl	80a4a90 <finite>
 80a3b5c:	2800      	cmp	r0, #0
 80a3b5e:	d0e1      	beq.n	80a3b24 <pow+0x94>
 80a3b60:	4620      	mov	r0, r4
 80a3b62:	4629      	mov	r1, r5
 80a3b64:	f000 ff94 	bl	80a4a90 <finite>
 80a3b68:	2800      	cmp	r0, #0
 80a3b6a:	d0db      	beq.n	80a3b24 <pow+0x94>
 80a3b6c:	2004      	movs	r0, #4
 80a3b6e:	2100      	movs	r1, #0
 80a3b70:	4b70      	ldr	r3, [pc, #448]	; (80a3d34 <pow+0x2a4>)
 80a3b72:	4a71      	ldr	r2, [pc, #452]	; (80a3d38 <pow+0x2a8>)
 80a3b74:	f993 3000 	ldrsb.w	r3, [r3]
 80a3b78:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a3b7c:	2b02      	cmp	r3, #2
 80a3b7e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a3b82:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a3b86:	9004      	str	r0, [sp, #16]
 80a3b88:	910c      	str	r1, [sp, #48]	; 0x30
 80a3b8a:	9205      	str	r2, [sp, #20]
 80a3b8c:	d172      	bne.n	80a3c74 <pow+0x1e4>
 80a3b8e:	e076      	b.n	80a3c7e <pow+0x1ee>
 80a3b90:	4620      	mov	r0, r4
 80a3b92:	4629      	mov	r1, r5
 80a3b94:	f000 ff7c 	bl	80a4a90 <finite>
 80a3b98:	2800      	cmp	r0, #0
 80a3b9a:	d0c3      	beq.n	80a3b24 <pow+0x94>
 80a3b9c:	4652      	mov	r2, sl
 80a3b9e:	465b      	mov	r3, fp
 80a3ba0:	4620      	mov	r0, r4
 80a3ba2:	4629      	mov	r1, r5
 80a3ba4:	f001 fcbc 	bl	80a5520 <__aeabi_dcmplt>
 80a3ba8:	2800      	cmp	r0, #0
 80a3baa:	d0bb      	beq.n	80a3b24 <pow+0x94>
 80a3bac:	2101      	movs	r1, #1
 80a3bae:	9a03      	ldr	r2, [sp, #12]
 80a3bb0:	4b60      	ldr	r3, [pc, #384]	; (80a3d34 <pow+0x2a4>)
 80a3bb2:	920c      	str	r2, [sp, #48]	; 0x30
 80a3bb4:	f993 3000 	ldrsb.w	r3, [r3]
 80a3bb8:	4a5f      	ldr	r2, [pc, #380]	; (80a3d38 <pow+0x2a8>)
 80a3bba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a3bbe:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a3bc2:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80a3bc6:	2b00      	cmp	r3, #0
 80a3bc8:	d17b      	bne.n	80a3cc2 <pow+0x232>
 80a3bca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80a3bce:	a804      	add	r0, sp, #16
 80a3bd0:	f000 ff64 	bl	80a4a9c <matherr>
 80a3bd4:	2800      	cmp	r0, #0
 80a3bd6:	d07b      	beq.n	80a3cd0 <pow+0x240>
 80a3bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a3bda:	b11b      	cbz	r3, 80a3be4 <pow+0x154>
 80a3bdc:	f7ff f86e 	bl	80a2cbc <__errno>
 80a3be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a3be2:	6003      	str	r3, [r0, #0]
 80a3be4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80a3be8:	e9cd 3400 	strd	r3, r4, [sp]
 80a3bec:	e79a      	b.n	80a3b24 <pow+0x94>
 80a3bee:	a804      	add	r0, sp, #16
 80a3bf0:	f000 ff54 	bl	80a4a9c <matherr>
 80a3bf4:	2800      	cmp	r0, #0
 80a3bf6:	d070      	beq.n	80a3cda <pow+0x24a>
 80a3bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a3bfa:	2b00      	cmp	r3, #0
 80a3bfc:	d0f2      	beq.n	80a3be4 <pow+0x154>
 80a3bfe:	f7ff f85d 	bl	80a2cbc <__errno>
 80a3c02:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80a3c06:	e9cd 3400 	strd	r3, r4, [sp]
 80a3c0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a3c0c:	6003      	str	r3, [r0, #0]
 80a3c0e:	e789      	b.n	80a3b24 <pow+0x94>
 80a3c10:	4630      	mov	r0, r6
 80a3c12:	4639      	mov	r1, r7
 80a3c14:	f000 ff3c 	bl	80a4a90 <finite>
 80a3c18:	2800      	cmp	r0, #0
 80a3c1a:	d08f      	beq.n	80a3b3c <pow+0xac>
 80a3c1c:	4620      	mov	r0, r4
 80a3c1e:	4629      	mov	r1, r5
 80a3c20:	f000 ff36 	bl	80a4a90 <finite>
 80a3c24:	2800      	cmp	r0, #0
 80a3c26:	d089      	beq.n	80a3b3c <pow+0xac>
 80a3c28:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3c2c:	4610      	mov	r0, r2
 80a3c2e:	4619      	mov	r1, r3
 80a3c30:	f001 fc9e 	bl	80a5570 <__aeabi_dcmpun>
 80a3c34:	2800      	cmp	r0, #0
 80a3c36:	f040 80a4 	bne.w	80a3d82 <pow+0x2f2>
 80a3c3a:	2203      	movs	r2, #3
 80a3c3c:	9204      	str	r2, [sp, #16]
 80a3c3e:	4a3d      	ldr	r2, [pc, #244]	; (80a3d34 <pow+0x2a4>)
 80a3c40:	4b3d      	ldr	r3, [pc, #244]	; (80a3d38 <pow+0x2a8>)
 80a3c42:	f992 8000 	ldrsb.w	r8, [r2]
 80a3c46:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a3c4a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a3c4e:	900c      	str	r0, [sp, #48]	; 0x30
 80a3c50:	9305      	str	r3, [sp, #20]
 80a3c52:	f1b8 0f00 	cmp.w	r8, #0
 80a3c56:	d145      	bne.n	80a3ce4 <pow+0x254>
 80a3c58:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
 80a3c5c:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80a3d50 <pow+0x2c0>
 80a3c60:	4652      	mov	r2, sl
 80a3c62:	465b      	mov	r3, fp
 80a3c64:	4630      	mov	r0, r6
 80a3c66:	4639      	mov	r1, r7
 80a3c68:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a3c6c:	f001 fc58 	bl	80a5520 <__aeabi_dcmplt>
 80a3c70:	2800      	cmp	r0, #0
 80a3c72:	d146      	bne.n	80a3d02 <pow+0x272>
 80a3c74:	a804      	add	r0, sp, #16
 80a3c76:	f000 ff11 	bl	80a4a9c <matherr>
 80a3c7a:	2800      	cmp	r0, #0
 80a3c7c:	d1ac      	bne.n	80a3bd8 <pow+0x148>
 80a3c7e:	f7ff f81d 	bl	80a2cbc <__errno>
 80a3c82:	2322      	movs	r3, #34	; 0x22
 80a3c84:	6003      	str	r3, [r0, #0]
 80a3c86:	e7a7      	b.n	80a3bd8 <pow+0x148>
 80a3c88:	2200      	movs	r2, #0
 80a3c8a:	2300      	movs	r3, #0
 80a3c8c:	4620      	mov	r0, r4
 80a3c8e:	4629      	mov	r1, r5
 80a3c90:	f001 fc3c 	bl	80a550c <__aeabi_dcmpeq>
 80a3c94:	2800      	cmp	r0, #0
 80a3c96:	f43f af45 	beq.w	80a3b24 <pow+0x94>
 80a3c9a:	2201      	movs	r2, #1
 80a3c9c:	2000      	movs	r0, #0
 80a3c9e:	4927      	ldr	r1, [pc, #156]	; (80a3d3c <pow+0x2ac>)
 80a3ca0:	4b25      	ldr	r3, [pc, #148]	; (80a3d38 <pow+0x2a8>)
 80a3ca2:	f1b9 0f02 	cmp.w	r9, #2
 80a3ca6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a3caa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a3cae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a3cb2:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80a3cb6:	9204      	str	r2, [sp, #16]
 80a3cb8:	9305      	str	r3, [sp, #20]
 80a3cba:	d198      	bne.n	80a3bee <pow+0x15e>
 80a3cbc:	e9cd 0100 	strd	r0, r1, [sp]
 80a3cc0:	e730      	b.n	80a3b24 <pow+0x94>
 80a3cc2:	2000      	movs	r0, #0
 80a3cc4:	491e      	ldr	r1, [pc, #120]	; (80a3d40 <pow+0x2b0>)
 80a3cc6:	2b02      	cmp	r3, #2
 80a3cc8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a3ccc:	f47f af7f 	bne.w	80a3bce <pow+0x13e>
 80a3cd0:	f7fe fff4 	bl	80a2cbc <__errno>
 80a3cd4:	2321      	movs	r3, #33	; 0x21
 80a3cd6:	6003      	str	r3, [r0, #0]
 80a3cd8:	e77e      	b.n	80a3bd8 <pow+0x148>
 80a3cda:	f7fe ffef 	bl	80a2cbc <__errno>
 80a3cde:	2321      	movs	r3, #33	; 0x21
 80a3ce0:	6003      	str	r3, [r0, #0]
 80a3ce2:	e789      	b.n	80a3bf8 <pow+0x168>
 80a3ce4:	4630      	mov	r0, r6
 80a3ce6:	2600      	movs	r6, #0
 80a3ce8:	4639      	mov	r1, r7
 80a3cea:	4f16      	ldr	r7, [pc, #88]	; (80a3d44 <pow+0x2b4>)
 80a3cec:	4652      	mov	r2, sl
 80a3cee:	465b      	mov	r3, fp
 80a3cf0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80a3cf4:	f001 fc14 	bl	80a5520 <__aeabi_dcmplt>
 80a3cf8:	bb60      	cbnz	r0, 80a3d54 <pow+0x2c4>
 80a3cfa:	f1b8 0f02 	cmp.w	r8, #2
 80a3cfe:	d0be      	beq.n	80a3c7e <pow+0x1ee>
 80a3d00:	e7b8      	b.n	80a3c74 <pow+0x1e4>
 80a3d02:	2200      	movs	r2, #0
 80a3d04:	4b10      	ldr	r3, [pc, #64]	; (80a3d48 <pow+0x2b8>)
 80a3d06:	4620      	mov	r0, r4
 80a3d08:	4629      	mov	r1, r5
 80a3d0a:	f001 f997 	bl	80a503c <__aeabi_dmul>
 80a3d0e:	4604      	mov	r4, r0
 80a3d10:	460d      	mov	r5, r1
 80a3d12:	f000 fecb 	bl	80a4aac <rint>
 80a3d16:	4622      	mov	r2, r4
 80a3d18:	462b      	mov	r3, r5
 80a3d1a:	f001 fbf7 	bl	80a550c <__aeabi_dcmpeq>
 80a3d1e:	bb60      	cbnz	r0, 80a3d7a <pow+0x2ea>
 80a3d20:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3d24:	4b09      	ldr	r3, [pc, #36]	; (80a3d4c <pow+0x2bc>)
 80a3d26:	4903      	ldr	r1, [pc, #12]	; (80a3d34 <pow+0x2a4>)
 80a3d28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a3d2c:	f991 8000 	ldrsb.w	r8, [r1]
 80a3d30:	e7e3      	b.n	80a3cfa <pow+0x26a>
 80a3d32:	bf00      	nop
 80a3d34:	20000004 	.word	0x20000004
 80a3d38:	080a6eec 	.word	0x080a6eec
 80a3d3c:	3ff00000 	.word	0x3ff00000
 80a3d40:	fff00000 	.word	0xfff00000
 80a3d44:	7ff00000 	.word	0x7ff00000
 80a3d48:	3fe00000 	.word	0x3fe00000
 80a3d4c:	c7efffff 	.word	0xc7efffff
 80a3d50:	47efffff 	.word	0x47efffff
 80a3d54:	2200      	movs	r2, #0
 80a3d56:	4b19      	ldr	r3, [pc, #100]	; (80a3dbc <pow+0x32c>)
 80a3d58:	4620      	mov	r0, r4
 80a3d5a:	4629      	mov	r1, r5
 80a3d5c:	f001 f96e 	bl	80a503c <__aeabi_dmul>
 80a3d60:	4604      	mov	r4, r0
 80a3d62:	460d      	mov	r5, r1
 80a3d64:	f000 fea2 	bl	80a4aac <rint>
 80a3d68:	4622      	mov	r2, r4
 80a3d6a:	462b      	mov	r3, r5
 80a3d6c:	f001 fbce 	bl	80a550c <__aeabi_dcmpeq>
 80a3d70:	b918      	cbnz	r0, 80a3d7a <pow+0x2ea>
 80a3d72:	2200      	movs	r2, #0
 80a3d74:	4b12      	ldr	r3, [pc, #72]	; (80a3dc0 <pow+0x330>)
 80a3d76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a3d7a:	4b12      	ldr	r3, [pc, #72]	; (80a3dc4 <pow+0x334>)
 80a3d7c:	f993 8000 	ldrsb.w	r8, [r3]
 80a3d80:	e7bb      	b.n	80a3cfa <pow+0x26a>
 80a3d82:	2201      	movs	r2, #1
 80a3d84:	4b0f      	ldr	r3, [pc, #60]	; (80a3dc4 <pow+0x334>)
 80a3d86:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a3d8a:	f993 9000 	ldrsb.w	r9, [r3]
 80a3d8e:	4b0e      	ldr	r3, [pc, #56]	; (80a3dc8 <pow+0x338>)
 80a3d90:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a3d94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a3d98:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80a3d9c:	f1b9 0f00 	cmp.w	r9, #0
 80a3da0:	f43f af13 	beq.w	80a3bca <pow+0x13a>
 80a3da4:	4652      	mov	r2, sl
 80a3da6:	465b      	mov	r3, fp
 80a3da8:	4650      	mov	r0, sl
 80a3daa:	4659      	mov	r1, fp
 80a3dac:	f001 fa70 	bl	80a5290 <__aeabi_ddiv>
 80a3db0:	f1b9 0f02 	cmp.w	r9, #2
 80a3db4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a3db8:	d08a      	beq.n	80a3cd0 <pow+0x240>
 80a3dba:	e708      	b.n	80a3bce <pow+0x13e>
 80a3dbc:	3fe00000 	.word	0x3fe00000
 80a3dc0:	fff00000 	.word	0xfff00000
 80a3dc4:	20000004 	.word	0x20000004
 80a3dc8:	080a6eec 	.word	0x080a6eec
 80a3dcc:	00000000 	.word	0x00000000

080a3dd0 <__ieee754_pow>:
 80a3dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3dd4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80a3dd8:	461f      	mov	r7, r3
 80a3dda:	4698      	mov	r8, r3
 80a3ddc:	ea55 0302 	orrs.w	r3, r5, r2
 80a3de0:	b095      	sub	sp, #84	; 0x54
 80a3de2:	d037      	beq.n	80a3e54 <__ieee754_pow+0x84>
 80a3de4:	468b      	mov	fp, r1
 80a3de6:	4689      	mov	r9, r1
 80a3de8:	496f      	ldr	r1, [pc, #444]	; (80a3fa8 <__ieee754_pow+0x1d8>)
 80a3dea:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 80a3dee:	428c      	cmp	r4, r1
 80a3df0:	4682      	mov	sl, r0
 80a3df2:	4603      	mov	r3, r0
 80a3df4:	dc28      	bgt.n	80a3e48 <__ieee754_pow+0x78>
 80a3df6:	4616      	mov	r6, r2
 80a3df8:	d035      	beq.n	80a3e66 <__ieee754_pow+0x96>
 80a3dfa:	428d      	cmp	r5, r1
 80a3dfc:	dc24      	bgt.n	80a3e48 <__ieee754_pow+0x78>
 80a3dfe:	496a      	ldr	r1, [pc, #424]	; (80a3fa8 <__ieee754_pow+0x1d8>)
 80a3e00:	428d      	cmp	r5, r1
 80a3e02:	d01f      	beq.n	80a3e44 <__ieee754_pow+0x74>
 80a3e04:	f1b9 0f00 	cmp.w	r9, #0
 80a3e08:	db36      	blt.n	80a3e78 <__ieee754_pow+0xa8>
 80a3e0a:	2100      	movs	r1, #0
 80a3e0c:	9102      	str	r1, [sp, #8]
 80a3e0e:	2a00      	cmp	r2, #0
 80a3e10:	d14d      	bne.n	80a3eae <__ieee754_pow+0xde>
 80a3e12:	4a65      	ldr	r2, [pc, #404]	; (80a3fa8 <__ieee754_pow+0x1d8>)
 80a3e14:	4295      	cmp	r5, r2
 80a3e16:	f000 809d 	beq.w	80a3f54 <__ieee754_pow+0x184>
 80a3e1a:	4a64      	ldr	r2, [pc, #400]	; (80a3fac <__ieee754_pow+0x1dc>)
 80a3e1c:	4295      	cmp	r5, r2
 80a3e1e:	f000 80ab 	beq.w	80a3f78 <__ieee754_pow+0x1a8>
 80a3e22:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
 80a3e26:	f000 84d4 	beq.w	80a47d2 <__ieee754_pow+0xa02>
 80a3e2a:	4a61      	ldr	r2, [pc, #388]	; (80a3fb0 <__ieee754_pow+0x1e0>)
 80a3e2c:	4590      	cmp	r8, r2
 80a3e2e:	d13e      	bne.n	80a3eae <__ieee754_pow+0xde>
 80a3e30:	f1b9 0f00 	cmp.w	r9, #0
 80a3e34:	db3b      	blt.n	80a3eae <__ieee754_pow+0xde>
 80a3e36:	4650      	mov	r0, sl
 80a3e38:	4659      	mov	r1, fp
 80a3e3a:	b015      	add	sp, #84	; 0x54
 80a3e3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3e40:	f000 bd5e 	b.w	80a4900 <__ieee754_sqrt>
 80a3e44:	2a00      	cmp	r2, #0
 80a3e46:	d0dd      	beq.n	80a3e04 <__ieee754_pow+0x34>
 80a3e48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a3e4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a3e50:	4323      	orrs	r3, r4
 80a3e52:	d10b      	bne.n	80a3e6c <__ieee754_pow+0x9c>
 80a3e54:	2300      	movs	r3, #0
 80a3e56:	4c55      	ldr	r4, [pc, #340]	; (80a3fac <__ieee754_pow+0x1dc>)
 80a3e58:	e9cd 3400 	strd	r3, r4, [sp]
 80a3e5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3e60:	b015      	add	sp, #84	; 0x54
 80a3e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3e66:	b908      	cbnz	r0, 80a3e6c <__ieee754_pow+0x9c>
 80a3e68:	42a5      	cmp	r5, r4
 80a3e6a:	ddc8      	ble.n	80a3dfe <__ieee754_pow+0x2e>
 80a3e6c:	4851      	ldr	r0, [pc, #324]	; (80a3fb4 <__ieee754_pow+0x1e4>)
 80a3e6e:	b015      	add	sp, #84	; 0x54
 80a3e70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3e74:	f000 be14 	b.w	80a4aa0 <nan>
 80a3e78:	494f      	ldr	r1, [pc, #316]	; (80a3fb8 <__ieee754_pow+0x1e8>)
 80a3e7a:	428d      	cmp	r5, r1
 80a3e7c:	f300 8085 	bgt.w	80a3f8a <__ieee754_pow+0x1ba>
 80a3e80:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80a3e84:	428d      	cmp	r5, r1
 80a3e86:	dd0e      	ble.n	80a3ea6 <__ieee754_pow+0xd6>
 80a3e88:	1529      	asrs	r1, r5, #20
 80a3e8a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80a3e8e:	2914      	cmp	r1, #20
 80a3e90:	f340 84a9 	ble.w	80a47e6 <__ieee754_pow+0xa16>
 80a3e94:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80a3e98:	fa22 f001 	lsr.w	r0, r2, r1
 80a3e9c:	fa00 f101 	lsl.w	r1, r0, r1
 80a3ea0:	4291      	cmp	r1, r2
 80a3ea2:	f000 84f6 	beq.w	80a4892 <__ieee754_pow+0xac2>
 80a3ea6:	2100      	movs	r1, #0
 80a3ea8:	9102      	str	r1, [sp, #8]
 80a3eaa:	2a00      	cmp	r2, #0
 80a3eac:	d0b5      	beq.n	80a3e1a <__ieee754_pow+0x4a>
 80a3eae:	4650      	mov	r0, sl
 80a3eb0:	4659      	mov	r1, fp
 80a3eb2:	930c      	str	r3, [sp, #48]	; 0x30
 80a3eb4:	f000 fde8 	bl	80a4a88 <fabs>
 80a3eb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a3eba:	e9cd 0100 	strd	r0, r1, [sp]
 80a3ebe:	bb43      	cbnz	r3, 80a3f12 <__ieee754_pow+0x142>
 80a3ec0:	b124      	cbz	r4, 80a3ecc <__ieee754_pow+0xfc>
 80a3ec2:	4b3a      	ldr	r3, [pc, #232]	; (80a3fac <__ieee754_pow+0x1dc>)
 80a3ec4:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80a3ec8:	429a      	cmp	r2, r3
 80a3eca:	d122      	bne.n	80a3f12 <__ieee754_pow+0x142>
 80a3ecc:	f1b8 0f00 	cmp.w	r8, #0
 80a3ed0:	da07      	bge.n	80a3ee2 <__ieee754_pow+0x112>
 80a3ed2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3ed6:	2000      	movs	r0, #0
 80a3ed8:	4934      	ldr	r1, [pc, #208]	; (80a3fac <__ieee754_pow+0x1dc>)
 80a3eda:	f001 f9d9 	bl	80a5290 <__aeabi_ddiv>
 80a3ede:	e9cd 0100 	strd	r0, r1, [sp]
 80a3ee2:	f1b9 0f00 	cmp.w	r9, #0
 80a3ee6:	dab9      	bge.n	80a3e5c <__ieee754_pow+0x8c>
 80a3ee8:	9b02      	ldr	r3, [sp, #8]
 80a3eea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a3eee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a3ef2:	4323      	orrs	r3, r4
 80a3ef4:	f040 849c 	bne.w	80a4830 <__ieee754_pow+0xa60>
 80a3ef8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3efc:	4610      	mov	r0, r2
 80a3efe:	4619      	mov	r1, r3
 80a3f00:	f000 fee4 	bl	80a4ccc <__aeabi_dsub>
 80a3f04:	4602      	mov	r2, r0
 80a3f06:	460b      	mov	r3, r1
 80a3f08:	f001 f9c2 	bl	80a5290 <__aeabi_ddiv>
 80a3f0c:	e9cd 0100 	strd	r0, r1, [sp]
 80a3f10:	e7a4      	b.n	80a3e5c <__ieee754_pow+0x8c>
 80a3f12:	9a02      	ldr	r2, [sp, #8]
 80a3f14:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80a3f18:	3b01      	subs	r3, #1
 80a3f1a:	930c      	str	r3, [sp, #48]	; 0x30
 80a3f1c:	4313      	orrs	r3, r2
 80a3f1e:	d037      	beq.n	80a3f90 <__ieee754_pow+0x1c0>
 80a3f20:	4b26      	ldr	r3, [pc, #152]	; (80a3fbc <__ieee754_pow+0x1ec>)
 80a3f22:	429d      	cmp	r5, r3
 80a3f24:	dd4e      	ble.n	80a3fc4 <__ieee754_pow+0x1f4>
 80a3f26:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a3f2a:	429d      	cmp	r5, r3
 80a3f2c:	4b24      	ldr	r3, [pc, #144]	; (80a3fc0 <__ieee754_pow+0x1f0>)
 80a3f2e:	f340 83df 	ble.w	80a46f0 <__ieee754_pow+0x920>
 80a3f32:	429c      	cmp	r4, r3
 80a3f34:	f340 835e 	ble.w	80a45f4 <__ieee754_pow+0x824>
 80a3f38:	f1b8 0f00 	cmp.w	r8, #0
 80a3f3c:	f340 835e 	ble.w	80a45fc <__ieee754_pow+0x82c>
 80a3f40:	a317      	add	r3, pc, #92	; (adr r3, 80a3fa0 <__ieee754_pow+0x1d0>)
 80a3f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f46:	4610      	mov	r0, r2
 80a3f48:	4619      	mov	r1, r3
 80a3f4a:	f001 f877 	bl	80a503c <__aeabi_dmul>
 80a3f4e:	e9cd 0100 	strd	r0, r1, [sp]
 80a3f52:	e783      	b.n	80a3e5c <__ieee754_pow+0x8c>
 80a3f54:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
 80a3f58:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80a3f5c:	4313      	orrs	r3, r2
 80a3f5e:	f43f af79 	beq.w	80a3e54 <__ieee754_pow+0x84>
 80a3f62:	4b17      	ldr	r3, [pc, #92]	; (80a3fc0 <__ieee754_pow+0x1f0>)
 80a3f64:	429c      	cmp	r4, r3
 80a3f66:	f340 8373 	ble.w	80a4650 <__ieee754_pow+0x880>
 80a3f6a:	f1b8 0f00 	cmp.w	r8, #0
 80a3f6e:	f2c0 8345 	blt.w	80a45fc <__ieee754_pow+0x82c>
 80a3f72:	e9cd 6700 	strd	r6, r7, [sp]
 80a3f76:	e771      	b.n	80a3e5c <__ieee754_pow+0x8c>
 80a3f78:	f1b8 0f00 	cmp.w	r8, #0
 80a3f7c:	f2c0 841f 	blt.w	80a47be <__ieee754_pow+0x9ee>
 80a3f80:	4650      	mov	r0, sl
 80a3f82:	4659      	mov	r1, fp
 80a3f84:	e9cd 0100 	strd	r0, r1, [sp]
 80a3f88:	e768      	b.n	80a3e5c <__ieee754_pow+0x8c>
 80a3f8a:	2102      	movs	r1, #2
 80a3f8c:	9102      	str	r1, [sp, #8]
 80a3f8e:	e73e      	b.n	80a3e0e <__ieee754_pow+0x3e>
 80a3f90:	4652      	mov	r2, sl
 80a3f92:	4650      	mov	r0, sl
 80a3f94:	465b      	mov	r3, fp
 80a3f96:	4659      	mov	r1, fp
 80a3f98:	e7b2      	b.n	80a3f00 <__ieee754_pow+0x130>
 80a3f9a:	bf00      	nop
 80a3f9c:	f3af 8000 	nop.w
 80a3fa0:	8800759c 	.word	0x8800759c
 80a3fa4:	7e37e43c 	.word	0x7e37e43c
 80a3fa8:	7ff00000 	.word	0x7ff00000
 80a3fac:	3ff00000 	.word	0x3ff00000
 80a3fb0:	3fe00000 	.word	0x3fe00000
 80a3fb4:	080a6ef0 	.word	0x080a6ef0
 80a3fb8:	433fffff 	.word	0x433fffff
 80a3fbc:	41e00000 	.word	0x41e00000
 80a3fc0:	3fefffff 	.word	0x3fefffff
 80a3fc4:	4bd0      	ldr	r3, [pc, #832]	; (80a4308 <__ieee754_pow+0x538>)
 80a3fc6:	ea09 0303 	and.w	r3, r9, r3
 80a3fca:	2b00      	cmp	r3, #0
 80a3fcc:	f040 8356 	bne.w	80a467c <__ieee754_pow+0x8ac>
 80a3fd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3fd4:	2200      	movs	r2, #0
 80a3fd6:	4bcd      	ldr	r3, [pc, #820]	; (80a430c <__ieee754_pow+0x53c>)
 80a3fd8:	f001 f830 	bl	80a503c <__aeabi_dmul>
 80a3fdc:	f06f 0c34 	mvn.w	ip, #52	; 0x34
 80a3fe0:	460c      	mov	r4, r1
 80a3fe2:	e9cd 0100 	strd	r0, r1, [sp]
 80a3fe6:	1523      	asrs	r3, r4, #20
 80a3fe8:	4ac9      	ldr	r2, [pc, #804]	; (80a4310 <__ieee754_pow+0x540>)
 80a3fea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80a3fee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3ff2:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80a3ff6:	eb03 010c 	add.w	r1, r3, ip
 80a3ffa:	4294      	cmp	r4, r2
 80a3ffc:	910d      	str	r1, [sp, #52]	; 0x34
 80a3ffe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80a4002:	f340 832e 	ble.w	80a4662 <__ieee754_pow+0x892>
 80a4006:	4bc3      	ldr	r3, [pc, #780]	; (80a4314 <__ieee754_pow+0x544>)
 80a4008:	429c      	cmp	r4, r3
 80a400a:	f340 841e 	ble.w	80a484a <__ieee754_pow+0xa7a>
 80a400e:	2300      	movs	r3, #0
 80a4010:	2400      	movs	r4, #0
 80a4012:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a4016:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a401a:	2300      	movs	r3, #0
 80a401c:	f04f 0a00 	mov.w	sl, #0
 80a4020:	4cbd      	ldr	r4, [pc, #756]	; (80a4318 <__ieee754_pow+0x548>)
 80a4022:	3101      	adds	r1, #1
 80a4024:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a4028:	910d      	str	r1, [sp, #52]	; 0x34
 80a402a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80a402e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4032:	4629      	mov	r1, r5
 80a4034:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a4038:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a403c:	f000 fe46 	bl	80a4ccc <__aeabi_dsub>
 80a4040:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a4044:	4680      	mov	r8, r0
 80a4046:	4689      	mov	r9, r1
 80a4048:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a404c:	f000 fe40 	bl	80a4cd0 <__adddf3>
 80a4050:	4602      	mov	r2, r0
 80a4052:	460b      	mov	r3, r1
 80a4054:	2000      	movs	r0, #0
 80a4056:	49b0      	ldr	r1, [pc, #704]	; (80a4318 <__ieee754_pow+0x548>)
 80a4058:	f001 f91a 	bl	80a5290 <__aeabi_ddiv>
 80a405c:	4603      	mov	r3, r0
 80a405e:	460c      	mov	r4, r1
 80a4060:	461a      	mov	r2, r3
 80a4062:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 80a4066:	4640      	mov	r0, r8
 80a4068:	4623      	mov	r3, r4
 80a406a:	4649      	mov	r1, r9
 80a406c:	f000 ffe6 	bl	80a503c <__aeabi_dmul>
 80a4070:	460c      	mov	r4, r1
 80a4072:	4603      	mov	r3, r0
 80a4074:	4601      	mov	r1, r0
 80a4076:	4622      	mov	r2, r4
 80a4078:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a407c:	2400      	movs	r4, #0
 80a407e:	2000      	movs	r0, #0
 80a4080:	106b      	asrs	r3, r5, #1
 80a4082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a4086:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a408a:	e9cd 1200 	strd	r1, r2, [sp]
 80a408e:	eb03 010a 	add.w	r1, r3, sl
 80a4092:	9400      	str	r4, [sp, #0]
 80a4094:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a4098:	4604      	mov	r4, r0
 80a409a:	460d      	mov	r5, r1
 80a409c:	4602      	mov	r2, r0
 80a409e:	460b      	mov	r3, r1
 80a40a0:	4650      	mov	r0, sl
 80a40a2:	4659      	mov	r1, fp
 80a40a4:	f000 ffca 	bl	80a503c <__aeabi_dmul>
 80a40a8:	4602      	mov	r2, r0
 80a40aa:	460b      	mov	r3, r1
 80a40ac:	4640      	mov	r0, r8
 80a40ae:	4649      	mov	r1, r9
 80a40b0:	f000 fe0c 	bl	80a4ccc <__aeabi_dsub>
 80a40b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a40b8:	4680      	mov	r8, r0
 80a40ba:	4689      	mov	r9, r1
 80a40bc:	4620      	mov	r0, r4
 80a40be:	4629      	mov	r1, r5
 80a40c0:	f000 fe04 	bl	80a4ccc <__aeabi_dsub>
 80a40c4:	4602      	mov	r2, r0
 80a40c6:	460b      	mov	r3, r1
 80a40c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a40cc:	f000 fdfe 	bl	80a4ccc <__aeabi_dsub>
 80a40d0:	4652      	mov	r2, sl
 80a40d2:	465b      	mov	r3, fp
 80a40d4:	f000 ffb2 	bl	80a503c <__aeabi_dmul>
 80a40d8:	4602      	mov	r2, r0
 80a40da:	460b      	mov	r3, r1
 80a40dc:	4640      	mov	r0, r8
 80a40de:	4649      	mov	r1, r9
 80a40e0:	f000 fdf4 	bl	80a4ccc <__aeabi_dsub>
 80a40e4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a40e8:	f000 ffa8 	bl	80a503c <__aeabi_dmul>
 80a40ec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80a40f0:	4604      	mov	r4, r0
 80a40f2:	460d      	mov	r5, r1
 80a40f4:	4642      	mov	r2, r8
 80a40f6:	464b      	mov	r3, r9
 80a40f8:	4640      	mov	r0, r8
 80a40fa:	4649      	mov	r1, r9
 80a40fc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a4100:	f000 ff9c 	bl	80a503c <__aeabi_dmul>
 80a4104:	a36e      	add	r3, pc, #440	; (adr r3, 80a42c0 <__ieee754_pow+0x4f0>)
 80a4106:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a410a:	4604      	mov	r4, r0
 80a410c:	460d      	mov	r5, r1
 80a410e:	f000 ff95 	bl	80a503c <__aeabi_dmul>
 80a4112:	a36d      	add	r3, pc, #436	; (adr r3, 80a42c8 <__ieee754_pow+0x4f8>)
 80a4114:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4118:	f000 fdda 	bl	80a4cd0 <__adddf3>
 80a411c:	4622      	mov	r2, r4
 80a411e:	462b      	mov	r3, r5
 80a4120:	f000 ff8c 	bl	80a503c <__aeabi_dmul>
 80a4124:	a36a      	add	r3, pc, #424	; (adr r3, 80a42d0 <__ieee754_pow+0x500>)
 80a4126:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a412a:	f000 fdd1 	bl	80a4cd0 <__adddf3>
 80a412e:	4622      	mov	r2, r4
 80a4130:	462b      	mov	r3, r5
 80a4132:	f000 ff83 	bl	80a503c <__aeabi_dmul>
 80a4136:	a368      	add	r3, pc, #416	; (adr r3, 80a42d8 <__ieee754_pow+0x508>)
 80a4138:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a413c:	f000 fdc8 	bl	80a4cd0 <__adddf3>
 80a4140:	4622      	mov	r2, r4
 80a4142:	462b      	mov	r3, r5
 80a4144:	f000 ff7a 	bl	80a503c <__aeabi_dmul>
 80a4148:	a365      	add	r3, pc, #404	; (adr r3, 80a42e0 <__ieee754_pow+0x510>)
 80a414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a414e:	f000 fdbf 	bl	80a4cd0 <__adddf3>
 80a4152:	4622      	mov	r2, r4
 80a4154:	462b      	mov	r3, r5
 80a4156:	f000 ff71 	bl	80a503c <__aeabi_dmul>
 80a415a:	a363      	add	r3, pc, #396	; (adr r3, 80a42e8 <__ieee754_pow+0x518>)
 80a415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4160:	f000 fdb6 	bl	80a4cd0 <__adddf3>
 80a4164:	4622      	mov	r2, r4
 80a4166:	462b      	mov	r3, r5
 80a4168:	4604      	mov	r4, r0
 80a416a:	460d      	mov	r5, r1
 80a416c:	4610      	mov	r0, r2
 80a416e:	4619      	mov	r1, r3
 80a4170:	f000 ff64 	bl	80a503c <__aeabi_dmul>
 80a4174:	4602      	mov	r2, r0
 80a4176:	460b      	mov	r3, r1
 80a4178:	4620      	mov	r0, r4
 80a417a:	4629      	mov	r1, r5
 80a417c:	f000 ff5e 	bl	80a503c <__aeabi_dmul>
 80a4180:	4604      	mov	r4, r0
 80a4182:	460d      	mov	r5, r1
 80a4184:	4652      	mov	r2, sl
 80a4186:	465b      	mov	r3, fp
 80a4188:	4640      	mov	r0, r8
 80a418a:	4649      	mov	r1, r9
 80a418c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a4190:	f000 fd9e 	bl	80a4cd0 <__adddf3>
 80a4194:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a4198:	f000 ff50 	bl	80a503c <__aeabi_dmul>
 80a419c:	4622      	mov	r2, r4
 80a419e:	462b      	mov	r3, r5
 80a41a0:	f000 fd96 	bl	80a4cd0 <__adddf3>
 80a41a4:	4652      	mov	r2, sl
 80a41a6:	4604      	mov	r4, r0
 80a41a8:	460d      	mov	r5, r1
 80a41aa:	465b      	mov	r3, fp
 80a41ac:	4650      	mov	r0, sl
 80a41ae:	4659      	mov	r1, fp
 80a41b0:	f000 ff44 	bl	80a503c <__aeabi_dmul>
 80a41b4:	46a0      	mov	r8, r4
 80a41b6:	46a9      	mov	r9, r5
 80a41b8:	4604      	mov	r4, r0
 80a41ba:	460d      	mov	r5, r1
 80a41bc:	2200      	movs	r2, #0
 80a41be:	4b57      	ldr	r3, [pc, #348]	; (80a431c <__ieee754_pow+0x54c>)
 80a41c0:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80a41c4:	f000 fd84 	bl	80a4cd0 <__adddf3>
 80a41c8:	4642      	mov	r2, r8
 80a41ca:	464b      	mov	r3, r9
 80a41cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80a41d0:	f000 fd7e 	bl	80a4cd0 <__adddf3>
 80a41d4:	460d      	mov	r5, r1
 80a41d6:	9c00      	ldr	r4, [sp, #0]
 80a41d8:	462b      	mov	r3, r5
 80a41da:	4622      	mov	r2, r4
 80a41dc:	4650      	mov	r0, sl
 80a41de:	4659      	mov	r1, fp
 80a41e0:	f000 ff2c 	bl	80a503c <__aeabi_dmul>
 80a41e4:	4680      	mov	r8, r0
 80a41e6:	4689      	mov	r9, r1
 80a41e8:	2200      	movs	r2, #0
 80a41ea:	4620      	mov	r0, r4
 80a41ec:	4629      	mov	r1, r5
 80a41ee:	4b4b      	ldr	r3, [pc, #300]	; (80a431c <__ieee754_pow+0x54c>)
 80a41f0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a41f4:	f000 fd6a 	bl	80a4ccc <__aeabi_dsub>
 80a41f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80a41fc:	f000 fd66 	bl	80a4ccc <__aeabi_dsub>
 80a4200:	4602      	mov	r2, r0
 80a4202:	460b      	mov	r3, r1
 80a4204:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80a4208:	f000 fd60 	bl	80a4ccc <__aeabi_dsub>
 80a420c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a4210:	f000 ff14 	bl	80a503c <__aeabi_dmul>
 80a4214:	4622      	mov	r2, r4
 80a4216:	4680      	mov	r8, r0
 80a4218:	4689      	mov	r9, r1
 80a421a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a421e:	462b      	mov	r3, r5
 80a4220:	f000 ff0c 	bl	80a503c <__aeabi_dmul>
 80a4224:	4602      	mov	r2, r0
 80a4226:	460b      	mov	r3, r1
 80a4228:	4640      	mov	r0, r8
 80a422a:	4649      	mov	r1, r9
 80a422c:	f000 fd50 	bl	80a4cd0 <__adddf3>
 80a4230:	4682      	mov	sl, r0
 80a4232:	468b      	mov	fp, r1
 80a4234:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a4238:	4652      	mov	r2, sl
 80a423a:	465b      	mov	r3, fp
 80a423c:	f000 fd48 	bl	80a4cd0 <__adddf3>
 80a4240:	a32b      	add	r3, pc, #172	; (adr r3, 80a42f0 <__ieee754_pow+0x520>)
 80a4242:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4246:	9c00      	ldr	r4, [sp, #0]
 80a4248:	460d      	mov	r5, r1
 80a424a:	4620      	mov	r0, r4
 80a424c:	f000 fef6 	bl	80a503c <__aeabi_dmul>
 80a4250:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a4254:	4680      	mov	r8, r0
 80a4256:	4689      	mov	r9, r1
 80a4258:	4620      	mov	r0, r4
 80a425a:	4629      	mov	r1, r5
 80a425c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a4260:	f000 fd34 	bl	80a4ccc <__aeabi_dsub>
 80a4264:	4602      	mov	r2, r0
 80a4266:	460b      	mov	r3, r1
 80a4268:	4650      	mov	r0, sl
 80a426a:	4659      	mov	r1, fp
 80a426c:	f000 fd2e 	bl	80a4ccc <__aeabi_dsub>
 80a4270:	a321      	add	r3, pc, #132	; (adr r3, 80a42f8 <__ieee754_pow+0x528>)
 80a4272:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4276:	f000 fee1 	bl	80a503c <__aeabi_dmul>
 80a427a:	a321      	add	r3, pc, #132	; (adr r3, 80a4300 <__ieee754_pow+0x530>)
 80a427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4280:	4680      	mov	r8, r0
 80a4282:	4689      	mov	r9, r1
 80a4284:	4620      	mov	r0, r4
 80a4286:	4629      	mov	r1, r5
 80a4288:	f000 fed8 	bl	80a503c <__aeabi_dmul>
 80a428c:	4602      	mov	r2, r0
 80a428e:	460b      	mov	r3, r1
 80a4290:	4640      	mov	r0, r8
 80a4292:	4649      	mov	r1, r9
 80a4294:	f000 fd1c 	bl	80a4cd0 <__adddf3>
 80a4298:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80a429c:	f000 fd18 	bl	80a4cd0 <__adddf3>
 80a42a0:	4682      	mov	sl, r0
 80a42a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a42a4:	468b      	mov	fp, r1
 80a42a6:	f000 fe5f 	bl	80a4f68 <__aeabi_i2d>
 80a42aa:	4680      	mov	r8, r0
 80a42ac:	4689      	mov	r9, r1
 80a42ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a42b2:	4652      	mov	r2, sl
 80a42b4:	465b      	mov	r3, fp
 80a42b6:	f000 fd0b 	bl	80a4cd0 <__adddf3>
 80a42ba:	e031      	b.n	80a4320 <__ieee754_pow+0x550>
 80a42bc:	f3af 8000 	nop.w
 80a42c0:	4a454eef 	.word	0x4a454eef
 80a42c4:	3fca7e28 	.word	0x3fca7e28
 80a42c8:	93c9db65 	.word	0x93c9db65
 80a42cc:	3fcd864a 	.word	0x3fcd864a
 80a42d0:	a91d4101 	.word	0xa91d4101
 80a42d4:	3fd17460 	.word	0x3fd17460
 80a42d8:	518f264d 	.word	0x518f264d
 80a42dc:	3fd55555 	.word	0x3fd55555
 80a42e0:	db6fabff 	.word	0xdb6fabff
 80a42e4:	3fdb6db6 	.word	0x3fdb6db6
 80a42e8:	33333303 	.word	0x33333303
 80a42ec:	3fe33333 	.word	0x3fe33333
 80a42f0:	e0000000 	.word	0xe0000000
 80a42f4:	3feec709 	.word	0x3feec709
 80a42f8:	dc3a03fd 	.word	0xdc3a03fd
 80a42fc:	3feec709 	.word	0x3feec709
 80a4300:	145b01f5 	.word	0x145b01f5
 80a4304:	be3e2fe0 	.word	0xbe3e2fe0
 80a4308:	7ff00000 	.word	0x7ff00000
 80a430c:	43400000 	.word	0x43400000
 80a4310:	0003988e 	.word	0x0003988e
 80a4314:	000bb679 	.word	0x000bb679
 80a4318:	3ff00000 	.word	0x3ff00000
 80a431c:	40080000 	.word	0x40080000
 80a4320:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a4324:	f000 fcd4 	bl	80a4cd0 <__adddf3>
 80a4328:	4642      	mov	r2, r8
 80a432a:	464b      	mov	r3, r9
 80a432c:	f000 fcd0 	bl	80a4cd0 <__adddf3>
 80a4330:	9c00      	ldr	r4, [sp, #0]
 80a4332:	4642      	mov	r2, r8
 80a4334:	464b      	mov	r3, r9
 80a4336:	4620      	mov	r0, r4
 80a4338:	460d      	mov	r5, r1
 80a433a:	f000 fcc7 	bl	80a4ccc <__aeabi_dsub>
 80a433e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a4342:	f000 fcc3 	bl	80a4ccc <__aeabi_dsub>
 80a4346:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a434a:	f000 fcbf 	bl	80a4ccc <__aeabi_dsub>
 80a434e:	4602      	mov	r2, r0
 80a4350:	460b      	mov	r3, r1
 80a4352:	4650      	mov	r0, sl
 80a4354:	4659      	mov	r1, fp
 80a4356:	f000 fcb9 	bl	80a4ccc <__aeabi_dsub>
 80a435a:	4682      	mov	sl, r0
 80a435c:	468b      	mov	fp, r1
 80a435e:	9b02      	ldr	r3, [sp, #8]
 80a4360:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a4362:	3b01      	subs	r3, #1
 80a4364:	4313      	orrs	r3, r2
 80a4366:	f04f 0200 	mov.w	r2, #0
 80a436a:	bf0c      	ite	eq
 80a436c:	4bda      	ldreq	r3, [pc, #872]	; (80a46d8 <__ieee754_pow+0x908>)
 80a436e:	4bdb      	ldrne	r3, [pc, #876]	; (80a46dc <__ieee754_pow+0x90c>)
 80a4370:	e9cd 6700 	strd	r6, r7, [sp]
 80a4374:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a4378:	2300      	movs	r3, #0
 80a437a:	9300      	str	r3, [sp, #0]
 80a437c:	e9dd 8900 	ldrd	r8, r9, [sp]
 80a4380:	4630      	mov	r0, r6
 80a4382:	4642      	mov	r2, r8
 80a4384:	4639      	mov	r1, r7
 80a4386:	464b      	mov	r3, r9
 80a4388:	f000 fca0 	bl	80a4ccc <__aeabi_dsub>
 80a438c:	4622      	mov	r2, r4
 80a438e:	462b      	mov	r3, r5
 80a4390:	f000 fe54 	bl	80a503c <__aeabi_dmul>
 80a4394:	4632      	mov	r2, r6
 80a4396:	463b      	mov	r3, r7
 80a4398:	4606      	mov	r6, r0
 80a439a:	460f      	mov	r7, r1
 80a439c:	4650      	mov	r0, sl
 80a439e:	4659      	mov	r1, fp
 80a43a0:	f000 fe4c 	bl	80a503c <__aeabi_dmul>
 80a43a4:	4602      	mov	r2, r0
 80a43a6:	460b      	mov	r3, r1
 80a43a8:	4630      	mov	r0, r6
 80a43aa:	4639      	mov	r1, r7
 80a43ac:	f000 fc90 	bl	80a4cd0 <__adddf3>
 80a43b0:	4642      	mov	r2, r8
 80a43b2:	4682      	mov	sl, r0
 80a43b4:	468b      	mov	fp, r1
 80a43b6:	464b      	mov	r3, r9
 80a43b8:	4620      	mov	r0, r4
 80a43ba:	4629      	mov	r1, r5
 80a43bc:	f000 fe3e 	bl	80a503c <__aeabi_dmul>
 80a43c0:	4606      	mov	r6, r0
 80a43c2:	460f      	mov	r7, r1
 80a43c4:	4650      	mov	r0, sl
 80a43c6:	463b      	mov	r3, r7
 80a43c8:	4659      	mov	r1, fp
 80a43ca:	4632      	mov	r2, r6
 80a43cc:	f000 fc80 	bl	80a4cd0 <__adddf3>
 80a43d0:	4bc3      	ldr	r3, [pc, #780]	; (80a46e0 <__ieee754_pow+0x910>)
 80a43d2:	4604      	mov	r4, r0
 80a43d4:	4299      	cmp	r1, r3
 80a43d6:	460d      	mov	r5, r1
 80a43d8:	4688      	mov	r8, r1
 80a43da:	f340 8114 	ble.w	80a4606 <__ieee754_pow+0x836>
 80a43de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a43e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a43e6:	4303      	orrs	r3, r0
 80a43e8:	f040 8212 	bne.w	80a4810 <__ieee754_pow+0xa40>
 80a43ec:	a3a6      	add	r3, pc, #664	; (adr r3, 80a4688 <__ieee754_pow+0x8b8>)
 80a43ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a43f2:	4650      	mov	r0, sl
 80a43f4:	4659      	mov	r1, fp
 80a43f6:	f000 fc6b 	bl	80a4cd0 <__adddf3>
 80a43fa:	4632      	mov	r2, r6
 80a43fc:	e9cd 0100 	strd	r0, r1, [sp]
 80a4400:	463b      	mov	r3, r7
 80a4402:	4620      	mov	r0, r4
 80a4404:	4629      	mov	r1, r5
 80a4406:	f000 fc61 	bl	80a4ccc <__aeabi_dsub>
 80a440a:	4602      	mov	r2, r0
 80a440c:	460b      	mov	r3, r1
 80a440e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4412:	f001 f8a3 	bl	80a555c <__aeabi_dcmpgt>
 80a4416:	2800      	cmp	r0, #0
 80a4418:	f040 81fa 	bne.w	80a4810 <__ieee754_pow+0xa40>
 80a441c:	f3c8 530a 	ubfx	r3, r8, #20, #11
 80a4420:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a4424:	2000      	movs	r0, #0
 80a4426:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a442a:	fa42 f303 	asr.w	r3, r2, r3
 80a442e:	4443      	add	r3, r8
 80a4430:	4cac      	ldr	r4, [pc, #688]	; (80a46e4 <__ieee754_pow+0x914>)
 80a4432:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a4436:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a443a:	fa44 fc02 	asr.w	ip, r4, r2
 80a443e:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a4442:	ea23 010c 	bic.w	r1, r3, ip
 80a4446:	f1c2 0414 	rsb	r4, r2, #20
 80a444a:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80a444e:	f1b8 0f00 	cmp.w	r8, #0
 80a4452:	460b      	mov	r3, r1
 80a4454:	fa45 f104 	asr.w	r1, r5, r4
 80a4458:	910c      	str	r1, [sp, #48]	; 0x30
 80a445a:	bfb8      	it	lt
 80a445c:	4249      	neglt	r1, r1
 80a445e:	4602      	mov	r2, r0
 80a4460:	bfb8      	it	lt
 80a4462:	910c      	strlt	r1, [sp, #48]	; 0x30
 80a4464:	4630      	mov	r0, r6
 80a4466:	4639      	mov	r1, r7
 80a4468:	f000 fc30 	bl	80a4ccc <__aeabi_dsub>
 80a446c:	4606      	mov	r6, r0
 80a446e:	460f      	mov	r7, r1
 80a4470:	4650      	mov	r0, sl
 80a4472:	463b      	mov	r3, r7
 80a4474:	4659      	mov	r1, fp
 80a4476:	4632      	mov	r2, r6
 80a4478:	f000 fc2a 	bl	80a4cd0 <__adddf3>
 80a447c:	460d      	mov	r5, r1
 80a447e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a4480:	051b      	lsls	r3, r3, #20
 80a4482:	9300      	str	r3, [sp, #0]
 80a4484:	2400      	movs	r4, #0
 80a4486:	a382      	add	r3, pc, #520	; (adr r3, 80a4690 <__ieee754_pow+0x8c0>)
 80a4488:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a448c:	4620      	mov	r0, r4
 80a448e:	4629      	mov	r1, r5
 80a4490:	f000 fdd4 	bl	80a503c <__aeabi_dmul>
 80a4494:	4632      	mov	r2, r6
 80a4496:	4680      	mov	r8, r0
 80a4498:	4689      	mov	r9, r1
 80a449a:	463b      	mov	r3, r7
 80a449c:	4620      	mov	r0, r4
 80a449e:	4629      	mov	r1, r5
 80a44a0:	f000 fc14 	bl	80a4ccc <__aeabi_dsub>
 80a44a4:	4602      	mov	r2, r0
 80a44a6:	460b      	mov	r3, r1
 80a44a8:	4650      	mov	r0, sl
 80a44aa:	4659      	mov	r1, fp
 80a44ac:	f000 fc0e 	bl	80a4ccc <__aeabi_dsub>
 80a44b0:	a379      	add	r3, pc, #484	; (adr r3, 80a4698 <__ieee754_pow+0x8c8>)
 80a44b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a44b6:	f000 fdc1 	bl	80a503c <__aeabi_dmul>
 80a44ba:	a379      	add	r3, pc, #484	; (adr r3, 80a46a0 <__ieee754_pow+0x8d0>)
 80a44bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a44c0:	4606      	mov	r6, r0
 80a44c2:	460f      	mov	r7, r1
 80a44c4:	4620      	mov	r0, r4
 80a44c6:	4629      	mov	r1, r5
 80a44c8:	f000 fdb8 	bl	80a503c <__aeabi_dmul>
 80a44cc:	4602      	mov	r2, r0
 80a44ce:	460b      	mov	r3, r1
 80a44d0:	4630      	mov	r0, r6
 80a44d2:	4639      	mov	r1, r7
 80a44d4:	f000 fbfc 	bl	80a4cd0 <__adddf3>
 80a44d8:	4606      	mov	r6, r0
 80a44da:	460f      	mov	r7, r1
 80a44dc:	4632      	mov	r2, r6
 80a44de:	463b      	mov	r3, r7
 80a44e0:	4640      	mov	r0, r8
 80a44e2:	4649      	mov	r1, r9
 80a44e4:	f000 fbf4 	bl	80a4cd0 <__adddf3>
 80a44e8:	4642      	mov	r2, r8
 80a44ea:	464b      	mov	r3, r9
 80a44ec:	460d      	mov	r5, r1
 80a44ee:	4604      	mov	r4, r0
 80a44f0:	f000 fbec 	bl	80a4ccc <__aeabi_dsub>
 80a44f4:	4602      	mov	r2, r0
 80a44f6:	460b      	mov	r3, r1
 80a44f8:	4630      	mov	r0, r6
 80a44fa:	4639      	mov	r1, r7
 80a44fc:	f000 fbe6 	bl	80a4ccc <__aeabi_dsub>
 80a4500:	462b      	mov	r3, r5
 80a4502:	4682      	mov	sl, r0
 80a4504:	468b      	mov	fp, r1
 80a4506:	4622      	mov	r2, r4
 80a4508:	4629      	mov	r1, r5
 80a450a:	4620      	mov	r0, r4
 80a450c:	f000 fd96 	bl	80a503c <__aeabi_dmul>
 80a4510:	a365      	add	r3, pc, #404	; (adr r3, 80a46a8 <__ieee754_pow+0x8d8>)
 80a4512:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4516:	4606      	mov	r6, r0
 80a4518:	460f      	mov	r7, r1
 80a451a:	f000 fd8f 	bl	80a503c <__aeabi_dmul>
 80a451e:	a364      	add	r3, pc, #400	; (adr r3, 80a46b0 <__ieee754_pow+0x8e0>)
 80a4520:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4524:	f000 fbd2 	bl	80a4ccc <__aeabi_dsub>
 80a4528:	4632      	mov	r2, r6
 80a452a:	463b      	mov	r3, r7
 80a452c:	f000 fd86 	bl	80a503c <__aeabi_dmul>
 80a4530:	a361      	add	r3, pc, #388	; (adr r3, 80a46b8 <__ieee754_pow+0x8e8>)
 80a4532:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4536:	f000 fbcb 	bl	80a4cd0 <__adddf3>
 80a453a:	4632      	mov	r2, r6
 80a453c:	463b      	mov	r3, r7
 80a453e:	f000 fd7d 	bl	80a503c <__aeabi_dmul>
 80a4542:	a35f      	add	r3, pc, #380	; (adr r3, 80a46c0 <__ieee754_pow+0x8f0>)
 80a4544:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4548:	f000 fbc0 	bl	80a4ccc <__aeabi_dsub>
 80a454c:	4632      	mov	r2, r6
 80a454e:	463b      	mov	r3, r7
 80a4550:	f000 fd74 	bl	80a503c <__aeabi_dmul>
 80a4554:	a35c      	add	r3, pc, #368	; (adr r3, 80a46c8 <__ieee754_pow+0x8f8>)
 80a4556:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a455a:	f000 fbb9 	bl	80a4cd0 <__adddf3>
 80a455e:	4632      	mov	r2, r6
 80a4560:	463b      	mov	r3, r7
 80a4562:	f000 fd6b 	bl	80a503c <__aeabi_dmul>
 80a4566:	4602      	mov	r2, r0
 80a4568:	460b      	mov	r3, r1
 80a456a:	4620      	mov	r0, r4
 80a456c:	4629      	mov	r1, r5
 80a456e:	f000 fbad 	bl	80a4ccc <__aeabi_dsub>
 80a4572:	4606      	mov	r6, r0
 80a4574:	460f      	mov	r7, r1
 80a4576:	4632      	mov	r2, r6
 80a4578:	463b      	mov	r3, r7
 80a457a:	4629      	mov	r1, r5
 80a457c:	4620      	mov	r0, r4
 80a457e:	f000 fd5d 	bl	80a503c <__aeabi_dmul>
 80a4582:	2200      	movs	r2, #0
 80a4584:	4680      	mov	r8, r0
 80a4586:	4689      	mov	r9, r1
 80a4588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a458c:	4630      	mov	r0, r6
 80a458e:	4639      	mov	r1, r7
 80a4590:	f000 fb9c 	bl	80a4ccc <__aeabi_dsub>
 80a4594:	4602      	mov	r2, r0
 80a4596:	460b      	mov	r3, r1
 80a4598:	4640      	mov	r0, r8
 80a459a:	4649      	mov	r1, r9
 80a459c:	f000 fe78 	bl	80a5290 <__aeabi_ddiv>
 80a45a0:	4652      	mov	r2, sl
 80a45a2:	4606      	mov	r6, r0
 80a45a4:	460f      	mov	r7, r1
 80a45a6:	465b      	mov	r3, fp
 80a45a8:	4629      	mov	r1, r5
 80a45aa:	4620      	mov	r0, r4
 80a45ac:	f000 fd46 	bl	80a503c <__aeabi_dmul>
 80a45b0:	4652      	mov	r2, sl
 80a45b2:	465b      	mov	r3, fp
 80a45b4:	f000 fb8c 	bl	80a4cd0 <__adddf3>
 80a45b8:	4602      	mov	r2, r0
 80a45ba:	460b      	mov	r3, r1
 80a45bc:	4630      	mov	r0, r6
 80a45be:	4639      	mov	r1, r7
 80a45c0:	f000 fb84 	bl	80a4ccc <__aeabi_dsub>
 80a45c4:	462b      	mov	r3, r5
 80a45c6:	4622      	mov	r2, r4
 80a45c8:	f000 fb80 	bl	80a4ccc <__aeabi_dsub>
 80a45cc:	4602      	mov	r2, r0
 80a45ce:	460b      	mov	r3, r1
 80a45d0:	2000      	movs	r0, #0
 80a45d2:	4942      	ldr	r1, [pc, #264]	; (80a46dc <__ieee754_pow+0x90c>)
 80a45d4:	f000 fb7a 	bl	80a4ccc <__aeabi_dsub>
 80a45d8:	9d00      	ldr	r5, [sp, #0]
 80a45da:	440d      	add	r5, r1
 80a45dc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80a45e0:	f2c0 8153 	blt.w	80a488a <__ieee754_pow+0xaba>
 80a45e4:	4629      	mov	r1, r5
 80a45e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a45ea:	f000 fd27 	bl	80a503c <__aeabi_dmul>
 80a45ee:	e9cd 0100 	strd	r0, r1, [sp]
 80a45f2:	e433      	b.n	80a3e5c <__ieee754_pow+0x8c>
 80a45f4:	f1b8 0f00 	cmp.w	r8, #0
 80a45f8:	f6ff aca2 	blt.w	80a3f40 <__ieee754_pow+0x170>
 80a45fc:	2300      	movs	r3, #0
 80a45fe:	2400      	movs	r4, #0
 80a4600:	e9cd 3400 	strd	r3, r4, [sp]
 80a4604:	e42a      	b.n	80a3e5c <__ieee754_pow+0x8c>
 80a4606:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80a46ec <__ieee754_pow+0x91c>
 80a460a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a460e:	4563      	cmp	r3, ip
 80a4610:	f340 80f6 	ble.w	80a4800 <__ieee754_pow+0xa30>
 80a4614:	4b34      	ldr	r3, [pc, #208]	; (80a46e8 <__ieee754_pow+0x918>)
 80a4616:	440b      	add	r3, r1
 80a4618:	4303      	orrs	r3, r0
 80a461a:	d10a      	bne.n	80a4632 <__ieee754_pow+0x862>
 80a461c:	4632      	mov	r2, r6
 80a461e:	463b      	mov	r3, r7
 80a4620:	f000 fb54 	bl	80a4ccc <__aeabi_dsub>
 80a4624:	4652      	mov	r2, sl
 80a4626:	465b      	mov	r3, fp
 80a4628:	f000 ff8e 	bl	80a5548 <__aeabi_dcmpge>
 80a462c:	2800      	cmp	r0, #0
 80a462e:	f43f aef5 	beq.w	80a441c <__ieee754_pow+0x64c>
 80a4632:	a327      	add	r3, pc, #156	; (adr r3, 80a46d0 <__ieee754_pow+0x900>)
 80a4634:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a463c:	f000 fcfe 	bl	80a503c <__aeabi_dmul>
 80a4640:	a323      	add	r3, pc, #140	; (adr r3, 80a46d0 <__ieee754_pow+0x900>)
 80a4642:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4646:	f000 fcf9 	bl	80a503c <__aeabi_dmul>
 80a464a:	e9cd 0100 	strd	r0, r1, [sp]
 80a464e:	e405      	b.n	80a3e5c <__ieee754_pow+0x8c>
 80a4650:	f1b8 0f00 	cmp.w	r8, #0
 80a4654:	dad2      	bge.n	80a45fc <__ieee754_pow+0x82c>
 80a4656:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80a465a:	9600      	str	r6, [sp, #0]
 80a465c:	9301      	str	r3, [sp, #4]
 80a465e:	f7ff bbfd 	b.w	80a3e5c <__ieee754_pow+0x8c>
 80a4662:	2300      	movs	r3, #0
 80a4664:	2400      	movs	r4, #0
 80a4666:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a466a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a466e:	2300      	movs	r3, #0
 80a4670:	4c1a      	ldr	r4, [pc, #104]	; (80a46dc <__ieee754_pow+0x90c>)
 80a4672:	f04f 0a00 	mov.w	sl, #0
 80a4676:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a467a:	e4d8      	b.n	80a402e <__ieee754_pow+0x25e>
 80a467c:	f04f 0c00 	mov.w	ip, #0
 80a4680:	e4b1      	b.n	80a3fe6 <__ieee754_pow+0x216>
 80a4682:	bf00      	nop
 80a4684:	f3af 8000 	nop.w
 80a4688:	652b82fe 	.word	0x652b82fe
 80a468c:	3c971547 	.word	0x3c971547
 80a4690:	00000000 	.word	0x00000000
 80a4694:	3fe62e43 	.word	0x3fe62e43
 80a4698:	fefa39ef 	.word	0xfefa39ef
 80a469c:	3fe62e42 	.word	0x3fe62e42
 80a46a0:	0ca86c39 	.word	0x0ca86c39
 80a46a4:	be205c61 	.word	0xbe205c61
 80a46a8:	72bea4d0 	.word	0x72bea4d0
 80a46ac:	3e663769 	.word	0x3e663769
 80a46b0:	c5d26bf1 	.word	0xc5d26bf1
 80a46b4:	3ebbbd41 	.word	0x3ebbbd41
 80a46b8:	af25de2c 	.word	0xaf25de2c
 80a46bc:	3f11566a 	.word	0x3f11566a
 80a46c0:	16bebd93 	.word	0x16bebd93
 80a46c4:	3f66c16c 	.word	0x3f66c16c
 80a46c8:	5555553e 	.word	0x5555553e
 80a46cc:	3fc55555 	.word	0x3fc55555
 80a46d0:	c2f8f359 	.word	0xc2f8f359
 80a46d4:	01a56e1f 	.word	0x01a56e1f
 80a46d8:	bff00000 	.word	0xbff00000
 80a46dc:	3ff00000 	.word	0x3ff00000
 80a46e0:	408fffff 	.word	0x408fffff
 80a46e4:	000fffff 	.word	0x000fffff
 80a46e8:	3f6f3400 	.word	0x3f6f3400
 80a46ec:	4090cbff 	.word	0x4090cbff
 80a46f0:	429c      	cmp	r4, r3
 80a46f2:	f6ff af7f 	blt.w	80a45f4 <__ieee754_pow+0x824>
 80a46f6:	4b7e      	ldr	r3, [pc, #504]	; (80a48f0 <__ieee754_pow+0xb20>)
 80a46f8:	429c      	cmp	r4, r3
 80a46fa:	f73f ac1d 	bgt.w	80a3f38 <__ieee754_pow+0x168>
 80a46fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4702:	2200      	movs	r2, #0
 80a4704:	4b7a      	ldr	r3, [pc, #488]	; (80a48f0 <__ieee754_pow+0xb20>)
 80a4706:	f000 fae1 	bl	80a4ccc <__aeabi_dsub>
 80a470a:	a36b      	add	r3, pc, #428	; (adr r3, 80a48b8 <__ieee754_pow+0xae8>)
 80a470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4710:	4604      	mov	r4, r0
 80a4712:	460d      	mov	r5, r1
 80a4714:	f000 fc92 	bl	80a503c <__aeabi_dmul>
 80a4718:	a369      	add	r3, pc, #420	; (adr r3, 80a48c0 <__ieee754_pow+0xaf0>)
 80a471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a471e:	4682      	mov	sl, r0
 80a4720:	468b      	mov	fp, r1
 80a4722:	4620      	mov	r0, r4
 80a4724:	4629      	mov	r1, r5
 80a4726:	f000 fc89 	bl	80a503c <__aeabi_dmul>
 80a472a:	2200      	movs	r2, #0
 80a472c:	4680      	mov	r8, r0
 80a472e:	4689      	mov	r9, r1
 80a4730:	4620      	mov	r0, r4
 80a4732:	4629      	mov	r1, r5
 80a4734:	4b6f      	ldr	r3, [pc, #444]	; (80a48f4 <__ieee754_pow+0xb24>)
 80a4736:	f000 fc81 	bl	80a503c <__aeabi_dmul>
 80a473a:	4602      	mov	r2, r0
 80a473c:	460b      	mov	r3, r1
 80a473e:	a162      	add	r1, pc, #392	; (adr r1, 80a48c8 <__ieee754_pow+0xaf8>)
 80a4740:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4744:	f000 fac2 	bl	80a4ccc <__aeabi_dsub>
 80a4748:	4622      	mov	r2, r4
 80a474a:	462b      	mov	r3, r5
 80a474c:	f000 fc76 	bl	80a503c <__aeabi_dmul>
 80a4750:	4602      	mov	r2, r0
 80a4752:	460b      	mov	r3, r1
 80a4754:	2000      	movs	r0, #0
 80a4756:	4968      	ldr	r1, [pc, #416]	; (80a48f8 <__ieee754_pow+0xb28>)
 80a4758:	f000 fab8 	bl	80a4ccc <__aeabi_dsub>
 80a475c:	4622      	mov	r2, r4
 80a475e:	462b      	mov	r3, r5
 80a4760:	4604      	mov	r4, r0
 80a4762:	460d      	mov	r5, r1
 80a4764:	4610      	mov	r0, r2
 80a4766:	4619      	mov	r1, r3
 80a4768:	f000 fc68 	bl	80a503c <__aeabi_dmul>
 80a476c:	4602      	mov	r2, r0
 80a476e:	460b      	mov	r3, r1
 80a4770:	4620      	mov	r0, r4
 80a4772:	4629      	mov	r1, r5
 80a4774:	f000 fc62 	bl	80a503c <__aeabi_dmul>
 80a4778:	a355      	add	r3, pc, #340	; (adr r3, 80a48d0 <__ieee754_pow+0xb00>)
 80a477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a477e:	f000 fc5d 	bl	80a503c <__aeabi_dmul>
 80a4782:	4602      	mov	r2, r0
 80a4784:	460b      	mov	r3, r1
 80a4786:	4640      	mov	r0, r8
 80a4788:	4649      	mov	r1, r9
 80a478a:	f000 fa9f 	bl	80a4ccc <__aeabi_dsub>
 80a478e:	4680      	mov	r8, r0
 80a4790:	4689      	mov	r9, r1
 80a4792:	4650      	mov	r0, sl
 80a4794:	4659      	mov	r1, fp
 80a4796:	4642      	mov	r2, r8
 80a4798:	464b      	mov	r3, r9
 80a479a:	2400      	movs	r4, #0
 80a479c:	f000 fa98 	bl	80a4cd0 <__adddf3>
 80a47a0:	4652      	mov	r2, sl
 80a47a2:	465b      	mov	r3, fp
 80a47a4:	4620      	mov	r0, r4
 80a47a6:	460d      	mov	r5, r1
 80a47a8:	f000 fa90 	bl	80a4ccc <__aeabi_dsub>
 80a47ac:	4602      	mov	r2, r0
 80a47ae:	460b      	mov	r3, r1
 80a47b0:	4640      	mov	r0, r8
 80a47b2:	4649      	mov	r1, r9
 80a47b4:	f000 fa8a 	bl	80a4ccc <__aeabi_dsub>
 80a47b8:	4682      	mov	sl, r0
 80a47ba:	468b      	mov	fp, r1
 80a47bc:	e5cf      	b.n	80a435e <__ieee754_pow+0x58e>
 80a47be:	4652      	mov	r2, sl
 80a47c0:	465b      	mov	r3, fp
 80a47c2:	2000      	movs	r0, #0
 80a47c4:	494a      	ldr	r1, [pc, #296]	; (80a48f0 <__ieee754_pow+0xb20>)
 80a47c6:	f000 fd63 	bl	80a5290 <__aeabi_ddiv>
 80a47ca:	e9cd 0100 	strd	r0, r1, [sp]
 80a47ce:	f7ff bb45 	b.w	80a3e5c <__ieee754_pow+0x8c>
 80a47d2:	4652      	mov	r2, sl
 80a47d4:	4650      	mov	r0, sl
 80a47d6:	465b      	mov	r3, fp
 80a47d8:	4659      	mov	r1, fp
 80a47da:	f000 fc2f 	bl	80a503c <__aeabi_dmul>
 80a47de:	e9cd 0100 	strd	r0, r1, [sp]
 80a47e2:	f7ff bb3b 	b.w	80a3e5c <__ieee754_pow+0x8c>
 80a47e6:	2a00      	cmp	r2, #0
 80a47e8:	d141      	bne.n	80a486e <__ieee754_pow+0xa9e>
 80a47ea:	f1c1 0114 	rsb	r1, r1, #20
 80a47ee:	fa45 f001 	asr.w	r0, r5, r1
 80a47f2:	fa00 f101 	lsl.w	r1, r0, r1
 80a47f6:	42a9      	cmp	r1, r5
 80a47f8:	d055      	beq.n	80a48a6 <__ieee754_pow+0xad6>
 80a47fa:	9202      	str	r2, [sp, #8]
 80a47fc:	f7ff bb0d 	b.w	80a3e1a <__ieee754_pow+0x4a>
 80a4800:	4a3d      	ldr	r2, [pc, #244]	; (80a48f8 <__ieee754_pow+0xb28>)
 80a4802:	4293      	cmp	r3, r2
 80a4804:	dc56      	bgt.n	80a48b4 <__ieee754_pow+0xae4>
 80a4806:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a480a:	9100      	str	r1, [sp, #0]
 80a480c:	910c      	str	r1, [sp, #48]	; 0x30
 80a480e:	e639      	b.n	80a4484 <__ieee754_pow+0x6b4>
 80a4810:	a331      	add	r3, pc, #196	; (adr r3, 80a48d8 <__ieee754_pow+0xb08>)
 80a4812:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a481a:	f000 fc0f 	bl	80a503c <__aeabi_dmul>
 80a481e:	a32e      	add	r3, pc, #184	; (adr r3, 80a48d8 <__ieee754_pow+0xb08>)
 80a4820:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4824:	f000 fc0a 	bl	80a503c <__aeabi_dmul>
 80a4828:	e9cd 0100 	strd	r0, r1, [sp]
 80a482c:	f7ff bb16 	b.w	80a3e5c <__ieee754_pow+0x8c>
 80a4830:	9b02      	ldr	r3, [sp, #8]
 80a4832:	2b01      	cmp	r3, #1
 80a4834:	f47f ab12 	bne.w	80a3e5c <__ieee754_pow+0x8c>
 80a4838:	e9dd 4500 	ldrd	r4, r5, [sp]
 80a483c:	4622      	mov	r2, r4
 80a483e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a4842:	e9cd 2300 	strd	r2, r3, [sp]
 80a4846:	f7ff bb09 	b.w	80a3e5c <__ieee754_pow+0x8c>
 80a484a:	a425      	add	r4, pc, #148	; (adr r4, 80a48e0 <__ieee754_pow+0xb10>)
 80a484c:	e9d4 3400 	ldrd	r3, r4, [r4]
 80a4850:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a4854:	a424      	add	r4, pc, #144	; (adr r4, 80a48e8 <__ieee754_pow+0xb18>)
 80a4856:	e9d4 3400 	ldrd	r3, r4, [r4]
 80a485a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a485e:	2300      	movs	r3, #0
 80a4860:	4c26      	ldr	r4, [pc, #152]	; (80a48fc <__ieee754_pow+0xb2c>)
 80a4862:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
 80a4866:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a486a:	f7ff bbe0 	b.w	80a402e <__ieee754_pow+0x25e>
 80a486e:	4650      	mov	r0, sl
 80a4870:	4659      	mov	r1, fp
 80a4872:	9302      	str	r3, [sp, #8]
 80a4874:	f000 f908 	bl	80a4a88 <fabs>
 80a4878:	9b02      	ldr	r3, [sp, #8]
 80a487a:	e9cd 0100 	strd	r0, r1, [sp]
 80a487e:	2b00      	cmp	r3, #0
 80a4880:	f47f ab86 	bne.w	80a3f90 <__ieee754_pow+0x1c0>
 80a4884:	9302      	str	r3, [sp, #8]
 80a4886:	f7ff bb1b 	b.w	80a3ec0 <__ieee754_pow+0xf0>
 80a488a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a488c:	f000 f9a0 	bl	80a4bd0 <scalbn>
 80a4890:	e6a9      	b.n	80a45e6 <__ieee754_pow+0x816>
 80a4892:	f000 0001 	and.w	r0, r0, #1
 80a4896:	f1c0 0102 	rsb	r1, r0, #2
 80a489a:	9102      	str	r1, [sp, #8]
 80a489c:	2a00      	cmp	r2, #0
 80a489e:	f43f aabc 	beq.w	80a3e1a <__ieee754_pow+0x4a>
 80a48a2:	f7ff bb04 	b.w	80a3eae <__ieee754_pow+0xde>
 80a48a6:	f000 0001 	and.w	r0, r0, #1
 80a48aa:	f1c0 0202 	rsb	r2, r0, #2
 80a48ae:	9202      	str	r2, [sp, #8]
 80a48b0:	f7ff bab3 	b.w	80a3e1a <__ieee754_pow+0x4a>
 80a48b4:	151b      	asrs	r3, r3, #20
 80a48b6:	e5b3      	b.n	80a4420 <__ieee754_pow+0x650>
 80a48b8:	60000000 	.word	0x60000000
 80a48bc:	3ff71547 	.word	0x3ff71547
 80a48c0:	f85ddf44 	.word	0xf85ddf44
 80a48c4:	3e54ae0b 	.word	0x3e54ae0b
 80a48c8:	55555555 	.word	0x55555555
 80a48cc:	3fd55555 	.word	0x3fd55555
 80a48d0:	652b82fe 	.word	0x652b82fe
 80a48d4:	3ff71547 	.word	0x3ff71547
 80a48d8:	8800759c 	.word	0x8800759c
 80a48dc:	7e37e43c 	.word	0x7e37e43c
 80a48e0:	40000000 	.word	0x40000000
 80a48e4:	3fe2b803 	.word	0x3fe2b803
 80a48e8:	43cfd006 	.word	0x43cfd006
 80a48ec:	3e4cfdeb 	.word	0x3e4cfdeb
 80a48f0:	3ff00000 	.word	0x3ff00000
 80a48f4:	3fd00000 	.word	0x3fd00000
 80a48f8:	3fe00000 	.word	0x3fe00000
 80a48fc:	3ff80000 	.word	0x3ff80000

080a4900 <__ieee754_sqrt>:
 80a4900:	4a60      	ldr	r2, [pc, #384]	; (80a4a84 <__ieee754_sqrt+0x184>)
 80a4902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4906:	438a      	bics	r2, r1
 80a4908:	460e      	mov	r6, r1
 80a490a:	4605      	mov	r5, r0
 80a490c:	f000 8097 	beq.w	80a4a3e <__ieee754_sqrt+0x13e>
 80a4910:	2900      	cmp	r1, #0
 80a4912:	460b      	mov	r3, r1
 80a4914:	4604      	mov	r4, r0
 80a4916:	dd4e      	ble.n	80a49b6 <__ieee754_sqrt+0xb6>
 80a4918:	1509      	asrs	r1, r1, #20
 80a491a:	d05a      	beq.n	80a49d2 <__ieee754_sqrt+0xd2>
 80a491c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a4920:	07ca      	lsls	r2, r1, #31
 80a4922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4926:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
 80a492a:	d403      	bmi.n	80a4934 <__ieee754_sqrt+0x34>
 80a492c:	005b      	lsls	r3, r3, #1
 80a492e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80a4932:	0064      	lsls	r4, r4, #1
 80a4934:	f04f 0c00 	mov.w	ip, #0
 80a4938:	2516      	movs	r5, #22
 80a493a:	4666      	mov	r6, ip
 80a493c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80a4940:	0fe1      	lsrs	r1, r4, #31
 80a4942:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a4946:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a494a:	0064      	lsls	r4, r4, #1
 80a494c:	18b1      	adds	r1, r6, r2
 80a494e:	4299      	cmp	r1, r3
 80a4950:	dc02      	bgt.n	80a4958 <__ieee754_sqrt+0x58>
 80a4952:	1a5b      	subs	r3, r3, r1
 80a4954:	188e      	adds	r6, r1, r2
 80a4956:	4494      	add	ip, r2
 80a4958:	005b      	lsls	r3, r3, #1
 80a495a:	3d01      	subs	r5, #1
 80a495c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80a4960:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a4964:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80a4968:	d1f0      	bne.n	80a494c <__ieee754_sqrt+0x4c>
 80a496a:	462f      	mov	r7, r5
 80a496c:	2020      	movs	r0, #32
 80a496e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80a4972:	e009      	b.n	80a4988 <__ieee754_sqrt+0x88>
 80a4974:	d03d      	beq.n	80a49f2 <__ieee754_sqrt+0xf2>
 80a4976:	0fe1      	lsrs	r1, r4, #31
 80a4978:	3801      	subs	r0, #1
 80a497a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a497e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a4982:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80a4986:	d03d      	beq.n	80a4a04 <__ieee754_sqrt+0x104>
 80a4988:	42b3      	cmp	r3, r6
 80a498a:	eb02 0105 	add.w	r1, r2, r5
 80a498e:	ddf1      	ble.n	80a4974 <__ieee754_sqrt+0x74>
 80a4990:	2900      	cmp	r1, #0
 80a4992:	eb01 0502 	add.w	r5, r1, r2
 80a4996:	db09      	blt.n	80a49ac <__ieee754_sqrt+0xac>
 80a4998:	46b0      	mov	r8, r6
 80a499a:	1b9b      	subs	r3, r3, r6
 80a499c:	42a1      	cmp	r1, r4
 80a499e:	bf88      	it	hi
 80a49a0:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80a49a4:	4646      	mov	r6, r8
 80a49a6:	1a64      	subs	r4, r4, r1
 80a49a8:	4417      	add	r7, r2
 80a49aa:	e7e4      	b.n	80a4976 <__ieee754_sqrt+0x76>
 80a49ac:	2d00      	cmp	r5, #0
 80a49ae:	dbf3      	blt.n	80a4998 <__ieee754_sqrt+0x98>
 80a49b0:	f106 0801 	add.w	r8, r6, #1
 80a49b4:	e7f1      	b.n	80a499a <__ieee754_sqrt+0x9a>
 80a49b6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a49ba:	4302      	orrs	r2, r0
 80a49bc:	d057      	beq.n	80a4a6e <__ieee754_sqrt+0x16e>
 80a49be:	2900      	cmp	r1, #0
 80a49c0:	d14b      	bne.n	80a4a5a <__ieee754_sqrt+0x15a>
 80a49c2:	0ae2      	lsrs	r2, r4, #11
 80a49c4:	4613      	mov	r3, r2
 80a49c6:	3915      	subs	r1, #21
 80a49c8:	0564      	lsls	r4, r4, #21
 80a49ca:	2a00      	cmp	r2, #0
 80a49cc:	d0f9      	beq.n	80a49c2 <__ieee754_sqrt+0xc2>
 80a49ce:	02d7      	lsls	r7, r2, #11
 80a49d0:	d452      	bmi.n	80a4a78 <__ieee754_sqrt+0x178>
 80a49d2:	2000      	movs	r0, #0
 80a49d4:	005b      	lsls	r3, r3, #1
 80a49d6:	02de      	lsls	r6, r3, #11
 80a49d8:	4605      	mov	r5, r0
 80a49da:	f100 0001 	add.w	r0, r0, #1
 80a49de:	d5f9      	bpl.n	80a49d4 <__ieee754_sqrt+0xd4>
 80a49e0:	461a      	mov	r2, r3
 80a49e2:	4623      	mov	r3, r4
 80a49e4:	4084      	lsls	r4, r0
 80a49e6:	f1c0 0020 	rsb	r0, r0, #32
 80a49ea:	40c3      	lsrs	r3, r0
 80a49ec:	4313      	orrs	r3, r2
 80a49ee:	1b49      	subs	r1, r1, r5
 80a49f0:	e794      	b.n	80a491c <__ieee754_sqrt+0x1c>
 80a49f2:	42a1      	cmp	r1, r4
 80a49f4:	d8bf      	bhi.n	80a4976 <__ieee754_sqrt+0x76>
 80a49f6:	2900      	cmp	r1, #0
 80a49f8:	eb01 0502 	add.w	r5, r1, r2
 80a49fc:	dbd6      	blt.n	80a49ac <__ieee754_sqrt+0xac>
 80a49fe:	4698      	mov	r8, r3
 80a4a00:	2300      	movs	r3, #0
 80a4a02:	e7cf      	b.n	80a49a4 <__ieee754_sqrt+0xa4>
 80a4a04:	4323      	orrs	r3, r4
 80a4a06:	d113      	bne.n	80a4a30 <__ieee754_sqrt+0x130>
 80a4a08:	0878      	lsrs	r0, r7, #1
 80a4a0a:	ea4f 036c 	mov.w	r3, ip, asr #1
 80a4a0e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a4a12:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a4a16:	f01c 0f01 	tst.w	ip, #1
 80a4a1a:	bf18      	it	ne
 80a4a1c:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
 80a4a20:	eb03 550e 	add.w	r5, r3, lr, lsl #20
 80a4a24:	4602      	mov	r2, r0
 80a4a26:	462b      	mov	r3, r5
 80a4a28:	4610      	mov	r0, r2
 80a4a2a:	4619      	mov	r1, r3
 80a4a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4a30:	1c7b      	adds	r3, r7, #1
 80a4a32:	bf16      	itet	ne
 80a4a34:	1c78      	addne	r0, r7, #1
 80a4a36:	f10c 0c01 	addeq.w	ip, ip, #1
 80a4a3a:	0840      	lsrne	r0, r0, #1
 80a4a3c:	e7e5      	b.n	80a4a0a <__ieee754_sqrt+0x10a>
 80a4a3e:	4602      	mov	r2, r0
 80a4a40:	460b      	mov	r3, r1
 80a4a42:	f000 fafb 	bl	80a503c <__aeabi_dmul>
 80a4a46:	462a      	mov	r2, r5
 80a4a48:	4633      	mov	r3, r6
 80a4a4a:	f000 f941 	bl	80a4cd0 <__adddf3>
 80a4a4e:	4602      	mov	r2, r0
 80a4a50:	460b      	mov	r3, r1
 80a4a52:	4610      	mov	r0, r2
 80a4a54:	4619      	mov	r1, r3
 80a4a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4a5a:	4602      	mov	r2, r0
 80a4a5c:	f000 f936 	bl	80a4ccc <__aeabi_dsub>
 80a4a60:	4602      	mov	r2, r0
 80a4a62:	460b      	mov	r3, r1
 80a4a64:	f000 fc14 	bl	80a5290 <__aeabi_ddiv>
 80a4a68:	4602      	mov	r2, r0
 80a4a6a:	460b      	mov	r3, r1
 80a4a6c:	e7dc      	b.n	80a4a28 <__ieee754_sqrt+0x128>
 80a4a6e:	4602      	mov	r2, r0
 80a4a70:	4619      	mov	r1, r3
 80a4a72:	4610      	mov	r0, r2
 80a4a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4a78:	4623      	mov	r3, r4
 80a4a7a:	2020      	movs	r0, #32
 80a4a7c:	f04f 35ff 	mov.w	r5, #4294967295
 80a4a80:	e7b3      	b.n	80a49ea <__ieee754_sqrt+0xea>
 80a4a82:	bf00      	nop
 80a4a84:	7ff00000 	.word	0x7ff00000

080a4a88 <fabs>:
 80a4a88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4a8c:	4770      	bx	lr
 80a4a8e:	bf00      	nop

080a4a90 <finite>:
 80a4a90:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80a4a94:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80a4a98:	0fc0      	lsrs	r0, r0, #31
 80a4a9a:	4770      	bx	lr

080a4a9c <matherr>:
 80a4a9c:	2000      	movs	r0, #0
 80a4a9e:	4770      	bx	lr

080a4aa0 <nan>:
 80a4aa0:	2000      	movs	r0, #0
 80a4aa2:	4901      	ldr	r1, [pc, #4]	; (80a4aa8 <nan+0x8>)
 80a4aa4:	4770      	bx	lr
 80a4aa6:	bf00      	nop
 80a4aa8:	7ff80000 	.word	0x7ff80000

080a4aac <rint>:
 80a4aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4aae:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80a4ab2:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
 80a4ab6:	2e13      	cmp	r6, #19
 80a4ab8:	4602      	mov	r2, r0
 80a4aba:	460b      	mov	r3, r1
 80a4abc:	460d      	mov	r5, r1
 80a4abe:	4607      	mov	r7, r0
 80a4ac0:	b083      	sub	sp, #12
 80a4ac2:	ea4f 74d1 	mov.w	r4, r1, lsr #31
 80a4ac6:	dc2f      	bgt.n	80a4b28 <rint+0x7c>
 80a4ac8:	2e00      	cmp	r6, #0
 80a4aca:	db4c      	blt.n	80a4b66 <rint+0xba>
 80a4acc:	493d      	ldr	r1, [pc, #244]	; (80a4bc4 <rint+0x118>)
 80a4ace:	4131      	asrs	r1, r6
 80a4ad0:	ea03 0001 	and.w	r0, r3, r1
 80a4ad4:	4310      	orrs	r0, r2
 80a4ad6:	d02c      	beq.n	80a4b32 <rint+0x86>
 80a4ad8:	ea03 0351 	and.w	r3, r3, r1, lsr #1
 80a4adc:	ea52 0703 	orrs.w	r7, r2, r3
 80a4ae0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a4ae4:	d00b      	beq.n	80a4afe <rint+0x52>
 80a4ae6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80a4aea:	2e13      	cmp	r6, #19
 80a4aec:	bf0c      	ite	eq
 80a4aee:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80a4af2:	2700      	movne	r7, #0
 80a4af4:	ea25 0101 	bic.w	r1, r5, r1
 80a4af8:	fa43 f506 	asr.w	r5, r3, r6
 80a4afc:	430d      	orrs	r5, r1
 80a4afe:	4932      	ldr	r1, [pc, #200]	; (80a4bc8 <rint+0x11c>)
 80a4b00:	462b      	mov	r3, r5
 80a4b02:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80a4b06:	e9d4 4500 	ldrd	r4, r5, [r4]
 80a4b0a:	463a      	mov	r2, r7
 80a4b0c:	4620      	mov	r0, r4
 80a4b0e:	4629      	mov	r1, r5
 80a4b10:	f000 f8de 	bl	80a4cd0 <__adddf3>
 80a4b14:	e9cd 0100 	strd	r0, r1, [sp]
 80a4b18:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4b1c:	4622      	mov	r2, r4
 80a4b1e:	462b      	mov	r3, r5
 80a4b20:	f000 f8d4 	bl	80a4ccc <__aeabi_dsub>
 80a4b24:	b003      	add	sp, #12
 80a4b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4b28:	2e33      	cmp	r6, #51	; 0x33
 80a4b2a:	dd06      	ble.n	80a4b3a <rint+0x8e>
 80a4b2c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a4b30:	d045      	beq.n	80a4bbe <rint+0x112>
 80a4b32:	4610      	mov	r0, r2
 80a4b34:	4619      	mov	r1, r3
 80a4b36:	b003      	add	sp, #12
 80a4b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4b3a:	f04f 31ff 	mov.w	r1, #4294967295
 80a4b3e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80a4b42:	fa21 f10c 	lsr.w	r1, r1, ip
 80a4b46:	4208      	tst	r0, r1
 80a4b48:	d0f3      	beq.n	80a4b32 <rint+0x86>
 80a4b4a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80a4b4e:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80a4b52:	d0d4      	beq.n	80a4afe <rint+0x52>
 80a4b54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80a4b58:	ea20 0703 	bic.w	r7, r0, r3
 80a4b5c:	fa42 fc0c 	asr.w	ip, r2, ip
 80a4b60:	ea47 070c 	orr.w	r7, r7, ip
 80a4b64:	e7cb      	b.n	80a4afe <rint+0x52>
 80a4b66:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4b6a:	4301      	orrs	r1, r0
 80a4b6c:	4619      	mov	r1, r3
 80a4b6e:	d0e2      	beq.n	80a4b36 <rint+0x8a>
 80a4b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a4b74:	431f      	orrs	r7, r3
 80a4b76:	427b      	negs	r3, r7
 80a4b78:	433b      	orrs	r3, r7
 80a4b7a:	0c6d      	lsrs	r5, r5, #17
 80a4b7c:	0b1b      	lsrs	r3, r3, #12
 80a4b7e:	046d      	lsls	r5, r5, #17
 80a4b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80a4b84:	ea43 0105 	orr.w	r1, r3, r5
 80a4b88:	460b      	mov	r3, r1
 80a4b8a:	490f      	ldr	r1, [pc, #60]	; (80a4bc8 <rint+0x11c>)
 80a4b8c:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80a4b90:	e9d1 6700 	ldrd	r6, r7, [r1]
 80a4b94:	4630      	mov	r0, r6
 80a4b96:	4639      	mov	r1, r7
 80a4b98:	f000 f89a 	bl	80a4cd0 <__adddf3>
 80a4b9c:	e9cd 0100 	strd	r0, r1, [sp]
 80a4ba0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4ba4:	4632      	mov	r2, r6
 80a4ba6:	463b      	mov	r3, r7
 80a4ba8:	f000 f890 	bl	80a4ccc <__aeabi_dsub>
 80a4bac:	4602      	mov	r2, r0
 80a4bae:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4bb2:	ea41 73c4 	orr.w	r3, r1, r4, lsl #31
 80a4bb6:	4610      	mov	r0, r2
 80a4bb8:	4619      	mov	r1, r3
 80a4bba:	b003      	add	sp, #12
 80a4bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4bbe:	f000 f887 	bl	80a4cd0 <__adddf3>
 80a4bc2:	e7b8      	b.n	80a4b36 <rint+0x8a>
 80a4bc4:	000fffff 	.word	0x000fffff
 80a4bc8:	080a6ef8 	.word	0x080a6ef8
 80a4bcc:	00000000 	.word	0x00000000

080a4bd0 <scalbn>:
 80a4bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4bd2:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a4bd6:	4604      	mov	r4, r0
 80a4bd8:	460d      	mov	r5, r1
 80a4bda:	460e      	mov	r6, r1
 80a4bdc:	4617      	mov	r7, r2
 80a4bde:	bb73      	cbnz	r3, 80a4c3e <scalbn+0x6e>
 80a4be0:	4603      	mov	r3, r0
 80a4be2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a4be6:	4333      	orrs	r3, r6
 80a4be8:	d028      	beq.n	80a4c3c <scalbn+0x6c>
 80a4bea:	4b31      	ldr	r3, [pc, #196]	; (80a4cb0 <scalbn+0xe0>)
 80a4bec:	2200      	movs	r2, #0
 80a4bee:	f000 fa25 	bl	80a503c <__aeabi_dmul>
 80a4bf2:	4b30      	ldr	r3, [pc, #192]	; (80a4cb4 <scalbn+0xe4>)
 80a4bf4:	4604      	mov	r4, r0
 80a4bf6:	429f      	cmp	r7, r3
 80a4bf8:	460d      	mov	r5, r1
 80a4bfa:	db1a      	blt.n	80a4c32 <scalbn+0x62>
 80a4bfc:	460e      	mov	r6, r1
 80a4bfe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a4c02:	3b36      	subs	r3, #54	; 0x36
 80a4c04:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a4c08:	443b      	add	r3, r7
 80a4c0a:	4293      	cmp	r3, r2
 80a4c0c:	dc20      	bgt.n	80a4c50 <scalbn+0x80>
 80a4c0e:	2b00      	cmp	r3, #0
 80a4c10:	dc3c      	bgt.n	80a4c8c <scalbn+0xbc>
 80a4c12:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80a4c16:	da2c      	bge.n	80a4c72 <scalbn+0xa2>
 80a4c18:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a4c1c:	429f      	cmp	r7, r3
 80a4c1e:	dc17      	bgt.n	80a4c50 <scalbn+0x80>
 80a4c20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80a4c24:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 80a4c28:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80a4c2c:	4822      	ldr	r0, [pc, #136]	; (80a4cb8 <scalbn+0xe8>)
 80a4c2e:	f041 011f 	orr.w	r1, r1, #31
 80a4c32:	a31b      	add	r3, pc, #108	; (adr r3, 80a4ca0 <scalbn+0xd0>)
 80a4c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c38:	f000 fa00 	bl	80a503c <__aeabi_dmul>
 80a4c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4c3e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a4c42:	4293      	cmp	r3, r2
 80a4c44:	d1de      	bne.n	80a4c04 <scalbn+0x34>
 80a4c46:	4602      	mov	r2, r0
 80a4c48:	460b      	mov	r3, r1
 80a4c4a:	f000 f841 	bl	80a4cd0 <__adddf3>
 80a4c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4c50:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80a4c54:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80a4c58:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80a4c5c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80a4c60:	a311      	add	r3, pc, #68	; (adr r3, 80a4ca8 <scalbn+0xd8>)
 80a4c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c66:	4815      	ldr	r0, [pc, #84]	; (80a4cbc <scalbn+0xec>)
 80a4c68:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80a4c6c:	f000 f9e6 	bl	80a503c <__aeabi_dmul>
 80a4c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4c72:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80a4c76:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80a4c7a:	3336      	adds	r3, #54	; 0x36
 80a4c7c:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 80a4c80:	4620      	mov	r0, r4
 80a4c82:	2200      	movs	r2, #0
 80a4c84:	4b0e      	ldr	r3, [pc, #56]	; (80a4cc0 <scalbn+0xf0>)
 80a4c86:	f000 f9d9 	bl	80a503c <__aeabi_dmul>
 80a4c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4c8c:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80a4c90:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80a4c94:	4620      	mov	r0, r4
 80a4c96:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 80a4c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4c9c:	f3af 8000 	nop.w
 80a4ca0:	c2f8f359 	.word	0xc2f8f359
 80a4ca4:	01a56e1f 	.word	0x01a56e1f
 80a4ca8:	8800759c 	.word	0x8800759c
 80a4cac:	7e37e43c 	.word	0x7e37e43c
 80a4cb0:	43500000 	.word	0x43500000
 80a4cb4:	ffff3cb0 	.word	0xffff3cb0
 80a4cb8:	c2f8f359 	.word	0xc2f8f359
 80a4cbc:	8800759c 	.word	0x8800759c
 80a4cc0:	3c900000 	.word	0x3c900000

080a4cc4 <__aeabi_drsub>:
 80a4cc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a4cc8:	e002      	b.n	80a4cd0 <__adddf3>
 80a4cca:	bf00      	nop

080a4ccc <__aeabi_dsub>:
 80a4ccc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a4cd0 <__adddf3>:
 80a4cd0:	b530      	push	{r4, r5, lr}
 80a4cd2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a4cd6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a4cda:	ea94 0f05 	teq	r4, r5
 80a4cde:	bf08      	it	eq
 80a4ce0:	ea90 0f02 	teqeq	r0, r2
 80a4ce4:	bf1f      	itttt	ne
 80a4ce6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a4cea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a4cee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a4cf2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4cf6:	f000 80e2 	beq.w	80a4ebe <__adddf3+0x1ee>
 80a4cfa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a4cfe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a4d02:	bfb8      	it	lt
 80a4d04:	426d      	neglt	r5, r5
 80a4d06:	dd0c      	ble.n	80a4d22 <__adddf3+0x52>
 80a4d08:	442c      	add	r4, r5
 80a4d0a:	ea80 0202 	eor.w	r2, r0, r2
 80a4d0e:	ea81 0303 	eor.w	r3, r1, r3
 80a4d12:	ea82 0000 	eor.w	r0, r2, r0
 80a4d16:	ea83 0101 	eor.w	r1, r3, r1
 80a4d1a:	ea80 0202 	eor.w	r2, r0, r2
 80a4d1e:	ea81 0303 	eor.w	r3, r1, r3
 80a4d22:	2d36      	cmp	r5, #54	; 0x36
 80a4d24:	bf88      	it	hi
 80a4d26:	bd30      	pophi	{r4, r5, pc}
 80a4d28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4d2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4d30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a4d34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a4d38:	d002      	beq.n	80a4d40 <__adddf3+0x70>
 80a4d3a:	4240      	negs	r0, r0
 80a4d3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4d40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a4d44:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4d48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a4d4c:	d002      	beq.n	80a4d54 <__adddf3+0x84>
 80a4d4e:	4252      	negs	r2, r2
 80a4d50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4d54:	ea94 0f05 	teq	r4, r5
 80a4d58:	f000 80a7 	beq.w	80a4eaa <__adddf3+0x1da>
 80a4d5c:	f1a4 0401 	sub.w	r4, r4, #1
 80a4d60:	f1d5 0e20 	rsbs	lr, r5, #32
 80a4d64:	db0d      	blt.n	80a4d82 <__adddf3+0xb2>
 80a4d66:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a4d6a:	fa22 f205 	lsr.w	r2, r2, r5
 80a4d6e:	1880      	adds	r0, r0, r2
 80a4d70:	f141 0100 	adc.w	r1, r1, #0
 80a4d74:	fa03 f20e 	lsl.w	r2, r3, lr
 80a4d78:	1880      	adds	r0, r0, r2
 80a4d7a:	fa43 f305 	asr.w	r3, r3, r5
 80a4d7e:	4159      	adcs	r1, r3
 80a4d80:	e00e      	b.n	80a4da0 <__adddf3+0xd0>
 80a4d82:	f1a5 0520 	sub.w	r5, r5, #32
 80a4d86:	f10e 0e20 	add.w	lr, lr, #32
 80a4d8a:	2a01      	cmp	r2, #1
 80a4d8c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a4d90:	bf28      	it	cs
 80a4d92:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a4d96:	fa43 f305 	asr.w	r3, r3, r5
 80a4d9a:	18c0      	adds	r0, r0, r3
 80a4d9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a4da0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4da4:	d507      	bpl.n	80a4db6 <__adddf3+0xe6>
 80a4da6:	f04f 0e00 	mov.w	lr, #0
 80a4daa:	f1dc 0c00 	rsbs	ip, ip, #0
 80a4dae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a4db2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a4db6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a4dba:	d31b      	bcc.n	80a4df4 <__adddf3+0x124>
 80a4dbc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a4dc0:	d30c      	bcc.n	80a4ddc <__adddf3+0x10c>
 80a4dc2:	0849      	lsrs	r1, r1, #1
 80a4dc4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a4dc8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a4dcc:	f104 0401 	add.w	r4, r4, #1
 80a4dd0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a4dd4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a4dd8:	f080 809a 	bcs.w	80a4f10 <__adddf3+0x240>
 80a4ddc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4de0:	bf08      	it	eq
 80a4de2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4de6:	f150 0000 	adcs.w	r0, r0, #0
 80a4dea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4dee:	ea41 0105 	orr.w	r1, r1, r5
 80a4df2:	bd30      	pop	{r4, r5, pc}
 80a4df4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a4df8:	4140      	adcs	r0, r0
 80a4dfa:	eb41 0101 	adc.w	r1, r1, r1
 80a4dfe:	3c01      	subs	r4, #1
 80a4e00:	bf28      	it	cs
 80a4e02:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a4e06:	d2e9      	bcs.n	80a4ddc <__adddf3+0x10c>
 80a4e08:	f091 0f00 	teq	r1, #0
 80a4e0c:	bf04      	itt	eq
 80a4e0e:	4601      	moveq	r1, r0
 80a4e10:	2000      	moveq	r0, #0
 80a4e12:	fab1 f381 	clz	r3, r1
 80a4e16:	bf08      	it	eq
 80a4e18:	3320      	addeq	r3, #32
 80a4e1a:	f1a3 030b 	sub.w	r3, r3, #11
 80a4e1e:	f1b3 0220 	subs.w	r2, r3, #32
 80a4e22:	da0c      	bge.n	80a4e3e <__adddf3+0x16e>
 80a4e24:	320c      	adds	r2, #12
 80a4e26:	dd08      	ble.n	80a4e3a <__adddf3+0x16a>
 80a4e28:	f102 0c14 	add.w	ip, r2, #20
 80a4e2c:	f1c2 020c 	rsb	r2, r2, #12
 80a4e30:	fa01 f00c 	lsl.w	r0, r1, ip
 80a4e34:	fa21 f102 	lsr.w	r1, r1, r2
 80a4e38:	e00c      	b.n	80a4e54 <__adddf3+0x184>
 80a4e3a:	f102 0214 	add.w	r2, r2, #20
 80a4e3e:	bfd8      	it	le
 80a4e40:	f1c2 0c20 	rsble	ip, r2, #32
 80a4e44:	fa01 f102 	lsl.w	r1, r1, r2
 80a4e48:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a4e4c:	bfdc      	itt	le
 80a4e4e:	ea41 010c 	orrle.w	r1, r1, ip
 80a4e52:	4090      	lslle	r0, r2
 80a4e54:	1ae4      	subs	r4, r4, r3
 80a4e56:	bfa2      	ittt	ge
 80a4e58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a4e5c:	4329      	orrge	r1, r5
 80a4e5e:	bd30      	popge	{r4, r5, pc}
 80a4e60:	ea6f 0404 	mvn.w	r4, r4
 80a4e64:	3c1f      	subs	r4, #31
 80a4e66:	da1c      	bge.n	80a4ea2 <__adddf3+0x1d2>
 80a4e68:	340c      	adds	r4, #12
 80a4e6a:	dc0e      	bgt.n	80a4e8a <__adddf3+0x1ba>
 80a4e6c:	f104 0414 	add.w	r4, r4, #20
 80a4e70:	f1c4 0220 	rsb	r2, r4, #32
 80a4e74:	fa20 f004 	lsr.w	r0, r0, r4
 80a4e78:	fa01 f302 	lsl.w	r3, r1, r2
 80a4e7c:	ea40 0003 	orr.w	r0, r0, r3
 80a4e80:	fa21 f304 	lsr.w	r3, r1, r4
 80a4e84:	ea45 0103 	orr.w	r1, r5, r3
 80a4e88:	bd30      	pop	{r4, r5, pc}
 80a4e8a:	f1c4 040c 	rsb	r4, r4, #12
 80a4e8e:	f1c4 0220 	rsb	r2, r4, #32
 80a4e92:	fa20 f002 	lsr.w	r0, r0, r2
 80a4e96:	fa01 f304 	lsl.w	r3, r1, r4
 80a4e9a:	ea40 0003 	orr.w	r0, r0, r3
 80a4e9e:	4629      	mov	r1, r5
 80a4ea0:	bd30      	pop	{r4, r5, pc}
 80a4ea2:	fa21 f004 	lsr.w	r0, r1, r4
 80a4ea6:	4629      	mov	r1, r5
 80a4ea8:	bd30      	pop	{r4, r5, pc}
 80a4eaa:	f094 0f00 	teq	r4, #0
 80a4eae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a4eb2:	bf06      	itte	eq
 80a4eb4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a4eb8:	3401      	addeq	r4, #1
 80a4eba:	3d01      	subne	r5, #1
 80a4ebc:	e74e      	b.n	80a4d5c <__adddf3+0x8c>
 80a4ebe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4ec2:	bf18      	it	ne
 80a4ec4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4ec8:	d029      	beq.n	80a4f1e <__adddf3+0x24e>
 80a4eca:	ea94 0f05 	teq	r4, r5
 80a4ece:	bf08      	it	eq
 80a4ed0:	ea90 0f02 	teqeq	r0, r2
 80a4ed4:	d005      	beq.n	80a4ee2 <__adddf3+0x212>
 80a4ed6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a4eda:	bf04      	itt	eq
 80a4edc:	4619      	moveq	r1, r3
 80a4ede:	4610      	moveq	r0, r2
 80a4ee0:	bd30      	pop	{r4, r5, pc}
 80a4ee2:	ea91 0f03 	teq	r1, r3
 80a4ee6:	bf1e      	ittt	ne
 80a4ee8:	2100      	movne	r1, #0
 80a4eea:	2000      	movne	r0, #0
 80a4eec:	bd30      	popne	{r4, r5, pc}
 80a4eee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a4ef2:	d105      	bne.n	80a4f00 <__adddf3+0x230>
 80a4ef4:	0040      	lsls	r0, r0, #1
 80a4ef6:	4149      	adcs	r1, r1
 80a4ef8:	bf28      	it	cs
 80a4efa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a4efe:	bd30      	pop	{r4, r5, pc}
 80a4f00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a4f04:	bf3c      	itt	cc
 80a4f06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a4f0a:	bd30      	popcc	{r4, r5, pc}
 80a4f0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4f10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a4f14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4f18:	f04f 0000 	mov.w	r0, #0
 80a4f1c:	bd30      	pop	{r4, r5, pc}
 80a4f1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4f22:	bf1a      	itte	ne
 80a4f24:	4619      	movne	r1, r3
 80a4f26:	4610      	movne	r0, r2
 80a4f28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a4f2c:	bf1c      	itt	ne
 80a4f2e:	460b      	movne	r3, r1
 80a4f30:	4602      	movne	r2, r0
 80a4f32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4f36:	bf06      	itte	eq
 80a4f38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a4f3c:	ea91 0f03 	teqeq	r1, r3
 80a4f40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a4f44:	bd30      	pop	{r4, r5, pc}
 80a4f46:	bf00      	nop

080a4f48 <__aeabi_ui2d>:
 80a4f48:	f090 0f00 	teq	r0, #0
 80a4f4c:	bf04      	itt	eq
 80a4f4e:	2100      	moveq	r1, #0
 80a4f50:	4770      	bxeq	lr
 80a4f52:	b530      	push	{r4, r5, lr}
 80a4f54:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4f58:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4f5c:	f04f 0500 	mov.w	r5, #0
 80a4f60:	f04f 0100 	mov.w	r1, #0
 80a4f64:	e750      	b.n	80a4e08 <__adddf3+0x138>
 80a4f66:	bf00      	nop

080a4f68 <__aeabi_i2d>:
 80a4f68:	f090 0f00 	teq	r0, #0
 80a4f6c:	bf04      	itt	eq
 80a4f6e:	2100      	moveq	r1, #0
 80a4f70:	4770      	bxeq	lr
 80a4f72:	b530      	push	{r4, r5, lr}
 80a4f74:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4f78:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4f7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4f80:	bf48      	it	mi
 80a4f82:	4240      	negmi	r0, r0
 80a4f84:	f04f 0100 	mov.w	r1, #0
 80a4f88:	e73e      	b.n	80a4e08 <__adddf3+0x138>
 80a4f8a:	bf00      	nop

080a4f8c <__aeabi_f2d>:
 80a4f8c:	0042      	lsls	r2, r0, #1
 80a4f8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a4f92:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4f96:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a4f9a:	bf1f      	itttt	ne
 80a4f9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4fa0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4fa4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4fa8:	4770      	bxne	lr
 80a4faa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a4fae:	bf08      	it	eq
 80a4fb0:	4770      	bxeq	lr
 80a4fb2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a4fb6:	bf04      	itt	eq
 80a4fb8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a4fbc:	4770      	bxeq	lr
 80a4fbe:	b530      	push	{r4, r5, lr}
 80a4fc0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a4fc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4fc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4fcc:	e71c      	b.n	80a4e08 <__adddf3+0x138>
 80a4fce:	bf00      	nop

080a4fd0 <__aeabi_ul2d>:
 80a4fd0:	ea50 0201 	orrs.w	r2, r0, r1
 80a4fd4:	bf08      	it	eq
 80a4fd6:	4770      	bxeq	lr
 80a4fd8:	b530      	push	{r4, r5, lr}
 80a4fda:	f04f 0500 	mov.w	r5, #0
 80a4fde:	e00a      	b.n	80a4ff6 <__aeabi_l2d+0x16>

080a4fe0 <__aeabi_l2d>:
 80a4fe0:	ea50 0201 	orrs.w	r2, r0, r1
 80a4fe4:	bf08      	it	eq
 80a4fe6:	4770      	bxeq	lr
 80a4fe8:	b530      	push	{r4, r5, lr}
 80a4fea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a4fee:	d502      	bpl.n	80a4ff6 <__aeabi_l2d+0x16>
 80a4ff0:	4240      	negs	r0, r0
 80a4ff2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4ff6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4ffa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4ffe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a5002:	f43f aed8 	beq.w	80a4db6 <__adddf3+0xe6>
 80a5006:	f04f 0203 	mov.w	r2, #3
 80a500a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a500e:	bf18      	it	ne
 80a5010:	3203      	addne	r2, #3
 80a5012:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a5016:	bf18      	it	ne
 80a5018:	3203      	addne	r2, #3
 80a501a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a501e:	f1c2 0320 	rsb	r3, r2, #32
 80a5022:	fa00 fc03 	lsl.w	ip, r0, r3
 80a5026:	fa20 f002 	lsr.w	r0, r0, r2
 80a502a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a502e:	ea40 000e 	orr.w	r0, r0, lr
 80a5032:	fa21 f102 	lsr.w	r1, r1, r2
 80a5036:	4414      	add	r4, r2
 80a5038:	e6bd      	b.n	80a4db6 <__adddf3+0xe6>
 80a503a:	bf00      	nop

080a503c <__aeabi_dmul>:
 80a503c:	b570      	push	{r4, r5, r6, lr}
 80a503e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5042:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5046:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a504a:	bf1d      	ittte	ne
 80a504c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5050:	ea94 0f0c 	teqne	r4, ip
 80a5054:	ea95 0f0c 	teqne	r5, ip
 80a5058:	f000 f8de 	bleq	80a5218 <__aeabi_dmul+0x1dc>
 80a505c:	442c      	add	r4, r5
 80a505e:	ea81 0603 	eor.w	r6, r1, r3
 80a5062:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a5066:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a506a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a506e:	bf18      	it	ne
 80a5070:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a5074:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a507c:	d038      	beq.n	80a50f0 <__aeabi_dmul+0xb4>
 80a507e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a5082:	f04f 0500 	mov.w	r5, #0
 80a5086:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a508a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a508e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a5092:	f04f 0600 	mov.w	r6, #0
 80a5096:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a509a:	f09c 0f00 	teq	ip, #0
 80a509e:	bf18      	it	ne
 80a50a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80a50a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a50a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a50ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a50b0:	d204      	bcs.n	80a50bc <__aeabi_dmul+0x80>
 80a50b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a50b6:	416d      	adcs	r5, r5
 80a50b8:	eb46 0606 	adc.w	r6, r6, r6
 80a50bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a50c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a50c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a50c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a50cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a50d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a50d4:	bf88      	it	hi
 80a50d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a50da:	d81e      	bhi.n	80a511a <__aeabi_dmul+0xde>
 80a50dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a50e0:	bf08      	it	eq
 80a50e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a50e6:	f150 0000 	adcs.w	r0, r0, #0
 80a50ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a50ee:	bd70      	pop	{r4, r5, r6, pc}
 80a50f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a50f4:	ea46 0101 	orr.w	r1, r6, r1
 80a50f8:	ea40 0002 	orr.w	r0, r0, r2
 80a50fc:	ea81 0103 	eor.w	r1, r1, r3
 80a5100:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a5104:	bfc2      	ittt	gt
 80a5106:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a510a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a510e:	bd70      	popgt	{r4, r5, r6, pc}
 80a5110:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5114:	f04f 0e00 	mov.w	lr, #0
 80a5118:	3c01      	subs	r4, #1
 80a511a:	f300 80ab 	bgt.w	80a5274 <__aeabi_dmul+0x238>
 80a511e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a5122:	bfde      	ittt	le
 80a5124:	2000      	movle	r0, #0
 80a5126:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a512a:	bd70      	pople	{r4, r5, r6, pc}
 80a512c:	f1c4 0400 	rsb	r4, r4, #0
 80a5130:	3c20      	subs	r4, #32
 80a5132:	da35      	bge.n	80a51a0 <__aeabi_dmul+0x164>
 80a5134:	340c      	adds	r4, #12
 80a5136:	dc1b      	bgt.n	80a5170 <__aeabi_dmul+0x134>
 80a5138:	f104 0414 	add.w	r4, r4, #20
 80a513c:	f1c4 0520 	rsb	r5, r4, #32
 80a5140:	fa00 f305 	lsl.w	r3, r0, r5
 80a5144:	fa20 f004 	lsr.w	r0, r0, r4
 80a5148:	fa01 f205 	lsl.w	r2, r1, r5
 80a514c:	ea40 0002 	orr.w	r0, r0, r2
 80a5150:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a5154:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5158:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a515c:	fa21 f604 	lsr.w	r6, r1, r4
 80a5160:	eb42 0106 	adc.w	r1, r2, r6
 80a5164:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5168:	bf08      	it	eq
 80a516a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a516e:	bd70      	pop	{r4, r5, r6, pc}
 80a5170:	f1c4 040c 	rsb	r4, r4, #12
 80a5174:	f1c4 0520 	rsb	r5, r4, #32
 80a5178:	fa00 f304 	lsl.w	r3, r0, r4
 80a517c:	fa20 f005 	lsr.w	r0, r0, r5
 80a5180:	fa01 f204 	lsl.w	r2, r1, r4
 80a5184:	ea40 0002 	orr.w	r0, r0, r2
 80a5188:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a518c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5190:	f141 0100 	adc.w	r1, r1, #0
 80a5194:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5198:	bf08      	it	eq
 80a519a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a519e:	bd70      	pop	{r4, r5, r6, pc}
 80a51a0:	f1c4 0520 	rsb	r5, r4, #32
 80a51a4:	fa00 f205 	lsl.w	r2, r0, r5
 80a51a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80a51ac:	fa20 f304 	lsr.w	r3, r0, r4
 80a51b0:	fa01 f205 	lsl.w	r2, r1, r5
 80a51b4:	ea43 0302 	orr.w	r3, r3, r2
 80a51b8:	fa21 f004 	lsr.w	r0, r1, r4
 80a51bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a51c0:	fa21 f204 	lsr.w	r2, r1, r4
 80a51c4:	ea20 0002 	bic.w	r0, r0, r2
 80a51c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a51cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a51d0:	bf08      	it	eq
 80a51d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a51d6:	bd70      	pop	{r4, r5, r6, pc}
 80a51d8:	f094 0f00 	teq	r4, #0
 80a51dc:	d10f      	bne.n	80a51fe <__aeabi_dmul+0x1c2>
 80a51de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a51e2:	0040      	lsls	r0, r0, #1
 80a51e4:	eb41 0101 	adc.w	r1, r1, r1
 80a51e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a51ec:	bf08      	it	eq
 80a51ee:	3c01      	subeq	r4, #1
 80a51f0:	d0f7      	beq.n	80a51e2 <__aeabi_dmul+0x1a6>
 80a51f2:	ea41 0106 	orr.w	r1, r1, r6
 80a51f6:	f095 0f00 	teq	r5, #0
 80a51fa:	bf18      	it	ne
 80a51fc:	4770      	bxne	lr
 80a51fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a5202:	0052      	lsls	r2, r2, #1
 80a5204:	eb43 0303 	adc.w	r3, r3, r3
 80a5208:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a520c:	bf08      	it	eq
 80a520e:	3d01      	subeq	r5, #1
 80a5210:	d0f7      	beq.n	80a5202 <__aeabi_dmul+0x1c6>
 80a5212:	ea43 0306 	orr.w	r3, r3, r6
 80a5216:	4770      	bx	lr
 80a5218:	ea94 0f0c 	teq	r4, ip
 80a521c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5220:	bf18      	it	ne
 80a5222:	ea95 0f0c 	teqne	r5, ip
 80a5226:	d00c      	beq.n	80a5242 <__aeabi_dmul+0x206>
 80a5228:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a522c:	bf18      	it	ne
 80a522e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5232:	d1d1      	bne.n	80a51d8 <__aeabi_dmul+0x19c>
 80a5234:	ea81 0103 	eor.w	r1, r1, r3
 80a5238:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a523c:	f04f 0000 	mov.w	r0, #0
 80a5240:	bd70      	pop	{r4, r5, r6, pc}
 80a5242:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5246:	bf06      	itte	eq
 80a5248:	4610      	moveq	r0, r2
 80a524a:	4619      	moveq	r1, r3
 80a524c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5250:	d019      	beq.n	80a5286 <__aeabi_dmul+0x24a>
 80a5252:	ea94 0f0c 	teq	r4, ip
 80a5256:	d102      	bne.n	80a525e <__aeabi_dmul+0x222>
 80a5258:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a525c:	d113      	bne.n	80a5286 <__aeabi_dmul+0x24a>
 80a525e:	ea95 0f0c 	teq	r5, ip
 80a5262:	d105      	bne.n	80a5270 <__aeabi_dmul+0x234>
 80a5264:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5268:	bf1c      	itt	ne
 80a526a:	4610      	movne	r0, r2
 80a526c:	4619      	movne	r1, r3
 80a526e:	d10a      	bne.n	80a5286 <__aeabi_dmul+0x24a>
 80a5270:	ea81 0103 	eor.w	r1, r1, r3
 80a5274:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5278:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a527c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5280:	f04f 0000 	mov.w	r0, #0
 80a5284:	bd70      	pop	{r4, r5, r6, pc}
 80a5286:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a528a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a528e:	bd70      	pop	{r4, r5, r6, pc}

080a5290 <__aeabi_ddiv>:
 80a5290:	b570      	push	{r4, r5, r6, lr}
 80a5292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a529a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a529e:	bf1d      	ittte	ne
 80a52a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a52a4:	ea94 0f0c 	teqne	r4, ip
 80a52a8:	ea95 0f0c 	teqne	r5, ip
 80a52ac:	f000 f8a7 	bleq	80a53fe <__aeabi_ddiv+0x16e>
 80a52b0:	eba4 0405 	sub.w	r4, r4, r5
 80a52b4:	ea81 0e03 	eor.w	lr, r1, r3
 80a52b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a52bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a52c0:	f000 8088 	beq.w	80a53d4 <__aeabi_ddiv+0x144>
 80a52c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a52c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a52cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a52d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a52d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a52d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a52dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a52e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a52e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a52e8:	429d      	cmp	r5, r3
 80a52ea:	bf08      	it	eq
 80a52ec:	4296      	cmpeq	r6, r2
 80a52ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a52f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a52f6:	d202      	bcs.n	80a52fe <__aeabi_ddiv+0x6e>
 80a52f8:	085b      	lsrs	r3, r3, #1
 80a52fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a52fe:	1ab6      	subs	r6, r6, r2
 80a5300:	eb65 0503 	sbc.w	r5, r5, r3
 80a5304:	085b      	lsrs	r3, r3, #1
 80a5306:	ea4f 0232 	mov.w	r2, r2, rrx
 80a530a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a530e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a5312:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5316:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a531a:	bf22      	ittt	cs
 80a531c:	1ab6      	subcs	r6, r6, r2
 80a531e:	4675      	movcs	r5, lr
 80a5320:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5324:	085b      	lsrs	r3, r3, #1
 80a5326:	ea4f 0232 	mov.w	r2, r2, rrx
 80a532a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a532e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5332:	bf22      	ittt	cs
 80a5334:	1ab6      	subcs	r6, r6, r2
 80a5336:	4675      	movcs	r5, lr
 80a5338:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a533c:	085b      	lsrs	r3, r3, #1
 80a533e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5342:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5346:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a534a:	bf22      	ittt	cs
 80a534c:	1ab6      	subcs	r6, r6, r2
 80a534e:	4675      	movcs	r5, lr
 80a5350:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5354:	085b      	lsrs	r3, r3, #1
 80a5356:	ea4f 0232 	mov.w	r2, r2, rrx
 80a535a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a535e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5362:	bf22      	ittt	cs
 80a5364:	1ab6      	subcs	r6, r6, r2
 80a5366:	4675      	movcs	r5, lr
 80a5368:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a536c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a5370:	d018      	beq.n	80a53a4 <__aeabi_ddiv+0x114>
 80a5372:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a5376:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a537a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a537e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a5382:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a5386:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a538a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a538e:	d1c0      	bne.n	80a5312 <__aeabi_ddiv+0x82>
 80a5390:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5394:	d10b      	bne.n	80a53ae <__aeabi_ddiv+0x11e>
 80a5396:	ea41 0100 	orr.w	r1, r1, r0
 80a539a:	f04f 0000 	mov.w	r0, #0
 80a539e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a53a2:	e7b6      	b.n	80a5312 <__aeabi_ddiv+0x82>
 80a53a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a53a8:	bf04      	itt	eq
 80a53aa:	4301      	orreq	r1, r0
 80a53ac:	2000      	moveq	r0, #0
 80a53ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a53b2:	bf88      	it	hi
 80a53b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a53b8:	f63f aeaf 	bhi.w	80a511a <__aeabi_dmul+0xde>
 80a53bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80a53c0:	bf04      	itt	eq
 80a53c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a53c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a53ca:	f150 0000 	adcs.w	r0, r0, #0
 80a53ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a53d2:	bd70      	pop	{r4, r5, r6, pc}
 80a53d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a53d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a53dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a53e0:	bfc2      	ittt	gt
 80a53e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a53e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a53ea:	bd70      	popgt	{r4, r5, r6, pc}
 80a53ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a53f0:	f04f 0e00 	mov.w	lr, #0
 80a53f4:	3c01      	subs	r4, #1
 80a53f6:	e690      	b.n	80a511a <__aeabi_dmul+0xde>
 80a53f8:	ea45 0e06 	orr.w	lr, r5, r6
 80a53fc:	e68d      	b.n	80a511a <__aeabi_dmul+0xde>
 80a53fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5402:	ea94 0f0c 	teq	r4, ip
 80a5406:	bf08      	it	eq
 80a5408:	ea95 0f0c 	teqeq	r5, ip
 80a540c:	f43f af3b 	beq.w	80a5286 <__aeabi_dmul+0x24a>
 80a5410:	ea94 0f0c 	teq	r4, ip
 80a5414:	d10a      	bne.n	80a542c <__aeabi_ddiv+0x19c>
 80a5416:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a541a:	f47f af34 	bne.w	80a5286 <__aeabi_dmul+0x24a>
 80a541e:	ea95 0f0c 	teq	r5, ip
 80a5422:	f47f af25 	bne.w	80a5270 <__aeabi_dmul+0x234>
 80a5426:	4610      	mov	r0, r2
 80a5428:	4619      	mov	r1, r3
 80a542a:	e72c      	b.n	80a5286 <__aeabi_dmul+0x24a>
 80a542c:	ea95 0f0c 	teq	r5, ip
 80a5430:	d106      	bne.n	80a5440 <__aeabi_ddiv+0x1b0>
 80a5432:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5436:	f43f aefd 	beq.w	80a5234 <__aeabi_dmul+0x1f8>
 80a543a:	4610      	mov	r0, r2
 80a543c:	4619      	mov	r1, r3
 80a543e:	e722      	b.n	80a5286 <__aeabi_dmul+0x24a>
 80a5440:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5444:	bf18      	it	ne
 80a5446:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a544a:	f47f aec5 	bne.w	80a51d8 <__aeabi_dmul+0x19c>
 80a544e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a5452:	f47f af0d 	bne.w	80a5270 <__aeabi_dmul+0x234>
 80a5456:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a545a:	f47f aeeb 	bne.w	80a5234 <__aeabi_dmul+0x1f8>
 80a545e:	e712      	b.n	80a5286 <__aeabi_dmul+0x24a>

080a5460 <__gedf2>:
 80a5460:	f04f 3cff 	mov.w	ip, #4294967295
 80a5464:	e006      	b.n	80a5474 <__cmpdf2+0x4>
 80a5466:	bf00      	nop

080a5468 <__ledf2>:
 80a5468:	f04f 0c01 	mov.w	ip, #1
 80a546c:	e002      	b.n	80a5474 <__cmpdf2+0x4>
 80a546e:	bf00      	nop

080a5470 <__cmpdf2>:
 80a5470:	f04f 0c01 	mov.w	ip, #1
 80a5474:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5478:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a547c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5480:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5484:	bf18      	it	ne
 80a5486:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a548a:	d01b      	beq.n	80a54c4 <__cmpdf2+0x54>
 80a548c:	b001      	add	sp, #4
 80a548e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a5492:	bf0c      	ite	eq
 80a5494:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a5498:	ea91 0f03 	teqne	r1, r3
 80a549c:	bf02      	ittt	eq
 80a549e:	ea90 0f02 	teqeq	r0, r2
 80a54a2:	2000      	moveq	r0, #0
 80a54a4:	4770      	bxeq	lr
 80a54a6:	f110 0f00 	cmn.w	r0, #0
 80a54aa:	ea91 0f03 	teq	r1, r3
 80a54ae:	bf58      	it	pl
 80a54b0:	4299      	cmppl	r1, r3
 80a54b2:	bf08      	it	eq
 80a54b4:	4290      	cmpeq	r0, r2
 80a54b6:	bf2c      	ite	cs
 80a54b8:	17d8      	asrcs	r0, r3, #31
 80a54ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a54be:	f040 0001 	orr.w	r0, r0, #1
 80a54c2:	4770      	bx	lr
 80a54c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a54c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a54cc:	d102      	bne.n	80a54d4 <__cmpdf2+0x64>
 80a54ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a54d2:	d107      	bne.n	80a54e4 <__cmpdf2+0x74>
 80a54d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a54d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a54dc:	d1d6      	bne.n	80a548c <__cmpdf2+0x1c>
 80a54de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a54e2:	d0d3      	beq.n	80a548c <__cmpdf2+0x1c>
 80a54e4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a54e8:	4770      	bx	lr
 80a54ea:	bf00      	nop

080a54ec <__aeabi_cdrcmple>:
 80a54ec:	4684      	mov	ip, r0
 80a54ee:	4610      	mov	r0, r2
 80a54f0:	4662      	mov	r2, ip
 80a54f2:	468c      	mov	ip, r1
 80a54f4:	4619      	mov	r1, r3
 80a54f6:	4663      	mov	r3, ip
 80a54f8:	e000      	b.n	80a54fc <__aeabi_cdcmpeq>
 80a54fa:	bf00      	nop

080a54fc <__aeabi_cdcmpeq>:
 80a54fc:	b501      	push	{r0, lr}
 80a54fe:	f7ff ffb7 	bl	80a5470 <__cmpdf2>
 80a5502:	2800      	cmp	r0, #0
 80a5504:	bf48      	it	mi
 80a5506:	f110 0f00 	cmnmi.w	r0, #0
 80a550a:	bd01      	pop	{r0, pc}

080a550c <__aeabi_dcmpeq>:
 80a550c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5510:	f7ff fff4 	bl	80a54fc <__aeabi_cdcmpeq>
 80a5514:	bf0c      	ite	eq
 80a5516:	2001      	moveq	r0, #1
 80a5518:	2000      	movne	r0, #0
 80a551a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a551e:	bf00      	nop

080a5520 <__aeabi_dcmplt>:
 80a5520:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5524:	f7ff ffea 	bl	80a54fc <__aeabi_cdcmpeq>
 80a5528:	bf34      	ite	cc
 80a552a:	2001      	movcc	r0, #1
 80a552c:	2000      	movcs	r0, #0
 80a552e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5532:	bf00      	nop

080a5534 <__aeabi_dcmple>:
 80a5534:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5538:	f7ff ffe0 	bl	80a54fc <__aeabi_cdcmpeq>
 80a553c:	bf94      	ite	ls
 80a553e:	2001      	movls	r0, #1
 80a5540:	2000      	movhi	r0, #0
 80a5542:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5546:	bf00      	nop

080a5548 <__aeabi_dcmpge>:
 80a5548:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a554c:	f7ff ffce 	bl	80a54ec <__aeabi_cdrcmple>
 80a5550:	bf94      	ite	ls
 80a5552:	2001      	movls	r0, #1
 80a5554:	2000      	movhi	r0, #0
 80a5556:	f85d fb08 	ldr.w	pc, [sp], #8
 80a555a:	bf00      	nop

080a555c <__aeabi_dcmpgt>:
 80a555c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5560:	f7ff ffc4 	bl	80a54ec <__aeabi_cdrcmple>
 80a5564:	bf34      	ite	cc
 80a5566:	2001      	movcc	r0, #1
 80a5568:	2000      	movcs	r0, #0
 80a556a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a556e:	bf00      	nop

080a5570 <__aeabi_dcmpun>:
 80a5570:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5574:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5578:	d102      	bne.n	80a5580 <__aeabi_dcmpun+0x10>
 80a557a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a557e:	d10a      	bne.n	80a5596 <__aeabi_dcmpun+0x26>
 80a5580:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5584:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5588:	d102      	bne.n	80a5590 <__aeabi_dcmpun+0x20>
 80a558a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a558e:	d102      	bne.n	80a5596 <__aeabi_dcmpun+0x26>
 80a5590:	f04f 0000 	mov.w	r0, #0
 80a5594:	4770      	bx	lr
 80a5596:	f04f 0001 	mov.w	r0, #1
 80a559a:	4770      	bx	lr

080a559c <__aeabi_d2iz>:
 80a559c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a55a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a55a4:	d215      	bcs.n	80a55d2 <__aeabi_d2iz+0x36>
 80a55a6:	d511      	bpl.n	80a55cc <__aeabi_d2iz+0x30>
 80a55a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a55ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a55b0:	d912      	bls.n	80a55d8 <__aeabi_d2iz+0x3c>
 80a55b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a55b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a55ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a55be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a55c2:	fa23 f002 	lsr.w	r0, r3, r2
 80a55c6:	bf18      	it	ne
 80a55c8:	4240      	negne	r0, r0
 80a55ca:	4770      	bx	lr
 80a55cc:	f04f 0000 	mov.w	r0, #0
 80a55d0:	4770      	bx	lr
 80a55d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a55d6:	d105      	bne.n	80a55e4 <__aeabi_d2iz+0x48>
 80a55d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a55dc:	bf08      	it	eq
 80a55de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a55e2:	4770      	bx	lr
 80a55e4:	f04f 0000 	mov.w	r0, #0
 80a55e8:	4770      	bx	lr
 80a55ea:	bf00      	nop

080a55ec <__aeabi_d2uiz>:
 80a55ec:	004a      	lsls	r2, r1, #1
 80a55ee:	d211      	bcs.n	80a5614 <__aeabi_d2uiz+0x28>
 80a55f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a55f4:	d211      	bcs.n	80a561a <__aeabi_d2uiz+0x2e>
 80a55f6:	d50d      	bpl.n	80a5614 <__aeabi_d2uiz+0x28>
 80a55f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a55fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5600:	d40e      	bmi.n	80a5620 <__aeabi_d2uiz+0x34>
 80a5602:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a560a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a560e:	fa23 f002 	lsr.w	r0, r3, r2
 80a5612:	4770      	bx	lr
 80a5614:	f04f 0000 	mov.w	r0, #0
 80a5618:	4770      	bx	lr
 80a561a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a561e:	d102      	bne.n	80a5626 <__aeabi_d2uiz+0x3a>
 80a5620:	f04f 30ff 	mov.w	r0, #4294967295
 80a5624:	4770      	bx	lr
 80a5626:	f04f 0000 	mov.w	r0, #0
 80a562a:	4770      	bx	lr

080a562c <__aeabi_d2f>:
 80a562c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5630:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a5634:	bf24      	itt	cs
 80a5636:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a563a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a563e:	d90d      	bls.n	80a565c <__aeabi_d2f+0x30>
 80a5640:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5644:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a5648:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a564c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a5650:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a5654:	bf08      	it	eq
 80a5656:	f020 0001 	biceq.w	r0, r0, #1
 80a565a:	4770      	bx	lr
 80a565c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a5660:	d121      	bne.n	80a56a6 <__aeabi_d2f+0x7a>
 80a5662:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a5666:	bfbc      	itt	lt
 80a5668:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a566c:	4770      	bxlt	lr
 80a566e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5672:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a5676:	f1c2 0218 	rsb	r2, r2, #24
 80a567a:	f1c2 0c20 	rsb	ip, r2, #32
 80a567e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a5682:	fa20 f002 	lsr.w	r0, r0, r2
 80a5686:	bf18      	it	ne
 80a5688:	f040 0001 	orrne.w	r0, r0, #1
 80a568c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5690:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a5694:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a5698:	ea40 000c 	orr.w	r0, r0, ip
 80a569c:	fa23 f302 	lsr.w	r3, r3, r2
 80a56a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a56a4:	e7cc      	b.n	80a5640 <__aeabi_d2f+0x14>
 80a56a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a56aa:	d107      	bne.n	80a56bc <__aeabi_d2f+0x90>
 80a56ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a56b0:	bf1e      	ittt	ne
 80a56b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a56b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a56ba:	4770      	bxne	lr
 80a56bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a56c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a56c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a56c8:	4770      	bx	lr
 80a56ca:	bf00      	nop

080a56cc <__aeabi_frsub>:
 80a56cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a56d0:	e002      	b.n	80a56d8 <__addsf3>
 80a56d2:	bf00      	nop

080a56d4 <__aeabi_fsub>:
 80a56d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a56d8 <__addsf3>:
 80a56d8:	0042      	lsls	r2, r0, #1
 80a56da:	bf1f      	itttt	ne
 80a56dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a56e0:	ea92 0f03 	teqne	r2, r3
 80a56e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a56e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a56ec:	d06a      	beq.n	80a57c4 <__addsf3+0xec>
 80a56ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a56f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a56f6:	bfc1      	itttt	gt
 80a56f8:	18d2      	addgt	r2, r2, r3
 80a56fa:	4041      	eorgt	r1, r0
 80a56fc:	4048      	eorgt	r0, r1
 80a56fe:	4041      	eorgt	r1, r0
 80a5700:	bfb8      	it	lt
 80a5702:	425b      	neglt	r3, r3
 80a5704:	2b19      	cmp	r3, #25
 80a5706:	bf88      	it	hi
 80a5708:	4770      	bxhi	lr
 80a570a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a570e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5712:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a5716:	bf18      	it	ne
 80a5718:	4240      	negne	r0, r0
 80a571a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a571e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a5722:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a5726:	bf18      	it	ne
 80a5728:	4249      	negne	r1, r1
 80a572a:	ea92 0f03 	teq	r2, r3
 80a572e:	d03f      	beq.n	80a57b0 <__addsf3+0xd8>
 80a5730:	f1a2 0201 	sub.w	r2, r2, #1
 80a5734:	fa41 fc03 	asr.w	ip, r1, r3
 80a5738:	eb10 000c 	adds.w	r0, r0, ip
 80a573c:	f1c3 0320 	rsb	r3, r3, #32
 80a5740:	fa01 f103 	lsl.w	r1, r1, r3
 80a5744:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5748:	d502      	bpl.n	80a5750 <__addsf3+0x78>
 80a574a:	4249      	negs	r1, r1
 80a574c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a5750:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a5754:	d313      	bcc.n	80a577e <__addsf3+0xa6>
 80a5756:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a575a:	d306      	bcc.n	80a576a <__addsf3+0x92>
 80a575c:	0840      	lsrs	r0, r0, #1
 80a575e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5762:	f102 0201 	add.w	r2, r2, #1
 80a5766:	2afe      	cmp	r2, #254	; 0xfe
 80a5768:	d251      	bcs.n	80a580e <__addsf3+0x136>
 80a576a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a576e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5772:	bf08      	it	eq
 80a5774:	f020 0001 	biceq.w	r0, r0, #1
 80a5778:	ea40 0003 	orr.w	r0, r0, r3
 80a577c:	4770      	bx	lr
 80a577e:	0049      	lsls	r1, r1, #1
 80a5780:	eb40 0000 	adc.w	r0, r0, r0
 80a5784:	3a01      	subs	r2, #1
 80a5786:	bf28      	it	cs
 80a5788:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a578c:	d2ed      	bcs.n	80a576a <__addsf3+0x92>
 80a578e:	fab0 fc80 	clz	ip, r0
 80a5792:	f1ac 0c08 	sub.w	ip, ip, #8
 80a5796:	ebb2 020c 	subs.w	r2, r2, ip
 80a579a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a579e:	bfaa      	itet	ge
 80a57a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a57a4:	4252      	neglt	r2, r2
 80a57a6:	4318      	orrge	r0, r3
 80a57a8:	bfbc      	itt	lt
 80a57aa:	40d0      	lsrlt	r0, r2
 80a57ac:	4318      	orrlt	r0, r3
 80a57ae:	4770      	bx	lr
 80a57b0:	f092 0f00 	teq	r2, #0
 80a57b4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a57b8:	bf06      	itte	eq
 80a57ba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a57be:	3201      	addeq	r2, #1
 80a57c0:	3b01      	subne	r3, #1
 80a57c2:	e7b5      	b.n	80a5730 <__addsf3+0x58>
 80a57c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a57c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a57cc:	bf18      	it	ne
 80a57ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a57d2:	d021      	beq.n	80a5818 <__addsf3+0x140>
 80a57d4:	ea92 0f03 	teq	r2, r3
 80a57d8:	d004      	beq.n	80a57e4 <__addsf3+0x10c>
 80a57da:	f092 0f00 	teq	r2, #0
 80a57de:	bf08      	it	eq
 80a57e0:	4608      	moveq	r0, r1
 80a57e2:	4770      	bx	lr
 80a57e4:	ea90 0f01 	teq	r0, r1
 80a57e8:	bf1c      	itt	ne
 80a57ea:	2000      	movne	r0, #0
 80a57ec:	4770      	bxne	lr
 80a57ee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a57f2:	d104      	bne.n	80a57fe <__addsf3+0x126>
 80a57f4:	0040      	lsls	r0, r0, #1
 80a57f6:	bf28      	it	cs
 80a57f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a57fc:	4770      	bx	lr
 80a57fe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a5802:	bf3c      	itt	cc
 80a5804:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a5808:	4770      	bxcc	lr
 80a580a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a580e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a5812:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5816:	4770      	bx	lr
 80a5818:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a581c:	bf16      	itet	ne
 80a581e:	4608      	movne	r0, r1
 80a5820:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a5824:	4601      	movne	r1, r0
 80a5826:	0242      	lsls	r2, r0, #9
 80a5828:	bf06      	itte	eq
 80a582a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a582e:	ea90 0f01 	teqeq	r0, r1
 80a5832:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a5836:	4770      	bx	lr

080a5838 <__aeabi_ui2f>:
 80a5838:	f04f 0300 	mov.w	r3, #0
 80a583c:	e004      	b.n	80a5848 <__aeabi_i2f+0x8>
 80a583e:	bf00      	nop

080a5840 <__aeabi_i2f>:
 80a5840:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a5844:	bf48      	it	mi
 80a5846:	4240      	negmi	r0, r0
 80a5848:	ea5f 0c00 	movs.w	ip, r0
 80a584c:	bf08      	it	eq
 80a584e:	4770      	bxeq	lr
 80a5850:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a5854:	4601      	mov	r1, r0
 80a5856:	f04f 0000 	mov.w	r0, #0
 80a585a:	e01c      	b.n	80a5896 <__aeabi_l2f+0x2a>

080a585c <__aeabi_ul2f>:
 80a585c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5860:	bf08      	it	eq
 80a5862:	4770      	bxeq	lr
 80a5864:	f04f 0300 	mov.w	r3, #0
 80a5868:	e00a      	b.n	80a5880 <__aeabi_l2f+0x14>
 80a586a:	bf00      	nop

080a586c <__aeabi_l2f>:
 80a586c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5870:	bf08      	it	eq
 80a5872:	4770      	bxeq	lr
 80a5874:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a5878:	d502      	bpl.n	80a5880 <__aeabi_l2f+0x14>
 80a587a:	4240      	negs	r0, r0
 80a587c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5880:	ea5f 0c01 	movs.w	ip, r1
 80a5884:	bf02      	ittt	eq
 80a5886:	4684      	moveq	ip, r0
 80a5888:	4601      	moveq	r1, r0
 80a588a:	2000      	moveq	r0, #0
 80a588c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a5890:	bf08      	it	eq
 80a5892:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a5896:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a589a:	fabc f28c 	clz	r2, ip
 80a589e:	3a08      	subs	r2, #8
 80a58a0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a58a4:	db10      	blt.n	80a58c8 <__aeabi_l2f+0x5c>
 80a58a6:	fa01 fc02 	lsl.w	ip, r1, r2
 80a58aa:	4463      	add	r3, ip
 80a58ac:	fa00 fc02 	lsl.w	ip, r0, r2
 80a58b0:	f1c2 0220 	rsb	r2, r2, #32
 80a58b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a58b8:	fa20 f202 	lsr.w	r2, r0, r2
 80a58bc:	eb43 0002 	adc.w	r0, r3, r2
 80a58c0:	bf08      	it	eq
 80a58c2:	f020 0001 	biceq.w	r0, r0, #1
 80a58c6:	4770      	bx	lr
 80a58c8:	f102 0220 	add.w	r2, r2, #32
 80a58cc:	fa01 fc02 	lsl.w	ip, r1, r2
 80a58d0:	f1c2 0220 	rsb	r2, r2, #32
 80a58d4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a58d8:	fa21 f202 	lsr.w	r2, r1, r2
 80a58dc:	eb43 0002 	adc.w	r0, r3, r2
 80a58e0:	bf08      	it	eq
 80a58e2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a58e6:	4770      	bx	lr

080a58e8 <__aeabi_fmul>:
 80a58e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a58ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a58f0:	bf1e      	ittt	ne
 80a58f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a58f6:	ea92 0f0c 	teqne	r2, ip
 80a58fa:	ea93 0f0c 	teqne	r3, ip
 80a58fe:	d06f      	beq.n	80a59e0 <__aeabi_fmul+0xf8>
 80a5900:	441a      	add	r2, r3
 80a5902:	ea80 0c01 	eor.w	ip, r0, r1
 80a5906:	0240      	lsls	r0, r0, #9
 80a5908:	bf18      	it	ne
 80a590a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a590e:	d01e      	beq.n	80a594e <__aeabi_fmul+0x66>
 80a5910:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a5914:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a5918:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a591c:	fba0 3101 	umull	r3, r1, r0, r1
 80a5920:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5924:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a5928:	bf3e      	ittt	cc
 80a592a:	0049      	lslcc	r1, r1, #1
 80a592c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a5930:	005b      	lslcc	r3, r3, #1
 80a5932:	ea40 0001 	orr.w	r0, r0, r1
 80a5936:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a593a:	2afd      	cmp	r2, #253	; 0xfd
 80a593c:	d81d      	bhi.n	80a597a <__aeabi_fmul+0x92>
 80a593e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a5942:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5946:	bf08      	it	eq
 80a5948:	f020 0001 	biceq.w	r0, r0, #1
 80a594c:	4770      	bx	lr
 80a594e:	f090 0f00 	teq	r0, #0
 80a5952:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5956:	bf08      	it	eq
 80a5958:	0249      	lsleq	r1, r1, #9
 80a595a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a595e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a5962:	3a7f      	subs	r2, #127	; 0x7f
 80a5964:	bfc2      	ittt	gt
 80a5966:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a596a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a596e:	4770      	bxgt	lr
 80a5970:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5974:	f04f 0300 	mov.w	r3, #0
 80a5978:	3a01      	subs	r2, #1
 80a597a:	dc5d      	bgt.n	80a5a38 <__aeabi_fmul+0x150>
 80a597c:	f112 0f19 	cmn.w	r2, #25
 80a5980:	bfdc      	itt	le
 80a5982:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a5986:	4770      	bxle	lr
 80a5988:	f1c2 0200 	rsb	r2, r2, #0
 80a598c:	0041      	lsls	r1, r0, #1
 80a598e:	fa21 f102 	lsr.w	r1, r1, r2
 80a5992:	f1c2 0220 	rsb	r2, r2, #32
 80a5996:	fa00 fc02 	lsl.w	ip, r0, r2
 80a599a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a599e:	f140 0000 	adc.w	r0, r0, #0
 80a59a2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a59a6:	bf08      	it	eq
 80a59a8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a59ac:	4770      	bx	lr
 80a59ae:	f092 0f00 	teq	r2, #0
 80a59b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a59b6:	bf02      	ittt	eq
 80a59b8:	0040      	lsleq	r0, r0, #1
 80a59ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a59be:	3a01      	subeq	r2, #1
 80a59c0:	d0f9      	beq.n	80a59b6 <__aeabi_fmul+0xce>
 80a59c2:	ea40 000c 	orr.w	r0, r0, ip
 80a59c6:	f093 0f00 	teq	r3, #0
 80a59ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a59ce:	bf02      	ittt	eq
 80a59d0:	0049      	lsleq	r1, r1, #1
 80a59d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a59d6:	3b01      	subeq	r3, #1
 80a59d8:	d0f9      	beq.n	80a59ce <__aeabi_fmul+0xe6>
 80a59da:	ea41 010c 	orr.w	r1, r1, ip
 80a59de:	e78f      	b.n	80a5900 <__aeabi_fmul+0x18>
 80a59e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a59e4:	ea92 0f0c 	teq	r2, ip
 80a59e8:	bf18      	it	ne
 80a59ea:	ea93 0f0c 	teqne	r3, ip
 80a59ee:	d00a      	beq.n	80a5a06 <__aeabi_fmul+0x11e>
 80a59f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a59f4:	bf18      	it	ne
 80a59f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a59fa:	d1d8      	bne.n	80a59ae <__aeabi_fmul+0xc6>
 80a59fc:	ea80 0001 	eor.w	r0, r0, r1
 80a5a00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5a04:	4770      	bx	lr
 80a5a06:	f090 0f00 	teq	r0, #0
 80a5a0a:	bf17      	itett	ne
 80a5a0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a5a10:	4608      	moveq	r0, r1
 80a5a12:	f091 0f00 	teqne	r1, #0
 80a5a16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a5a1a:	d014      	beq.n	80a5a46 <__aeabi_fmul+0x15e>
 80a5a1c:	ea92 0f0c 	teq	r2, ip
 80a5a20:	d101      	bne.n	80a5a26 <__aeabi_fmul+0x13e>
 80a5a22:	0242      	lsls	r2, r0, #9
 80a5a24:	d10f      	bne.n	80a5a46 <__aeabi_fmul+0x15e>
 80a5a26:	ea93 0f0c 	teq	r3, ip
 80a5a2a:	d103      	bne.n	80a5a34 <__aeabi_fmul+0x14c>
 80a5a2c:	024b      	lsls	r3, r1, #9
 80a5a2e:	bf18      	it	ne
 80a5a30:	4608      	movne	r0, r1
 80a5a32:	d108      	bne.n	80a5a46 <__aeabi_fmul+0x15e>
 80a5a34:	ea80 0001 	eor.w	r0, r0, r1
 80a5a38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5a3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5a40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5a44:	4770      	bx	lr
 80a5a46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5a4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a5a4e:	4770      	bx	lr

080a5a50 <__aeabi_fdiv>:
 80a5a50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5a54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5a58:	bf1e      	ittt	ne
 80a5a5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5a5e:	ea92 0f0c 	teqne	r2, ip
 80a5a62:	ea93 0f0c 	teqne	r3, ip
 80a5a66:	d069      	beq.n	80a5b3c <__aeabi_fdiv+0xec>
 80a5a68:	eba2 0203 	sub.w	r2, r2, r3
 80a5a6c:	ea80 0c01 	eor.w	ip, r0, r1
 80a5a70:	0249      	lsls	r1, r1, #9
 80a5a72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a5a76:	d037      	beq.n	80a5ae8 <__aeabi_fdiv+0x98>
 80a5a78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a5a7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a5a80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a5a84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5a88:	428b      	cmp	r3, r1
 80a5a8a:	bf38      	it	cc
 80a5a8c:	005b      	lslcc	r3, r3, #1
 80a5a8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a5a92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a5a96:	428b      	cmp	r3, r1
 80a5a98:	bf24      	itt	cs
 80a5a9a:	1a5b      	subcs	r3, r3, r1
 80a5a9c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5aa0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a5aa4:	bf24      	itt	cs
 80a5aa6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a5aaa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5aae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a5ab2:	bf24      	itt	cs
 80a5ab4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a5ab8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5abc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a5ac0:	bf24      	itt	cs
 80a5ac2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a5ac6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5aca:	011b      	lsls	r3, r3, #4
 80a5acc:	bf18      	it	ne
 80a5ace:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a5ad2:	d1e0      	bne.n	80a5a96 <__aeabi_fdiv+0x46>
 80a5ad4:	2afd      	cmp	r2, #253	; 0xfd
 80a5ad6:	f63f af50 	bhi.w	80a597a <__aeabi_fmul+0x92>
 80a5ada:	428b      	cmp	r3, r1
 80a5adc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5ae0:	bf08      	it	eq
 80a5ae2:	f020 0001 	biceq.w	r0, r0, #1
 80a5ae6:	4770      	bx	lr
 80a5ae8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5aec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5af0:	327f      	adds	r2, #127	; 0x7f
 80a5af2:	bfc2      	ittt	gt
 80a5af4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5af8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5afc:	4770      	bxgt	lr
 80a5afe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5b02:	f04f 0300 	mov.w	r3, #0
 80a5b06:	3a01      	subs	r2, #1
 80a5b08:	e737      	b.n	80a597a <__aeabi_fmul+0x92>
 80a5b0a:	f092 0f00 	teq	r2, #0
 80a5b0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5b12:	bf02      	ittt	eq
 80a5b14:	0040      	lsleq	r0, r0, #1
 80a5b16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5b1a:	3a01      	subeq	r2, #1
 80a5b1c:	d0f9      	beq.n	80a5b12 <__aeabi_fdiv+0xc2>
 80a5b1e:	ea40 000c 	orr.w	r0, r0, ip
 80a5b22:	f093 0f00 	teq	r3, #0
 80a5b26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5b2a:	bf02      	ittt	eq
 80a5b2c:	0049      	lsleq	r1, r1, #1
 80a5b2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5b32:	3b01      	subeq	r3, #1
 80a5b34:	d0f9      	beq.n	80a5b2a <__aeabi_fdiv+0xda>
 80a5b36:	ea41 010c 	orr.w	r1, r1, ip
 80a5b3a:	e795      	b.n	80a5a68 <__aeabi_fdiv+0x18>
 80a5b3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5b40:	ea92 0f0c 	teq	r2, ip
 80a5b44:	d108      	bne.n	80a5b58 <__aeabi_fdiv+0x108>
 80a5b46:	0242      	lsls	r2, r0, #9
 80a5b48:	f47f af7d 	bne.w	80a5a46 <__aeabi_fmul+0x15e>
 80a5b4c:	ea93 0f0c 	teq	r3, ip
 80a5b50:	f47f af70 	bne.w	80a5a34 <__aeabi_fmul+0x14c>
 80a5b54:	4608      	mov	r0, r1
 80a5b56:	e776      	b.n	80a5a46 <__aeabi_fmul+0x15e>
 80a5b58:	ea93 0f0c 	teq	r3, ip
 80a5b5c:	d104      	bne.n	80a5b68 <__aeabi_fdiv+0x118>
 80a5b5e:	024b      	lsls	r3, r1, #9
 80a5b60:	f43f af4c 	beq.w	80a59fc <__aeabi_fmul+0x114>
 80a5b64:	4608      	mov	r0, r1
 80a5b66:	e76e      	b.n	80a5a46 <__aeabi_fmul+0x15e>
 80a5b68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5b6c:	bf18      	it	ne
 80a5b6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5b72:	d1ca      	bne.n	80a5b0a <__aeabi_fdiv+0xba>
 80a5b74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5b78:	f47f af5c 	bne.w	80a5a34 <__aeabi_fmul+0x14c>
 80a5b7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a5b80:	f47f af3c 	bne.w	80a59fc <__aeabi_fmul+0x114>
 80a5b84:	e75f      	b.n	80a5a46 <__aeabi_fmul+0x15e>
 80a5b86:	bf00      	nop

080a5b88 <__gesf2>:
 80a5b88:	f04f 3cff 	mov.w	ip, #4294967295
 80a5b8c:	e006      	b.n	80a5b9c <__cmpsf2+0x4>
 80a5b8e:	bf00      	nop

080a5b90 <__lesf2>:
 80a5b90:	f04f 0c01 	mov.w	ip, #1
 80a5b94:	e002      	b.n	80a5b9c <__cmpsf2+0x4>
 80a5b96:	bf00      	nop

080a5b98 <__cmpsf2>:
 80a5b98:	f04f 0c01 	mov.w	ip, #1
 80a5b9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5ba0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a5ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5bac:	bf18      	it	ne
 80a5bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5bb2:	d011      	beq.n	80a5bd8 <__cmpsf2+0x40>
 80a5bb4:	b001      	add	sp, #4
 80a5bb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a5bba:	bf18      	it	ne
 80a5bbc:	ea90 0f01 	teqne	r0, r1
 80a5bc0:	bf58      	it	pl
 80a5bc2:	ebb2 0003 	subspl.w	r0, r2, r3
 80a5bc6:	bf88      	it	hi
 80a5bc8:	17c8      	asrhi	r0, r1, #31
 80a5bca:	bf38      	it	cc
 80a5bcc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a5bd0:	bf18      	it	ne
 80a5bd2:	f040 0001 	orrne.w	r0, r0, #1
 80a5bd6:	4770      	bx	lr
 80a5bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5bdc:	d102      	bne.n	80a5be4 <__cmpsf2+0x4c>
 80a5bde:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a5be2:	d105      	bne.n	80a5bf0 <__cmpsf2+0x58>
 80a5be4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a5be8:	d1e4      	bne.n	80a5bb4 <__cmpsf2+0x1c>
 80a5bea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a5bee:	d0e1      	beq.n	80a5bb4 <__cmpsf2+0x1c>
 80a5bf0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5bf4:	4770      	bx	lr
 80a5bf6:	bf00      	nop

080a5bf8 <__aeabi_cfrcmple>:
 80a5bf8:	4684      	mov	ip, r0
 80a5bfa:	4608      	mov	r0, r1
 80a5bfc:	4661      	mov	r1, ip
 80a5bfe:	e7ff      	b.n	80a5c00 <__aeabi_cfcmpeq>

080a5c00 <__aeabi_cfcmpeq>:
 80a5c00:	b50f      	push	{r0, r1, r2, r3, lr}
 80a5c02:	f7ff ffc9 	bl	80a5b98 <__cmpsf2>
 80a5c06:	2800      	cmp	r0, #0
 80a5c08:	bf48      	it	mi
 80a5c0a:	f110 0f00 	cmnmi.w	r0, #0
 80a5c0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a5c10 <__aeabi_fcmpeq>:
 80a5c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5c14:	f7ff fff4 	bl	80a5c00 <__aeabi_cfcmpeq>
 80a5c18:	bf0c      	ite	eq
 80a5c1a:	2001      	moveq	r0, #1
 80a5c1c:	2000      	movne	r0, #0
 80a5c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5c22:	bf00      	nop

080a5c24 <__aeabi_fcmplt>:
 80a5c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5c28:	f7ff ffea 	bl	80a5c00 <__aeabi_cfcmpeq>
 80a5c2c:	bf34      	ite	cc
 80a5c2e:	2001      	movcc	r0, #1
 80a5c30:	2000      	movcs	r0, #0
 80a5c32:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5c36:	bf00      	nop

080a5c38 <__aeabi_fcmple>:
 80a5c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5c3c:	f7ff ffe0 	bl	80a5c00 <__aeabi_cfcmpeq>
 80a5c40:	bf94      	ite	ls
 80a5c42:	2001      	movls	r0, #1
 80a5c44:	2000      	movhi	r0, #0
 80a5c46:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5c4a:	bf00      	nop

080a5c4c <__aeabi_fcmpge>:
 80a5c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5c50:	f7ff ffd2 	bl	80a5bf8 <__aeabi_cfrcmple>
 80a5c54:	bf94      	ite	ls
 80a5c56:	2001      	movls	r0, #1
 80a5c58:	2000      	movhi	r0, #0
 80a5c5a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5c5e:	bf00      	nop

080a5c60 <__aeabi_fcmpgt>:
 80a5c60:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5c64:	f7ff ffc8 	bl	80a5bf8 <__aeabi_cfrcmple>
 80a5c68:	bf34      	ite	cc
 80a5c6a:	2001      	movcc	r0, #1
 80a5c6c:	2000      	movcs	r0, #0
 80a5c6e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5c72:	bf00      	nop

080a5c74 <__aeabi_ldivmod>:
 80a5c74:	b97b      	cbnz	r3, 80a5c96 <__aeabi_ldivmod+0x22>
 80a5c76:	b972      	cbnz	r2, 80a5c96 <__aeabi_ldivmod+0x22>
 80a5c78:	2900      	cmp	r1, #0
 80a5c7a:	bfbe      	ittt	lt
 80a5c7c:	2000      	movlt	r0, #0
 80a5c7e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a5c82:	e006      	blt.n	80a5c92 <__aeabi_ldivmod+0x1e>
 80a5c84:	bf08      	it	eq
 80a5c86:	2800      	cmpeq	r0, #0
 80a5c88:	bf1c      	itt	ne
 80a5c8a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a5c8e:	f04f 30ff 	movne.w	r0, #4294967295
 80a5c92:	f000 b9a1 	b.w	80a5fd8 <__aeabi_idiv0>
 80a5c96:	f1ad 0c08 	sub.w	ip, sp, #8
 80a5c9a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a5c9e:	2900      	cmp	r1, #0
 80a5ca0:	db09      	blt.n	80a5cb6 <__aeabi_ldivmod+0x42>
 80a5ca2:	2b00      	cmp	r3, #0
 80a5ca4:	db1a      	blt.n	80a5cdc <__aeabi_ldivmod+0x68>
 80a5ca6:	f000 f835 	bl	80a5d14 <__udivmoddi4>
 80a5caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a5cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a5cb2:	b004      	add	sp, #16
 80a5cb4:	4770      	bx	lr
 80a5cb6:	4240      	negs	r0, r0
 80a5cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5cbc:	2b00      	cmp	r3, #0
 80a5cbe:	db1b      	blt.n	80a5cf8 <__aeabi_ldivmod+0x84>
 80a5cc0:	f000 f828 	bl	80a5d14 <__udivmoddi4>
 80a5cc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a5cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a5ccc:	b004      	add	sp, #16
 80a5cce:	4240      	negs	r0, r0
 80a5cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5cd4:	4252      	negs	r2, r2
 80a5cd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5cda:	4770      	bx	lr
 80a5cdc:	4252      	negs	r2, r2
 80a5cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5ce2:	f000 f817 	bl	80a5d14 <__udivmoddi4>
 80a5ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a5cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a5cee:	b004      	add	sp, #16
 80a5cf0:	4240      	negs	r0, r0
 80a5cf2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5cf6:	4770      	bx	lr
 80a5cf8:	4252      	negs	r2, r2
 80a5cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5cfe:	f000 f809 	bl	80a5d14 <__udivmoddi4>
 80a5d02:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a5d06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a5d0a:	b004      	add	sp, #16
 80a5d0c:	4252      	negs	r2, r2
 80a5d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5d12:	4770      	bx	lr

080a5d14 <__udivmoddi4>:
 80a5d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a5d18:	9e08      	ldr	r6, [sp, #32]
 80a5d1a:	460d      	mov	r5, r1
 80a5d1c:	4604      	mov	r4, r0
 80a5d1e:	468e      	mov	lr, r1
 80a5d20:	2b00      	cmp	r3, #0
 80a5d22:	f040 8083 	bne.w	80a5e2c <__udivmoddi4+0x118>
 80a5d26:	428a      	cmp	r2, r1
 80a5d28:	4617      	mov	r7, r2
 80a5d2a:	d947      	bls.n	80a5dbc <__udivmoddi4+0xa8>
 80a5d2c:	fab2 f382 	clz	r3, r2
 80a5d30:	b14b      	cbz	r3, 80a5d46 <__udivmoddi4+0x32>
 80a5d32:	f1c3 0120 	rsb	r1, r3, #32
 80a5d36:	fa05 fe03 	lsl.w	lr, r5, r3
 80a5d3a:	fa20 f101 	lsr.w	r1, r0, r1
 80a5d3e:	409f      	lsls	r7, r3
 80a5d40:	ea41 0e0e 	orr.w	lr, r1, lr
 80a5d44:	409c      	lsls	r4, r3
 80a5d46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a5d4a:	fbbe fcf8 	udiv	ip, lr, r8
 80a5d4e:	fa1f f987 	uxth.w	r9, r7
 80a5d52:	fb08 e21c 	mls	r2, r8, ip, lr
 80a5d56:	fb0c f009 	mul.w	r0, ip, r9
 80a5d5a:	0c21      	lsrs	r1, r4, #16
 80a5d5c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a5d60:	4290      	cmp	r0, r2
 80a5d62:	d90a      	bls.n	80a5d7a <__udivmoddi4+0x66>
 80a5d64:	18ba      	adds	r2, r7, r2
 80a5d66:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a5d6a:	f080 8118 	bcs.w	80a5f9e <__udivmoddi4+0x28a>
 80a5d6e:	4290      	cmp	r0, r2
 80a5d70:	f240 8115 	bls.w	80a5f9e <__udivmoddi4+0x28a>
 80a5d74:	f1ac 0c02 	sub.w	ip, ip, #2
 80a5d78:	443a      	add	r2, r7
 80a5d7a:	1a12      	subs	r2, r2, r0
 80a5d7c:	fbb2 f0f8 	udiv	r0, r2, r8
 80a5d80:	fb08 2210 	mls	r2, r8, r0, r2
 80a5d84:	fb00 f109 	mul.w	r1, r0, r9
 80a5d88:	b2a4      	uxth	r4, r4
 80a5d8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a5d8e:	42a1      	cmp	r1, r4
 80a5d90:	d909      	bls.n	80a5da6 <__udivmoddi4+0x92>
 80a5d92:	193c      	adds	r4, r7, r4
 80a5d94:	f100 32ff 	add.w	r2, r0, #4294967295
 80a5d98:	f080 8103 	bcs.w	80a5fa2 <__udivmoddi4+0x28e>
 80a5d9c:	42a1      	cmp	r1, r4
 80a5d9e:	f240 8100 	bls.w	80a5fa2 <__udivmoddi4+0x28e>
 80a5da2:	3802      	subs	r0, #2
 80a5da4:	443c      	add	r4, r7
 80a5da6:	1a64      	subs	r4, r4, r1
 80a5da8:	2100      	movs	r1, #0
 80a5daa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a5dae:	b11e      	cbz	r6, 80a5db8 <__udivmoddi4+0xa4>
 80a5db0:	2200      	movs	r2, #0
 80a5db2:	40dc      	lsrs	r4, r3
 80a5db4:	e9c6 4200 	strd	r4, r2, [r6]
 80a5db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5dbc:	b902      	cbnz	r2, 80a5dc0 <__udivmoddi4+0xac>
 80a5dbe:	deff      	udf	#255	; 0xff
 80a5dc0:	fab2 f382 	clz	r3, r2
 80a5dc4:	2b00      	cmp	r3, #0
 80a5dc6:	d14f      	bne.n	80a5e68 <__udivmoddi4+0x154>
 80a5dc8:	1a8d      	subs	r5, r1, r2
 80a5dca:	2101      	movs	r1, #1
 80a5dcc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a5dd0:	fa1f f882 	uxth.w	r8, r2
 80a5dd4:	fbb5 fcfe 	udiv	ip, r5, lr
 80a5dd8:	fb0e 551c 	mls	r5, lr, ip, r5
 80a5ddc:	fb08 f00c 	mul.w	r0, r8, ip
 80a5de0:	0c22      	lsrs	r2, r4, #16
 80a5de2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a5de6:	42a8      	cmp	r0, r5
 80a5de8:	d907      	bls.n	80a5dfa <__udivmoddi4+0xe6>
 80a5dea:	197d      	adds	r5, r7, r5
 80a5dec:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a5df0:	d202      	bcs.n	80a5df8 <__udivmoddi4+0xe4>
 80a5df2:	42a8      	cmp	r0, r5
 80a5df4:	f200 80e9 	bhi.w	80a5fca <__udivmoddi4+0x2b6>
 80a5df8:	4694      	mov	ip, r2
 80a5dfa:	1a2d      	subs	r5, r5, r0
 80a5dfc:	fbb5 f0fe 	udiv	r0, r5, lr
 80a5e00:	fb0e 5510 	mls	r5, lr, r0, r5
 80a5e04:	fb08 f800 	mul.w	r8, r8, r0
 80a5e08:	b2a4      	uxth	r4, r4
 80a5e0a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a5e0e:	45a0      	cmp	r8, r4
 80a5e10:	d907      	bls.n	80a5e22 <__udivmoddi4+0x10e>
 80a5e12:	193c      	adds	r4, r7, r4
 80a5e14:	f100 32ff 	add.w	r2, r0, #4294967295
 80a5e18:	d202      	bcs.n	80a5e20 <__udivmoddi4+0x10c>
 80a5e1a:	45a0      	cmp	r8, r4
 80a5e1c:	f200 80d9 	bhi.w	80a5fd2 <__udivmoddi4+0x2be>
 80a5e20:	4610      	mov	r0, r2
 80a5e22:	eba4 0408 	sub.w	r4, r4, r8
 80a5e26:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a5e2a:	e7c0      	b.n	80a5dae <__udivmoddi4+0x9a>
 80a5e2c:	428b      	cmp	r3, r1
 80a5e2e:	d908      	bls.n	80a5e42 <__udivmoddi4+0x12e>
 80a5e30:	2e00      	cmp	r6, #0
 80a5e32:	f000 80b1 	beq.w	80a5f98 <__udivmoddi4+0x284>
 80a5e36:	2100      	movs	r1, #0
 80a5e38:	e9c6 0500 	strd	r0, r5, [r6]
 80a5e3c:	4608      	mov	r0, r1
 80a5e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5e42:	fab3 f183 	clz	r1, r3
 80a5e46:	2900      	cmp	r1, #0
 80a5e48:	d14b      	bne.n	80a5ee2 <__udivmoddi4+0x1ce>
 80a5e4a:	42ab      	cmp	r3, r5
 80a5e4c:	d302      	bcc.n	80a5e54 <__udivmoddi4+0x140>
 80a5e4e:	4282      	cmp	r2, r0
 80a5e50:	f200 80b9 	bhi.w	80a5fc6 <__udivmoddi4+0x2b2>
 80a5e54:	1a84      	subs	r4, r0, r2
 80a5e56:	eb65 0303 	sbc.w	r3, r5, r3
 80a5e5a:	2001      	movs	r0, #1
 80a5e5c:	469e      	mov	lr, r3
 80a5e5e:	2e00      	cmp	r6, #0
 80a5e60:	d0aa      	beq.n	80a5db8 <__udivmoddi4+0xa4>
 80a5e62:	e9c6 4e00 	strd	r4, lr, [r6]
 80a5e66:	e7a7      	b.n	80a5db8 <__udivmoddi4+0xa4>
 80a5e68:	409f      	lsls	r7, r3
 80a5e6a:	f1c3 0220 	rsb	r2, r3, #32
 80a5e6e:	40d1      	lsrs	r1, r2
 80a5e70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a5e74:	fbb1 f0fe 	udiv	r0, r1, lr
 80a5e78:	fa1f f887 	uxth.w	r8, r7
 80a5e7c:	fb0e 1110 	mls	r1, lr, r0, r1
 80a5e80:	fa24 f202 	lsr.w	r2, r4, r2
 80a5e84:	409d      	lsls	r5, r3
 80a5e86:	fb00 fc08 	mul.w	ip, r0, r8
 80a5e8a:	432a      	orrs	r2, r5
 80a5e8c:	0c15      	lsrs	r5, r2, #16
 80a5e8e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a5e92:	45ac      	cmp	ip, r5
 80a5e94:	fa04 f403 	lsl.w	r4, r4, r3
 80a5e98:	d909      	bls.n	80a5eae <__udivmoddi4+0x19a>
 80a5e9a:	197d      	adds	r5, r7, r5
 80a5e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 80a5ea0:	f080 808f 	bcs.w	80a5fc2 <__udivmoddi4+0x2ae>
 80a5ea4:	45ac      	cmp	ip, r5
 80a5ea6:	f240 808c 	bls.w	80a5fc2 <__udivmoddi4+0x2ae>
 80a5eaa:	3802      	subs	r0, #2
 80a5eac:	443d      	add	r5, r7
 80a5eae:	eba5 050c 	sub.w	r5, r5, ip
 80a5eb2:	fbb5 f1fe 	udiv	r1, r5, lr
 80a5eb6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a5eba:	fb01 f908 	mul.w	r9, r1, r8
 80a5ebe:	b295      	uxth	r5, r2
 80a5ec0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a5ec4:	45a9      	cmp	r9, r5
 80a5ec6:	d907      	bls.n	80a5ed8 <__udivmoddi4+0x1c4>
 80a5ec8:	197d      	adds	r5, r7, r5
 80a5eca:	f101 32ff 	add.w	r2, r1, #4294967295
 80a5ece:	d274      	bcs.n	80a5fba <__udivmoddi4+0x2a6>
 80a5ed0:	45a9      	cmp	r9, r5
 80a5ed2:	d972      	bls.n	80a5fba <__udivmoddi4+0x2a6>
 80a5ed4:	3902      	subs	r1, #2
 80a5ed6:	443d      	add	r5, r7
 80a5ed8:	eba5 0509 	sub.w	r5, r5, r9
 80a5edc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a5ee0:	e778      	b.n	80a5dd4 <__udivmoddi4+0xc0>
 80a5ee2:	f1c1 0720 	rsb	r7, r1, #32
 80a5ee6:	408b      	lsls	r3, r1
 80a5ee8:	fa22 fc07 	lsr.w	ip, r2, r7
 80a5eec:	ea4c 0c03 	orr.w	ip, ip, r3
 80a5ef0:	fa25 f407 	lsr.w	r4, r5, r7
 80a5ef4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a5ef8:	fbb4 f9fe 	udiv	r9, r4, lr
 80a5efc:	fa1f f88c 	uxth.w	r8, ip
 80a5f00:	fb0e 4419 	mls	r4, lr, r9, r4
 80a5f04:	fa20 f307 	lsr.w	r3, r0, r7
 80a5f08:	fb09 fa08 	mul.w	sl, r9, r8
 80a5f0c:	408d      	lsls	r5, r1
 80a5f0e:	431d      	orrs	r5, r3
 80a5f10:	0c2b      	lsrs	r3, r5, #16
 80a5f12:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a5f16:	45a2      	cmp	sl, r4
 80a5f18:	fa02 f201 	lsl.w	r2, r2, r1
 80a5f1c:	fa00 f301 	lsl.w	r3, r0, r1
 80a5f20:	d909      	bls.n	80a5f36 <__udivmoddi4+0x222>
 80a5f22:	eb1c 0404 	adds.w	r4, ip, r4
 80a5f26:	f109 30ff 	add.w	r0, r9, #4294967295
 80a5f2a:	d248      	bcs.n	80a5fbe <__udivmoddi4+0x2aa>
 80a5f2c:	45a2      	cmp	sl, r4
 80a5f2e:	d946      	bls.n	80a5fbe <__udivmoddi4+0x2aa>
 80a5f30:	f1a9 0902 	sub.w	r9, r9, #2
 80a5f34:	4464      	add	r4, ip
 80a5f36:	eba4 040a 	sub.w	r4, r4, sl
 80a5f3a:	fbb4 f0fe 	udiv	r0, r4, lr
 80a5f3e:	fb0e 4410 	mls	r4, lr, r0, r4
 80a5f42:	fb00 fa08 	mul.w	sl, r0, r8
 80a5f46:	b2ad      	uxth	r5, r5
 80a5f48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a5f4c:	45a2      	cmp	sl, r4
 80a5f4e:	d908      	bls.n	80a5f62 <__udivmoddi4+0x24e>
 80a5f50:	eb1c 0404 	adds.w	r4, ip, r4
 80a5f54:	f100 35ff 	add.w	r5, r0, #4294967295
 80a5f58:	d22d      	bcs.n	80a5fb6 <__udivmoddi4+0x2a2>
 80a5f5a:	45a2      	cmp	sl, r4
 80a5f5c:	d92b      	bls.n	80a5fb6 <__udivmoddi4+0x2a2>
 80a5f5e:	3802      	subs	r0, #2
 80a5f60:	4464      	add	r4, ip
 80a5f62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a5f66:	fba0 8902 	umull	r8, r9, r0, r2
 80a5f6a:	eba4 040a 	sub.w	r4, r4, sl
 80a5f6e:	454c      	cmp	r4, r9
 80a5f70:	46c6      	mov	lr, r8
 80a5f72:	464d      	mov	r5, r9
 80a5f74:	d319      	bcc.n	80a5faa <__udivmoddi4+0x296>
 80a5f76:	d016      	beq.n	80a5fa6 <__udivmoddi4+0x292>
 80a5f78:	b15e      	cbz	r6, 80a5f92 <__udivmoddi4+0x27e>
 80a5f7a:	ebb3 020e 	subs.w	r2, r3, lr
 80a5f7e:	eb64 0405 	sbc.w	r4, r4, r5
 80a5f82:	fa04 f707 	lsl.w	r7, r4, r7
 80a5f86:	fa22 f301 	lsr.w	r3, r2, r1
 80a5f8a:	431f      	orrs	r7, r3
 80a5f8c:	40cc      	lsrs	r4, r1
 80a5f8e:	e9c6 7400 	strd	r7, r4, [r6]
 80a5f92:	2100      	movs	r1, #0
 80a5f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5f98:	4631      	mov	r1, r6
 80a5f9a:	4630      	mov	r0, r6
 80a5f9c:	e70c      	b.n	80a5db8 <__udivmoddi4+0xa4>
 80a5f9e:	468c      	mov	ip, r1
 80a5fa0:	e6eb      	b.n	80a5d7a <__udivmoddi4+0x66>
 80a5fa2:	4610      	mov	r0, r2
 80a5fa4:	e6ff      	b.n	80a5da6 <__udivmoddi4+0x92>
 80a5fa6:	4543      	cmp	r3, r8
 80a5fa8:	d2e6      	bcs.n	80a5f78 <__udivmoddi4+0x264>
 80a5faa:	ebb8 0e02 	subs.w	lr, r8, r2
 80a5fae:	eb69 050c 	sbc.w	r5, r9, ip
 80a5fb2:	3801      	subs	r0, #1
 80a5fb4:	e7e0      	b.n	80a5f78 <__udivmoddi4+0x264>
 80a5fb6:	4628      	mov	r0, r5
 80a5fb8:	e7d3      	b.n	80a5f62 <__udivmoddi4+0x24e>
 80a5fba:	4611      	mov	r1, r2
 80a5fbc:	e78c      	b.n	80a5ed8 <__udivmoddi4+0x1c4>
 80a5fbe:	4681      	mov	r9, r0
 80a5fc0:	e7b9      	b.n	80a5f36 <__udivmoddi4+0x222>
 80a5fc2:	4608      	mov	r0, r1
 80a5fc4:	e773      	b.n	80a5eae <__udivmoddi4+0x19a>
 80a5fc6:	4608      	mov	r0, r1
 80a5fc8:	e749      	b.n	80a5e5e <__udivmoddi4+0x14a>
 80a5fca:	f1ac 0c02 	sub.w	ip, ip, #2
 80a5fce:	443d      	add	r5, r7
 80a5fd0:	e713      	b.n	80a5dfa <__udivmoddi4+0xe6>
 80a5fd2:	3802      	subs	r0, #2
 80a5fd4:	443c      	add	r4, r7
 80a5fd6:	e724      	b.n	80a5e22 <__udivmoddi4+0x10e>

080a5fd8 <__aeabi_idiv0>:
 80a5fd8:	4770      	bx	lr
 80a5fda:	bf00      	nop

080a5fdc <atexit>:
 80a5fdc:	2300      	movs	r3, #0
 80a5fde:	4601      	mov	r1, r0
 80a5fe0:	461a      	mov	r2, r3
 80a5fe2:	4618      	mov	r0, r3
 80a5fe4:	f000 b856 	b.w	80a6094 <__register_exitproc>

080a5fe8 <memcpy>:
 80a5fe8:	440a      	add	r2, r1
 80a5fea:	4291      	cmp	r1, r2
 80a5fec:	f100 33ff 	add.w	r3, r0, #4294967295
 80a5ff0:	d100      	bne.n	80a5ff4 <memcpy+0xc>
 80a5ff2:	4770      	bx	lr
 80a5ff4:	b510      	push	{r4, lr}
 80a5ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a5ffa:	4291      	cmp	r1, r2
 80a5ffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a6000:	d1f9      	bne.n	80a5ff6 <memcpy+0xe>
 80a6002:	bd10      	pop	{r4, pc}

080a6004 <memset>:
 80a6004:	4603      	mov	r3, r0
 80a6006:	4402      	add	r2, r0
 80a6008:	4293      	cmp	r3, r2
 80a600a:	d100      	bne.n	80a600e <memset+0xa>
 80a600c:	4770      	bx	lr
 80a600e:	f803 1b01 	strb.w	r1, [r3], #1
 80a6012:	e7f9      	b.n	80a6008 <memset+0x4>

080a6014 <srand>:
 80a6014:	b538      	push	{r3, r4, r5, lr}
 80a6016:	4b0d      	ldr	r3, [pc, #52]	; (80a604c <srand+0x38>)
 80a6018:	4604      	mov	r4, r0
 80a601a:	681d      	ldr	r5, [r3, #0]
 80a601c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a601e:	b97b      	cbnz	r3, 80a6040 <srand+0x2c>
 80a6020:	2018      	movs	r0, #24
 80a6022:	f7fc fe33 	bl	80a2c8c <malloc>
 80a6026:	4a0a      	ldr	r2, [pc, #40]	; (80a6050 <srand+0x3c>)
 80a6028:	4b0a      	ldr	r3, [pc, #40]	; (80a6054 <srand+0x40>)
 80a602a:	63a8      	str	r0, [r5, #56]	; 0x38
 80a602c:	e9c0 2300 	strd	r2, r3, [r0]
 80a6030:	4b09      	ldr	r3, [pc, #36]	; (80a6058 <srand+0x44>)
 80a6032:	2201      	movs	r2, #1
 80a6034:	6083      	str	r3, [r0, #8]
 80a6036:	230b      	movs	r3, #11
 80a6038:	8183      	strh	r3, [r0, #12]
 80a603a:	2300      	movs	r3, #0
 80a603c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a6040:	2200      	movs	r2, #0
 80a6042:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6044:	611c      	str	r4, [r3, #16]
 80a6046:	615a      	str	r2, [r3, #20]
 80a6048:	bd38      	pop	{r3, r4, r5, pc}
 80a604a:	bf00      	nop
 80a604c:	20000008 	.word	0x20000008
 80a6050:	abcd330e 	.word	0xabcd330e
 80a6054:	e66d1234 	.word	0xe66d1234
 80a6058:	0005deec 	.word	0x0005deec

080a605c <strlen>:
 80a605c:	4603      	mov	r3, r0
 80a605e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a6062:	2a00      	cmp	r2, #0
 80a6064:	d1fb      	bne.n	80a605e <strlen+0x2>
 80a6066:	1a18      	subs	r0, r3, r0
 80a6068:	3801      	subs	r0, #1
 80a606a:	4770      	bx	lr

080a606c <strncpy>:
 80a606c:	4603      	mov	r3, r0
 80a606e:	b510      	push	{r4, lr}
 80a6070:	3901      	subs	r1, #1
 80a6072:	b132      	cbz	r2, 80a6082 <strncpy+0x16>
 80a6074:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a6078:	3a01      	subs	r2, #1
 80a607a:	f803 4b01 	strb.w	r4, [r3], #1
 80a607e:	2c00      	cmp	r4, #0
 80a6080:	d1f7      	bne.n	80a6072 <strncpy+0x6>
 80a6082:	2100      	movs	r1, #0
 80a6084:	441a      	add	r2, r3
 80a6086:	4293      	cmp	r3, r2
 80a6088:	d100      	bne.n	80a608c <strncpy+0x20>
 80a608a:	bd10      	pop	{r4, pc}
 80a608c:	f803 1b01 	strb.w	r1, [r3], #1
 80a6090:	e7f9      	b.n	80a6086 <strncpy+0x1a>
	...

080a6094 <__register_exitproc>:
 80a6094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a6098:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a6158 <__register_exitproc+0xc4>
 80a609c:	4606      	mov	r6, r0
 80a609e:	f8d8 0000 	ldr.w	r0, [r8]
 80a60a2:	461f      	mov	r7, r3
 80a60a4:	460d      	mov	r5, r1
 80a60a6:	4691      	mov	r9, r2
 80a60a8:	f000 f858 	bl	80a615c <__retarget_lock_acquire_recursive>
 80a60ac:	4b26      	ldr	r3, [pc, #152]	; (80a6148 <__register_exitproc+0xb4>)
 80a60ae:	681c      	ldr	r4, [r3, #0]
 80a60b0:	b934      	cbnz	r4, 80a60c0 <__register_exitproc+0x2c>
 80a60b2:	4c26      	ldr	r4, [pc, #152]	; (80a614c <__register_exitproc+0xb8>)
 80a60b4:	601c      	str	r4, [r3, #0]
 80a60b6:	4b26      	ldr	r3, [pc, #152]	; (80a6150 <__register_exitproc+0xbc>)
 80a60b8:	b113      	cbz	r3, 80a60c0 <__register_exitproc+0x2c>
 80a60ba:	681b      	ldr	r3, [r3, #0]
 80a60bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a60c0:	6863      	ldr	r3, [r4, #4]
 80a60c2:	2b1f      	cmp	r3, #31
 80a60c4:	dd07      	ble.n	80a60d6 <__register_exitproc+0x42>
 80a60c6:	f8d8 0000 	ldr.w	r0, [r8]
 80a60ca:	f000 f849 	bl	80a6160 <__retarget_lock_release_recursive>
 80a60ce:	f04f 30ff 	mov.w	r0, #4294967295
 80a60d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a60d6:	b35e      	cbz	r6, 80a6130 <__register_exitproc+0x9c>
 80a60d8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a60dc:	b988      	cbnz	r0, 80a6102 <__register_exitproc+0x6e>
 80a60de:	4b1d      	ldr	r3, [pc, #116]	; (80a6154 <__register_exitproc+0xc0>)
 80a60e0:	b923      	cbnz	r3, 80a60ec <__register_exitproc+0x58>
 80a60e2:	f8d8 0000 	ldr.w	r0, [r8]
 80a60e6:	f000 f83a 	bl	80a615e <__retarget_lock_release>
 80a60ea:	e7f0      	b.n	80a60ce <__register_exitproc+0x3a>
 80a60ec:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a60f0:	f7fc fdcc 	bl	80a2c8c <malloc>
 80a60f4:	2800      	cmp	r0, #0
 80a60f6:	d0f4      	beq.n	80a60e2 <__register_exitproc+0x4e>
 80a60f8:	2300      	movs	r3, #0
 80a60fa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a60fe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a6102:	2201      	movs	r2, #1
 80a6104:	6863      	ldr	r3, [r4, #4]
 80a6106:	2e02      	cmp	r6, #2
 80a6108:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a610c:	fa02 f203 	lsl.w	r2, r2, r3
 80a6110:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a6114:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a6118:	ea43 0302 	orr.w	r3, r3, r2
 80a611c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a6120:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a6124:	bf02      	ittt	eq
 80a6126:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a612a:	431a      	orreq	r2, r3
 80a612c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a6130:	6863      	ldr	r3, [r4, #4]
 80a6132:	f8d8 0000 	ldr.w	r0, [r8]
 80a6136:	1c5a      	adds	r2, r3, #1
 80a6138:	3302      	adds	r3, #2
 80a613a:	6062      	str	r2, [r4, #4]
 80a613c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a6140:	f000 f80e 	bl	80a6160 <__retarget_lock_release_recursive>
 80a6144:	2000      	movs	r0, #0
 80a6146:	e7c4      	b.n	80a60d2 <__register_exitproc+0x3e>
 80a6148:	2000068c 	.word	0x2000068c
 80a614c:	20000600 	.word	0x20000600
 80a6150:	00000000 	.word	0x00000000
 80a6154:	080a2c8d 	.word	0x080a2c8d
 80a6158:	2000006c 	.word	0x2000006c

080a615c <__retarget_lock_acquire_recursive>:
 80a615c:	4770      	bx	lr

080a615e <__retarget_lock_release>:
 80a615e:	4770      	bx	lr

080a6160 <__retarget_lock_release_recursive>:
 80a6160:	4770      	bx	lr

080a6162 <link_code_end>:
	...

080a6164 <dynalib_user>:
 80a6164:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a6174:	0000 0000 6554 706d 7265 7461 7275 2065     ....Temperature 
 80a6184:	203d 2000 0046 7250 7365 7573 6572 3d20     = . F.Pressure =
 80a6194:	0020 6d20 486d 0067 7041 7270 786f 202e      . mmHg.Approx. 
 80a61a4:	6c41 6974 7574 6564 3d20 0020 6d20 4800     Altitude = . m.H
 80a61b4:	6d75 6469 7469 2079 203d 2000 0025 2d2d     umidity = . %.--
 80a61c4:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a61d4:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a61e4:	2d2d 5300 6e65 6f73 3a72 2020 2020 2020     --.Sensor:      
 80a61f4:	0020 7244 7669 7265 5620 7265 203a 2020      .Driver Ver:   
 80a6204:	5500 696e 7571 2065 4449 203a 2020 0020     .Unique ID:    .
 80a6214:	614d 2078 6156 756c 3a65 2020 2020 2000     Max Value:    . 
 80a6224:	7878 0078 694d 206e 6156 756c 3a65 2020     xxx.Min Value:  
 80a6234:	2020 5200 7365 6c6f 7475 6f69 3a6e 2020       .Resolution:  
 80a6244:	0020 6554 706d 202e 203d 2000 b0c2 0046      .Temp. = . ..F.
 80a6254:	7250 7365 2e73 3d20 0020 614d 7272 6569     Press. = .Marrie
 80a6264:	6920 2073 7267 6165 2174 4100 4300 4f00      is great!.A.C.O
 80a6274:	6972 6e65 6174 6974 6e6f 203a 2c00 0020     rientation: ., .
 80a6284:	7551 7461 7265 696e 6e6f 203a 4300 6c61     Quaternion: .Cal
 80a6294:	6269 6172 6974 6e6f 203a 0a00 000a 3a58     ibration: ....X:
 80a62a4:	0020 5909 203a 0900 3a5a 0020 6f63 706d      ..Y: ..Z: .comp
 80a62b4:	7361 2073 6568 6461 6e69 3a67 2020 4200     ass heading:  .B
 80a62c4:	454d 3832 2030 6574 7473 3100 3832 3678     ME280 test.128x6
 80a62d4:	2034 4c4f 4445 4620 6165 6874 7265 6957     4 OLED FeatherWi
 80a62e4:	676e 7420 7365 0074 4c4f 4445 6220 6765     ng test.OLED beg
 80a62f4:	6e75 4200 7475 6f74 206e 6574 7473 4300     un.Button test.C
 80a6304:	6e6f 656e 7463 6e69 2067 6f74 5320 4953     onnecting to SSI
 80a6314:	0a44 6127 6164 7266 6975 2774 003a 6f63     D.'adafruit':.co
 80a6324:	6e6e 6365 6574 2164 4900 3a50 3120 2e30     nnected!.IP: 10.
 80a6334:	2e30 2e31 3332 5300 6e65 6964 676e 7620     0.1.23.Sending v
 80a6344:	6c61 2320 0030 6f43 6c75 2064 6f6e 2074     al #0.Could not 
 80a6354:	6966 646e 6120 7620 6c61 6469 4220 454d     find a valid BME
 80a6364:	3832 2030 6573 736e 726f 202c 6863 6365     280 sensor, chec
 80a6374:	206b 6977 6972 676e 202c 6461 7264 7365     k wiring, addres
 80a6384:	2c73 7320 6e65 6f73 2072 4449 0021 6553     s, sensor ID!.Se
 80a6394:	736e 726f 4449 7720 7361 203a 7830 2000     nsorID was: 0x. 
 80a63a4:	2020 2020 2020 4920 2044 666f 3020 4678            ID of 0xF
 80a63b4:	2046 7270 626f 6261 796c 6d20 6165 736e     F probably means
 80a63c4:	6120 6220 6461 6120 6464 6572 7373 202c      a bad address, 
 80a63d4:	2061 4d42 2050 3831 2030 726f 4220 504d     a BMP 180 or BMP
 80a63e4:	3020 3538 000a 2020 4920 2044 666f 3020      085..   ID of 0
 80a63f4:	3578 2d36 7830 3835 7220 7065 6572 6573     x56-0x58 represe
 80a6404:	746e 2073 2061 4d42 2050 3832 2c30 000a     nts a BMP 280,..
 80a6414:	2020 2020 2020 2020 4449 6f20 2066 7830             ID of 0x
 80a6424:	3036 7220 7065 6572 6573 746e 2073 2061     60 represents a 
 80a6434:	4d42 2045 3832 2e30 000a 2020 2020 2020     BME 280...      
 80a6444:	2020 4449 6f20 2066 7830 3136 7220 7065       ID of 0x61 rep
 80a6454:	6572 6573 746e 2073 2061 4d42 2045 3836     resents a BME 68
 80a6464:	2e30 000a 6557 5362 7265 6169 206c 4433     0...WebSerial 3D
 80a6474:	4620 7269 776d 7261 0065 6f4f 706f 2c73      Firmware.Ooops,
 80a6484:	6e20 206f 4e42 304f 3535 6420 7465 6365      no BNO055 detec
 80a6494:	6574 2064 2e2e 202e 6843 6365 206b 6f79     ted ... Check yo
 80a64a4:	7275 7720 7269 6e69 2067 726f 4920 4332     ur wiring or I2C
 80a64b4:	4120 4444 2152 6400 6665 7561 746c 0020      ADDR!.default .
 80a64c4:	534d 0042 534c 0042 533c 4950 6553 7474     MSB.LSB.<SPISett
 80a64d4:	6e69 7367 6420 6665 7561 746c 003e 533c     ings default>.<S
 80a64e4:	4950 6553 7474 6e69 7367 2520 2573 2075     PISettings %s%u 
 80a64f4:	7325 4d20 444f 2545 3e75 0000               %s MODE%u>..

080a6500 <_ZTVN8particle11SPISettingsE>:
	...
 80a6508:	0965 080a 0929 080a 092b 080a 4e42 304f     e...)...+...BNO0
 80a6518:	3535 0000                                   55..

080a651c <_ZTV15Adafruit_BNO055>:
	...
 80a6524:	167d 080a 16c1 080a 167b 080a 1a19 080a     }.......{.......
 80a6534:	1681 080a                                   ....

080a6538 <_ZTV17Adafruit_GrayOLED>:
	...
 80a6548:	246d 080a 2e81 080a 1a6b 080a 1ea1 080a     m$......k.......
 80a6558:	1ea3 080a 1ed3 080a 1eaf 080a 1ec1 080a     ................
 80a6568:	1de5 080a 1ea1 080a 20c9 080a 1c73 080a     ......... ..s...
 80a6578:	1eeb 080a 1f29 080a 1f63 080a 1fa9 080a     ....)...c.......
 80a6588:	2047 080a 1fc5 080a 00a9 080a               G ..........

080a6594 <_ZL4font>:
 80a6594:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a65a4:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a65b4:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a65c4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a65d4:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a65e4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a65f4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a6604:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a6614:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a6624:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a6634:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a6644:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a6654:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a6664:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a6674:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a6684:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a6694:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a66a4:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a66b4:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a66c4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a66d4:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a66e4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a66f4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a6704:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a6714:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a6724:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a6734:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a6744:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a6754:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a6764:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a6774:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a6784:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a6794:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a67a4:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a67b4:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a67c4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a67d4:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a67e4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a67f4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a6804:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a6814:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a6824:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 80a6834:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a6844:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a6854:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 80a6864:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a6874:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 80a6884:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 80a6894:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 80a68a4:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a68b4:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a68c4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a68d4:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a68e4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a68f4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a6904:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 80a6914:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 80a6924:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 80a6934:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 80a6944:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 80a6954:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 80a6964:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 80a6974:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 80a6984:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 80a6994:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 80a69a4:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 80a69b4:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 80a69c4:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 80a69d4:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 80a69e4:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 80a69f4:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 80a6a04:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 80a6a14:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 80a6a24:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 80a6a34:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 80a6a44:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 80a6a54:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 80a6a64:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 80a6a74:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 80a6a84:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

080a6a94 <_ZTV12Adafruit_GFX>:
	...
 80a6aa4:	246d 080a 2e81 080a 00a9 080a 1ea1 080a     m$..............
 80a6ab4:	1ea3 080a 1ed3 080a 1eaf 080a 1ec1 080a     ................
 80a6ac4:	1de5 080a 1ea1 080a 20c9 080a 2045 080a     ......... ..E ..
 80a6ad4:	1eeb 080a 1f29 080a 1f63 080a 1fa9 080a     ....)...c.......
 80a6ae4:	2047 080a 1fc5 080a                         G ......

080a6aec <_ZTV15Adafruit_SH110X>:
	...
 80a6af4:	00a9 080a 00a9 080a 246d 080a 2e81 080a     ........m$......
 80a6b04:	1a6b 080a 1ea1 080a 1ea3 080a 1ed3 080a     k...............
 80a6b14:	1eaf 080a 1ec1 080a 1de5 080a 1ea1 080a     ................
 80a6b24:	20c9 080a 1c73 080a 1eeb 080a 1f29 080a     . ..s.......)...
 80a6b34:	1f63 080a 1fa9 080a 2047 080a 1fc5 080a     c.......G ......
 80a6b44:	257b 080a                                   {%..

080a6b48 <_ZL12splash2_data>:
 80a6b48:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
 80a6b58:	e000 0000 0000 0000 0000 0000 0000 0100     ................
 80a6b68:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
 80a6b84:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
 80a6b94:	f007 0000 0000 0000 0000 0000 0000 0700     ................
 80a6ba4:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
 80a6bb4:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
 80a6bc4:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
 80a6bd4:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
 80a6be4:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
 80a6bf4:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
 80a6c04:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
 80a6c14:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
 80a6c24:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
 80a6c34:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
 80a6c44:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
 80a6c54:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
 80a6c64:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
 80a6c74:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
 80a6c84:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
 80a6c94:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
 80a6ca4:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
 80a6cb4:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
 80a6cc4:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
 80a6cdc:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
 80a6cec:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
 80a6cfc:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
 80a6d0c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
 80a6d1c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

080a6d28 <_ZTV15Adafruit_SH1107>:
	...
 80a6d30:	2719 080a 272d 080a 246d 080a 2e81 080a     .'..-'..m$......
 80a6d40:	1a6b 080a 1ea1 080a 1ea3 080a 1ed3 080a     k...............
 80a6d50:	1eaf 080a 1ec1 080a 1de5 080a 1ea1 080a     ................
 80a6d60:	20c9 080a 1c73 080a 1eeb 080a 1f29 080a     . ..s.......)...
 80a6d70:	1f63 080a 1fa9 080a 2047 080a 1fc5 080a     c.......G ......
 80a6d80:	257b 080a                                   {%..

080a6d84 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
 80a6d84:	00d3 7fa8                                   ....

080a6d88 <_ZZN15Adafruit_SH11075beginEhbE4init>:
 80a6d88:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
 80a6d98:	35db 3fa8 a6a4                              .5.?..

080a6d9e <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a6d9e:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
 80a6dae:	766f 0066 002e 7061 0070 5925 252d 2d6d     ovf...app.%Y-%m-
 80a6dbe:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
 80a6dce:	7463 6d69 0065                              ctime.

080a6dd4 <_ZTV9IPAddress>:
	...
 80a6ddc:	330d 080a 32fd 080a 32ff 080a               .3...2...2..

080a6de8 <_ZTV9USBSerial>:
	...
 80a6df0:	33cb 080a 3431 080a 3409 080a 2e81 080a     .3..14...4......
 80a6e00:	33fb 080a 33cd 080a 33dd 080a 342b 080a     .3...3...3..+4..
 80a6e10:	33ed 080a 33c5 080a                         .3...3..

080a6e18 <_ZTV11USARTSerial>:
	...
 80a6e20:	3565 080a 35cf 080a 35ab 080a 2e81 080a     e5...5...5......
 80a6e30:	357b 080a 3597 080a 3589 080a 35a5 080a     {5...5...5...5..
 80a6e40:	3567 080a 356d 080a                         g5..m5..

080a6e48 <_ZTV7TwoWire>:
	...
 80a6e50:	3651 080a 369b 080a 3673 080a 3653 080a     Q6...6..s6..S6..
 80a6e60:	367b 080a 3683 080a 368b 080a 3693 080a     {6...6...6...6..

080a6e70 <_ZTVN5spark9WiFiClassE>:
	...
 80a6e78:	37e5 080a 37db 080a 37d1 080a 374f 080a     .7...7...7..O7..
 80a6e88:	3157 080a 37c5 080a 3845 080a 384d 080a     W1...7..E8..M8..
 80a6e98:	37b9 080a 37b1 080a 37a7 080a 379d 080a     .7...7...7...7..
 80a6ea8:	3759 080a                                   Y7..

080a6eac <_ZTVN5spark12NetworkClassE>:
	...
 80a6eb4:	3805 080a 380f 080a 3819 080a 3823 080a     .8...8...8..#8..
 80a6ec4:	382d 080a 3839 080a 3845 080a 384d 080a     -8..98..E8..M8..
 80a6ed4:	3855 080a 3861 080a 3869 080a 3873 080a     U8..a8..i8..s8..
 80a6ee4:	387d 080a                                   }8..

080a6ee8 <_ZSt7nothrow>:
 80a6ee8:	0000 0000 6f70 0077 0000 0000 0000 0000     ....pow.........

080a6ef8 <TWO52>:
 80a6ef8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080a6f08 <link_const_variable_data_end>:
 80a6f08:	080a0319 	.word	0x080a0319
 80a6f0c:	080a2e5d 	.word	0x080a2e5d
 80a6f10:	080a3165 	.word	0x080a3165
 80a6f14:	080a3175 	.word	0x080a3175
 80a6f18:	080a3191 	.word	0x080a3191
 80a6f1c:	080a37f1 	.word	0x080a37f1
 80a6f20:	080a38cd 	.word	0x080a38cd
 80a6f24:	080a39f1 	.word	0x080a39f1

080a6f28 <link_constructors_end>:
	...
